{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@td-vantage/ui-platform/sqle/query.service.ts","ng://@td-vantage/ui-platform/sqle/dictionary.service.ts","ng://@td-vantage/ui-platform/sqle/connection.service.ts","ng://@td-vantage/ui-platform/sqle/sqle.module.ts"],"names":["__generator","thisArg","body","f","y","t","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","this","n","v","op","TypeError","call","done","value","pop","length","push","e","step","VantageQueryService","_httpClient","prototype","querySystem","connection","payload","headers","HttpHeaders","append","creds","set","logMech","system","system_attributes","attributes","log_mech","clientId","post","nickname","pipe","catchError","error","map","resultSet","getTableInfo","databaseName","tableName","get","getViewInfo","viewName","getQuery","requestId","getQueries","sessionId","getQueryResult","queryId","deleteQuery","delete","createSession","autoCommit","transactionMode","charSet","deleteSession","Injectable","HttpClient","VANTAGE_QUERY_PROVIDER_FACTORY","parent","httpClient","VANTAGE_QUERY_PROVIDER","provide","deps","Optional","SkipSelf","useFactory","sysDatabases","VantageDictionaryService","_queryService","getViewHelp","database","view","_this","queryStr","columns","column","comment","remarks","type","columnType","name","table","switchMap","viewInfo","query","count","ddlStatement","results","data","forEach","row","cnt","columnName","getTableHelp","info","getDatabaseFunction","funcName","join","getDatabaseFunctions","sqlHelp","index","indexOf","substr","split","filter","func","getAnalyticalFunctions","objectname","getAnalyticalFunction","analyticalFunction","functionName","shortDescription","longDescription","usageSyntax","inputColumns","outputColumns","stringArray","undefined","resultSetPredicate","TableName","requestText","RequestText","CommentString","kind","TableKind","getStoredProcedures","getExternalStoredProcedures","getMacros","functionsvxPredicate","DatabaseName","SpecificName","paramNumber","NumParameters","paramDataTypes","ParameterDataTypes","commentString","getTableOperators","getTableFunctions","getForeignServers","getForeignSchemas","foreignServer","Schema","getForeignTables","schema","Table","getForeignColumns","Column","Type","getDatabases","schemaname","DBKind","permSpace","PermSpace","spoolSpace","SpoolSpace","tempSpace","TempSpace","getDatabaseObjects","databaseId","tablekind","tablename","DataBaseName","databasename","getTableColumns","tableId","search","searchStr","options","databases","objects","queries","dbQuery","objectQuery","columnQuery","objectType","newParent","nameSplit","objectName","VANTAGE_DICTIONARY_PROVIDER_FACTORY","queryService","VANTAGE_DICTIONARY_PROVIDER","VantageConnectionService","Object","defineProperty","JSON","parse","sessionStorage","getItem","_a","disconnect","removeItem","connect","_arguments","generator","timeout","retry","toPromise","store","P","Promise","resolve","reject","fulfilled","rejected","result","then","apply","setItem","stringify","VANTAGE_CONNECTION_PROVIDER_FACTORY","VANTAGE_CONNECTION_PROVIDER","VantageSQLEModule","NgModule","args","imports","CommonModule","providers"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable, Provider, Optional, SkipSelf } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { ISystem } from '@td-vantage/ui-platform/system';\n\nexport interface IQueryPayload {\n  query: string;\n  session?: string;\n  logMech?: string;\n  rowOffset?: number;\n  rowLimit?: number;\n  format?: string; // (default)-object, array, or csv\n  includeColumns?: boolean;\n  includeColumnsTypes?: boolean;\n  spooledResultSet?: boolean;\n  clientId?: string;\n}\n\nexport interface IQueryResultSet {\n  queueDuration: number;\n  queryDuration: number;\n  results: IQueryResultSetResult[];\n}\n\nexport interface IQueryResultSetResult {\n  data: { [name: string]: string }[];\n  resultSet: boolean;\n  rowCount: number;\n  rowLimitExceeded: boolean;\n  columns?: { [name: string]: string }[];\n}\n\nexport interface IQueryInfo {\n  success?: boolean;\n  logTime?: string;\n  error?: any;\n  resultSet?: IQueryResultSet;\n}\n\nexport interface ISQLEConnection {\n  system: ISystem;\n  creds?: string;\n}\n\n@Injectable()\nexport class VantageQueryService {\n  constructor(private _httpClient: HttpClient) {}\n\n  querySystem(connection: ISQLEConnection, payload: IQueryPayload): Observable<IQueryResultSet> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n      payload.logMech = connection.system.system_attributes.attributes.log_mech || 'DEFAULT';\n    } else {\n      payload.logMech = 'JWT';\n    }\n    payload.clientId = 'VANTAGE.EDITOR';\n    const request: Observable<object> = this._httpClient.post(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries',\n      payload,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getTableInfo(connection: ISQLEConnection, databaseName: string, tableName: string): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n\n    const request: Observable<object> = this._httpClient.get(\n      `/api/query/systems/${connection.system.nickname}/databases/${databaseName}/tables/${tableName}`,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getViewInfo(connection: ISQLEConnection, databaseName: string, viewName: string): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n\n    const request: Observable<object> = this._httpClient.get(\n      `/api/query/systems/${connection.system.nickname}/databases/${databaseName}/views/${viewName}`,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getQuery(connection: ISQLEConnection, requestId: string): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._httpClient.get(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries/' + requestId,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: any) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getQueries(connection: ISQLEConnection, sessionId: string): Observable<IQueryResultSet> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._httpClient.get(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries?session=' + sessionId,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getQueryResult(connection: ISQLEConnection, queryId: string): Observable<IQueryResultSet> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._httpClient.get(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries/' + queryId + '/results',\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  deleteQuery(connection: ISQLEConnection, queryId: string): Observable<IQueryResultSet> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._httpClient.delete(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries/' + queryId,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  createSession(connection: ISQLEConnection): Observable<any> {\n    const payload: any = {\n      autoCommit: 'true',\n      transactionMode: 'TERA',\n      charSet: 'UTF8',\n    };\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n      payload.logMech = connection.system.system_attributes.attributes.log_mech || 'DEFAULT';\n    } else {\n      payload.logMech = 'JWT';\n    }\n    const request: Observable<object> = this._httpClient.post(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/sessions',\n      payload,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: any) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  deleteSession(connection: ISQLEConnection, sessionId: string): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._httpClient.delete(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/sessions/' + sessionId,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: any) => {\n        return resultSet;\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_QUERY_PROVIDER_FACTORY(\n  parent: VantageQueryService,\n  httpClient: HttpClient,\n): VantageQueryService {\n  return parent || new VantageQueryService(httpClient);\n}\n\nexport const VANTAGE_QUERY_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageQueryService,\n  deps: [[new Optional(), new SkipSelf(), VantageQueryService], HttpClient],\n  useFactory: VANTAGE_QUERY_PROVIDER_FACTORY,\n};\n","import { Injectable, SkipSelf, Optional, Provider } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nimport { VantageQueryService, IQueryResultSet, ISQLEConnection } from './query.service';\n\nexport const sysDatabases: string[] = [\n  'DBC',\n  'dbcmngr',\n  'SQLJ',\n  'SystemFe',\n  'SysAdmin',\n  'SYSBAR',\n  'SYSJDBC',\n  'SYSLIB',\n  'SYSUDTLIB',\n  'TDMaps',\n  'TD_SERVER_DB',\n  'TD_SYSFNLIB',\n  'TD_SYSXML',\n  'Sys_Calendar',\n];\n\nexport interface IDictionarySystem {\n  hostname?: string;\n  password?: string;\n  port?: number;\n  system_id?: string;\n  last_run?: string;\n  interval_minutes?: number;\n  enabled?: boolean;\n  last_attempt?: string;\n  in_collection?: boolean;\n  username?: string;\n}\n\nexport interface IDictionaryDatabase {\n  parent_name?: string;\n  size_bytes?: number;\n  system_id?: string;\n  name?: string;\n  id?: string;\n  type?: string;\n}\n\nexport interface IDictionaryDatabaseObject {\n  system_id?: string;\n  database_id?: string;\n  id?: string;\n  name?: string;\n  size_bytes?: number;\n  type?: string;\n  create_text?: string;\n}\n\nexport interface IDictionaryTableColumn {\n  system_id?: string;\n  database_id?: string;\n  table_id?: string;\n  id?: string;\n  name?: string;\n}\n\n/**\n * FunctionType\n * A - Aggregate\n * B - Aggregate and statistical\n * C - Contract function\n * D - External stored procedure\n * F - Scalar\n * H - User defined method\n * I - Internal type method\n * L - Table operator\n * R - Table Function\n * S - Statistical\n */\n\n/**\n * TableKind for dbc.tablesvx;\n * A - Aggregate function\n * B - Combined aggregate and ordered analytical function\n * C - Table operator parser contract function\n * D - JAR\n * E - External Stored Procedure\n * F - Standard Function\n * G - Trigger\n * H - Instance or contructor method\n * I - Join Index\n * J - Journal\n * K - Foreign Server Object\n * L - User defined table operator\n * M - Macro\n * N - Hash index\n * O - Table with no primary index and no partitioning\n * P - Stored Procedure\n * Q - Queue table\n * R - Table function\n * S - Ordered Analytical function\n * T - table with a primary index or primary AMP index, partitioning or both. Or a partioned table with NoPI;\n * U - User defined type\n * V - View\n * X - Authorization\n * Y - GLOP set\n * Z - UIF - User Installed File\n * 1 - A DATASET schema object created by CREATE SCHEMA\n * 2 - Functon alias object\n */\n\n/**\n * dbc.externalSPs\n * dbc.sessionInfovx\n */\n\n@Injectable()\nexport class VantageDictionaryService {\n  constructor(private _queryService: VantageQueryService) {}\n\n  getViewHelp(connection: ISQLEConnection, database: string, view: string): Observable<any> {\n    const queryStr: string = `\n      LOCK ROW FOR ACCESS\n      SELECT CAST(COUNT(*) AS BIGINT) as cnt\n      FROM ${database}.${view};\n      SHOW VIEW ${database}.${view};\n    `;\n\n    return this._queryService.getViewInfo(connection, database, view).pipe(\n      map((resultSet: any) => {\n        return resultSet.columns.map((column: any) => {\n          return {\n            comment: column.remarks,\n            type: 'column',\n            columnType: column.type,\n            name: column.name,\n            database: resultSet.database,\n            table: resultSet.name,\n          };\n        });\n      }),\n      switchMap((viewInfo: any) => {\n        return this._queryService\n          .querySystem(connection, {\n            query: queryStr,\n          })\n          .pipe(\n            map((resultSet: IQueryResultSet) => {\n              let ddlStatement: string = '';\n              resultSet.results[1].data.forEach((row: any) => {\n                ddlStatement += row['Request Text'];\n              });\n              let count: string;\n              resultSet.results[0].data.forEach((row: any) => {\n                count = row.cnt;\n              });\n\n              const columns: any[] = viewInfo.map((row: any) => {\n                return {\n                  columnName: row.name,\n                  type: row.columnType,\n                };\n              });\n\n              return {\n                database,\n                view,\n                columns,\n                count,\n                ddlStatement,\n              };\n            }),\n          );\n      }),\n    );\n  }\n\n  getTableHelp(connection: ISQLEConnection, database: string, table: string): Observable<any> {\n    const queryStr: string = `\n      LOCK ROW FOR ACCESS\n      SELECT CAST(COUNT(*) AS BIGINT) as cnt\n      FROM ${database}.${table};\n      SHOW TABLE ${database}.${table};\n    `;\n    return this._queryService.getTableInfo(connection, database, table).pipe(\n      map((resultSet: any) => {\n        return resultSet.columns.map((column: any) => {\n          return {\n            comment: column.remarks,\n            type: 'column',\n            columnType: column.type,\n            name: column.name,\n            database: resultSet.database,\n            table: resultSet.name,\n          };\n        });\n      }),\n      switchMap((info: any) => {\n        return this._queryService\n          .querySystem(connection, {\n            query: queryStr,\n          })\n          .pipe(\n            map((resultSet: IQueryResultSet) => {\n              let ddlStatement: string = '';\n              resultSet.results[1].data.forEach((row: any) => {\n                ddlStatement += row['Request Text'];\n              });\n              let count: string;\n              resultSet.results[0].data.forEach((row: any) => {\n                count = row.cnt;\n              });\n              const columns: any[] = info.map((row: any) => {\n                return {\n                  columnName: row.name,\n                  type: row.columnType,\n                };\n              });\n              return {\n                database,\n                table,\n                columns,\n                count,\n                ddlStatement,\n              };\n            }),\n          );\n      }),\n    );\n  }\n\n  getDatabaseFunction(connection: ISQLEConnection, funcName: string): Observable<any> {\n    const queryStr: string = `\n      HELP 'SQL ${funcName}';\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          const stringArray: string[] = resultSet.results[0].data.map((row: any) => {\n            return row['On-Line Help'];\n          });\n          return stringArray.join(' ');\n        }),\n      );\n  }\n\n  getDatabaseFunctions(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      HELP 'SQL';\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          const stringArray: string[] = resultSet.results[0].data.map((row: any) => {\n            return row['On-Line Help'];\n          });\n          let sqlHelp: string = stringArray.join(' ');\n          const index: number = sqlHelp.indexOf('FUNCTIONS') + 12;\n          sqlHelp = sqlHelp.substr(index, sqlHelp.length);\n          return sqlHelp\n            .split(' ')\n            .filter((func: string) => {\n              return func;\n            })\n            .map((func: string) => {\n              return {\n                name: func,\n              };\n            });\n        }),\n      );\n  }\n\n  getAnalyticalFunctions(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      HELP FOREIGN SCHEMA \"public\"@coprocessor;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            return {\n              name: row.objectname,\n            };\n          });\n        }),\n      );\n  }\n\n  getAnalyticalFunction(connection: ISQLEConnection, analyticalFunction: string): Observable<any> {\n    const queryStr: string = `\n      HELP FOREIGN FUNCTION \"public\".\"${analyticalFunction}\"@coprocessor;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          let functionName: string = '';\n          let shortDescription: string = '';\n          let longDescription: string = '';\n          let usageSyntax: string = '';\n          let inputColumns: string = '';\n          let outputColumns: string = '';\n          const functionOwner: string = '';\n          const creationTime: string = '';\n          const functionVersion: string = '';\n          const interfacesImplemented: string = '';\n          const stringArray: string[] = resultSet.results[0].data.map((row: any) => {\n            return row['Function Help'];\n          });\n          for (let index: number = 0; index < stringArray.length; index++) {\n            const value: string = stringArray[index];\n            if (value.indexOf('Function Name:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                functionName += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Short Description:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                shortDescription += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Long Description:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                longDescription += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Usage Syntax:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                usageSyntax += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Input Columns:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                inputColumns += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Output Columns:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                outputColumns += stringArray[index] + '\\n';\n              }\n            } else {\n              // Function Owner:\n              // Creation Time:\n              // Function Version:\n              // Interfaces Implemented:\n              if (stringArray.indexOf('') > -1) {\n                index = stringArray.indexOf('');\n                stringArray[index] = undefined;\n              }\n            }\n          }\n          return {\n            functionName,\n            shortDescription,\n            longDescription,\n            usageSyntax,\n            inputColumns,\n            outputColumns,\n          };\n        }),\n      );\n  }\n\n  resultSetPredicate(resultSet: IQueryResultSet): any {\n    return resultSet.results[0].data.map((row: any) => {\n      return {\n        name: row.TableName,\n        requestText: row.RequestText,\n        comment: row.CommentString,\n        kind: row.TableKind,\n      };\n    });\n  }\n\n  getStoredProcedures(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT DataBaseName, TableName, TableKind, RequestText, CommentString FROM dbc.tablesvx\n      WHERE TableKind = 'P'\n      ORDER BY TableName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.resultSetPredicate));\n  }\n\n  getExternalStoredProcedures(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT DataBaseName, TableName, TableKind, RequestText, CommentString FROM dbc.tablesvx\n      WHERE TableKind = 'E'\n      ORDER BY TableName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.resultSetPredicate));\n  }\n\n  getMacros(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT DataBaseName, TableName, TableKind, RequestText, CommentString FROM dbc.tablesvx\n      WHERE TableKind = 'M'\n      ORDER BY TableName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.resultSetPredicate));\n  }\n\n  functionsvxPredicate(resultSet: IQueryResultSet): any {\n    return resultSet.results[0].data.map((row: any) => {\n      return {\n        database: row.DatabaseName,\n        name: row.SpecificName,\n        paramNumber: row.NumParameters,\n        paramDataTypes: row.ParameterDataTypes,\n        requestText: row.RequestText,\n        commentString: row.CommentString,\n        kind: row.TableKind,\n      };\n    });\n  }\n\n  getTableOperators(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT func.DatabaseName, func.FunctionName, func.SpecificName, func.NumParameters,\n      func.ParameterDataTypes, tbl.RequestText, tbl.CommentString, tbl.TableKind\n      FROM dbc.functionsvx as func\n      INNER JOIN dbc.tablesvx as tbl\n      ON tbl.TableName = func.SpecificName\n      AND tbl.DataBaseName = func.DatabaseName\n      WHERE FunctionType = 'L'\n      ORDER BY func.FunctionName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.functionsvxPredicate));\n  }\n\n  getTableFunctions(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT func.DatabaseName, func.FunctionName, func.SpecificName, func.NumParameters,\n      func.ParameterDataTypes, tbl.RequestText, tbl.CommentString, tbl.TableKind\n      FROM dbc.functionsvx as func\n      INNER JOIN dbc.tablesvx as tbl\n      ON tbl.TableName = func.SpecificName\n      AND tbl.DataBaseName = func.DatabaseName\n      WHERE FunctionType = 'R'\n      ORDER BY func.FunctionName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.functionsvxPredicate));\n  }\n\n  getForeignServers(connection: ISQLEConnection): Observable<any[]> {\n    const queryStr: string = `\n      SELECT TableName, TableKind FROM DBC.TABLESVX\n      WHERE DATABASENAME = 'TD_SERVER_DB' AND\n      TABLEKIND = 'K' AND\n      TableName <> 'coprocesor';\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            return {\n              name: row.TableName,\n              kind: row.TableKind,\n            };\n          });\n        }),\n      );\n  }\n\n  getForeignSchemas(connection: ISQLEConnection, foreignServer: string): Observable<any[]> {\n    const queryStr: string = `\n      HELP FOREIGN SERVER ${foreignServer};\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: { Schema: string }) => {\n            return {\n              name: row.Schema,\n              kind: 'NONE',\n            };\n          });\n        }),\n      );\n  }\n\n  getForeignTables(connection: ISQLEConnection, foreignServer: string, schema: string): Observable<any[]> {\n    const queryStr: string = `\n      HELP FOREIGN DATABASE \"${schema}\"@${foreignServer};\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: { Table: string }) => {\n            return {\n              name: row.Table,\n              kind: 'NONE',\n            };\n          });\n        }),\n      );\n  }\n\n  getForeignColumns(\n    connection: ISQLEConnection,\n    foreignServer: string,\n    schema: string,\n    table: string,\n  ): Observable<any[]> {\n    const queryStr: string = `\n      HELP FOREIGN TABLE \"${schema}\".\"${table}\"@${foreignServer};\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: { Column: string; Type: string }) => {\n            return {\n              name: row.Column,\n              type: row.Type,\n            };\n          });\n        }),\n      );\n  }\n\n  getDatabases(connection: ISQLEConnection): Observable<any[]> {\n    const queryStr: string =\n      'SELECT databasename, PermSpace, SpoolSpace, TempSpace, CommentString, DBKind FROM dbc.databasesVX ORDER BY databasename;';\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            return {\n              name: row.DatabaseName || row.schemaname,\n              type: row.DBKind === 'U' ? 'user' : 'database',\n              permSpace: row.PermSpace,\n              spoolSpace: row.SpoolSpace,\n              tempSpace: row.TempSpace,\n              comment: row.CommentString,\n            };\n          });\n        }),\n      );\n  }\n\n  getDatabaseObjects(connection: ISQLEConnection, databaseId: string): Observable<any[]> {\n    const queryStr: string = `SELECT DataBaseName, TableName, TableKind, CommentString FROM dbc.tablesvx\n       WHERE TableKind in ('T', 'O', 'V') AND DataBaseName = '${databaseId}' ORDER BY TableName ASC;`;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            const type: string = row.TableKind || row.tablekind;\n            return {\n              kind: row.TableKind || row.tablekind,\n              type: type === 'V' ? 'view' : 'table',\n              name: row.TableName || row.tablename,\n              database: row.DataBaseName || row.databasename,\n              comment: row.CommentString,\n            };\n          });\n        }),\n      );\n  }\n\n  getTableColumns(type: string, connection: ISQLEConnection, databaseId: string, tableId: string): Observable<any> {\n    if (type === 'table') {\n      return this._queryService.getTableInfo(connection, databaseId, tableId).pipe(\n        map((resultSet: any) => {\n          return resultSet.columns.map((column: any) => {\n            return {\n              comment: column.remarks,\n              type: 'column',\n              columnType: column.type,\n              name: column.name,\n              database: resultSet.database,\n              table: resultSet.name,\n            };\n          });\n        }),\n      );\n    } else if (type === 'view') {\n      return this._queryService.getViewInfo(connection, databaseId, tableId).pipe(\n        map((resultSet: any) => {\n          return resultSet.columns.map((column: any) => {\n            return {\n              comment: column.remarks,\n              type: 'column',\n              columnType: column.type,\n              name: column.name,\n              database: resultSet.database,\n              table: resultSet.name,\n            };\n          });\n        }),\n      );\n    }\n  }\n\n  search(\n    connection: ISQLEConnection,\n    searchStr: string,\n    options: {\n      databases: boolean;\n      objects: boolean;\n      columns: boolean;\n    } = {\n      databases: true,\n      objects: true,\n      columns: true,\n    },\n  ): Observable<any[]> {\n    const queries: string[] = [];\n    if (options.databases) {\n      const dbQuery: string = `\n        SELECT\n            DatabaseName as objectName,\n            'database' as objectType,\n            DBKind as kind,\n            CommentString\n        FROM dbc.databasesvx\n        WHERE DatabaseName LIKE '%${searchStr}%'\n        AND DataBaseName NOT IN ('${sysDatabases.join(\"', '\")}')\n      `;\n      queries.push(dbQuery);\n    }\n    if (options.objects) {\n      const objectQuery: string = `\n        SELECT\n            DataBaseName || '~|~' || TableName as objectName,\n            'object' as objectType,\n            TableKind as kind,\n            CommentString\n        FROM dbc.tablesvx\n        WHERE TableKind in ('T', 'O', 'V')\n        AND TableName LIKE '%${searchStr}%'\n        AND DataBaseName NOT IN ('${sysDatabases.join(\"', '\")}')\n      `;\n      queries.push(objectQuery);\n    }\n    if (options.objects) {\n      const columnQuery: string = `\n        SELECT\n            DataBaseName || '~|~' || TableName || '~|~' || ColumnName as objectName,\n            'column' as objectType,\n            ColumnType as kind,\n            CommentString\n        FROM dbc.columnsVX\n        WHERE columnname LIKE '%${searchStr}%'\n        AND DataBaseName NOT IN ('${sysDatabases.join(\"', '\")}')\n      `;\n      queries.push(columnQuery);\n    }\n    const unionJoin: string = queries.join('UNION');\n    const queryStr: string = `\n      WITH quick_search AS (\n          ${unionJoin}\n      )\n      SELECT * FROM quick_search\n      ORDER BY 1\n      SAMPLE 100;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            let kind: string = row.kind;\n            // map to proper type/kind\n            if (row.objectType === 'column') {\n              kind = 'column';\n            } else if (row.objectType === 'database') {\n              kind = kind === 'D' ? 'database' : 'user';\n            } else {\n              kind = kind === 'V' ? 'view' : 'table';\n            }\n            const newParent: string[] = [];\n            // split name and parents..\n            const nameSplit: string[] = row.objectName.split('~|~');\n            for (let index: number = 0; index < nameSplit.length - 1; index++) {\n              newParent.push('\"' + nameSplit[index] + '\"');\n            }\n            return {\n              parent: newParent.join('.'),\n              name: nameSplit[nameSplit.length - 1],\n              kind,\n              type: row.objectType,\n              comment: row.CommentString,\n            };\n          });\n        }),\n      );\n  }\n}\n\nexport function VANTAGE_DICTIONARY_PROVIDER_FACTORY(\n  parent: VantageDictionaryService,\n  queryService: VantageQueryService,\n): VantageDictionaryService {\n  return parent || new VantageDictionaryService(queryService);\n}\n\nexport const VANTAGE_DICTIONARY_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageDictionaryService,\n  deps: [[new Optional(), new SkipSelf(), VantageDictionaryService], VantageQueryService],\n  useFactory: VANTAGE_DICTIONARY_PROVIDER_FACTORY,\n};\n","import { Injectable, Optional, SkipSelf, Provider } from '@angular/core';\nimport { retry, timeout } from 'rxjs/operators';\nimport { ISQLEConnection, VantageQueryService } from './query.service';\n\nconst CONNECTION_SESSION_KEY: string = 'vantage.editor.connection';\n\n@Injectable()\nexport class VantageConnectionService {\n  constructor(private _queryService: VantageQueryService) {}\n\n  public get current(): ISQLEConnection {\n    try {\n      return JSON.parse(sessionStorage.getItem(CONNECTION_SESSION_KEY));\n    } catch {\n      return undefined;\n    }\n  }\n\n  public disconnect(): void {\n    sessionStorage.removeItem(CONNECTION_SESSION_KEY);\n  }\n\n  public async connect(connection: ISQLEConnection): Promise<void> {\n    // clear connection before starting a new one\n    this.disconnect();\n    // test connection with SELECT 1\n    await this._queryService\n      .querySystem(connection, { query: 'SELECT 1;' })\n      .pipe(timeout(7000), retry(1))\n      .toPromise();\n    // if successful, save\n    this.store(connection);\n  }\n\n  private store({ system, creds }: ISQLEConnection): void {\n    sessionStorage.setItem(CONNECTION_SESSION_KEY, JSON.stringify({ system, creds }));\n  }\n}\n\nexport function VANTAGE_CONNECTION_PROVIDER_FACTORY(\n  parent: VantageConnectionService,\n  queryService: VantageQueryService,\n): VantageConnectionService {\n  return parent || new VantageConnectionService(queryService);\n}\n\nexport const VANTAGE_CONNECTION_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageConnectionService,\n  deps: [[new Optional(), new SkipSelf(), VantageConnectionService], VantageQueryService],\n  useFactory: VANTAGE_CONNECTION_PROVIDER_FACTORY,\n};\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VANTAGE_CONNECTION_PROVIDER } from './connection.service';\nimport { VANTAGE_DICTIONARY_PROVIDER } from './dictionary.service';\nimport { VANTAGE_QUERY_PROVIDER } from './query.service';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [VANTAGE_CONNECTION_PROVIDER, VANTAGE_DICTIONARY_PROVIDER, VANTAGE_QUERY_PROVIDER],\n})\nexport class VantageSQLEModule {}\n"]}