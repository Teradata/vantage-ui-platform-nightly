{"version":3,"sources":["ng://@td-vantage/ui-platform/access/guards/block-root-access.guard.ts","ng://@td-vantage/ui-platform/access/guards/block-user-access.guard.ts","ng://@td-vantage/ui-platform/access/access.module.ts"],"names":["VantageBlockRootAccessGuard","_authGuard","_sessionService","this","prototype","canActivate","next","state","_this","pipe","map","user","admin","location","replace","Injectable","VantageAuthenticationGuard","VantageSessionService","VantageBlockUserAccessGuard","VantageAccessModule","NgModule","args","imports","CommonModule","providers"],"mappings":"ooBAYA,IAAAA,EAAA,WAEE,SAAAA,EAAoBC,EAAgDC,GAAhDC,KAAAF,WAAAA,EAAgDE,KAAAD,gBAAAA,EActE,OAZEF,EAAAI,UAAAC,YAAA,SAAYC,EAA8BC,GAA1C,IAAAC,EAAAL,KAEE,OAAOA,KAAKF,WAAWI,YAAYC,EAAMC,GAAOE,KAC9CC,EAAAA,IAAG,WACD,OAAIF,EAAKN,gBAAgBS,KAAKC,QAC5BC,SAASC,QAAQ,MACV,2BAVhBC,EAAAA,sDAP+BC,EAAAA,kCAAvBC,EAAAA,yBAuBTjB,EAhBA,GCAAkB,EAAA,WAEE,SAAAA,EAAoBjB,EAAgDC,GAAhDC,KAAAF,WAAAA,EAAgDE,KAAAD,gBAAAA,EActE,OAZEgB,EAAAd,UAAAC,YAAA,SAAYC,EAA8BC,GAA1C,IAAAC,EAAAL,KAEE,OAAOA,KAAKF,WAAWI,YAAYC,EAAMC,GAAOE,KAC9CC,EAAAA,IAAG,WACD,QAAKF,EAAKN,gBAAgBS,KAAKC,QAC7BC,SAASC,QAAQ,MACV,2BAVhBC,EAAAA,sDAP+BC,EAAAA,kCAAvBC,EAAAA,yBAuBTC,EAhBA,GCZAC,EAAA,WAMA,SAAAA,KAWA,2BAXCC,EAAAA,SAAQC,KAAA,CAAC,CACRC,QAAS,CACPC,EAAAA,cAEFC,UAAW,CACTxB,EACAkB,OAKJC,EAjBA","sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { VantageSessionService, VantageAuthenticationGuard } from '@td-vantage/ui-platform/auth';\n\n/**\n * Guard that checks if the user is root (`admin` flag `true`)\n * to block access into a particular route.\n * If `admin` flag is `true`, then we redirect to `/`\n */\n@Injectable()\nexport class VantageBlockRootAccessGuard implements CanActivate {\n  constructor(private _authGuard: VantageAuthenticationGuard, private _sessionService: VantageSessionService) {}\n\n  canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    // pipe through the VantageAuthentication guard to be able to chain guards\n    return this._authGuard.canActivate(next, state).pipe(\n      map(() => {\n        if (this._sessionService.user.admin) {\n          location.replace('/');\n          return false;\n        }\n        return true;\n      }),\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { VantageSessionService, VantageAuthenticationGuard } from '@td-vantage/ui-platform/auth';\n\n/**\n * Guard that checks if the user is a normal user (`admin` flag `false`)\n * to block access into a particular route.\n * If `admin` flag is `false`, then we redirect to `/`\n */\n@Injectable()\nexport class VantageBlockUserAccessGuard implements CanActivate {\n  constructor(private _authGuard: VantageAuthenticationGuard, private _sessionService: VantageSessionService) {}\n\n  canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    // pipe through the VantageAuthentication guard to be able to chain guards\n    return this._authGuard.canActivate(next, state).pipe(\n      map(() => {\n        if (!this._sessionService.user.admin) {\n          location.replace('/');\n          return false;\n        }\n        return true;\n      }),\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VantageBlockRootAccessGuard } from './guards/block-root-access.guard';\nimport { VantageBlockUserAccessGuard } from './guards/block-user-access.guard';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  providers: [\n    VantageBlockRootAccessGuard,\n    VantageBlockUserAccessGuard,\n  ],\n})\nexport class VantageAccessModule {\n\n}\n"]}