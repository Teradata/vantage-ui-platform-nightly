{"version":3,"file":"td-vantage-ui-platform.js","sources":["ng://@td-vantage/ui-platform/audit/audit.service.ts","ng://@td-vantage/ui-platform/audit/audit.module.ts","ng://@td-vantage/ui-platform/notification/smtp/smtp.service.ts","ng://@td-vantage/ui-platform/notification/notification.module.ts","ng://@td-vantage/ui-platform/system/system.service.ts","ng://@td-vantage/ui-platform/system/system.module.ts","ng://@td-vantage/ui-platform/user/ldap/ldap.service.ts","ng://@td-vantage/ui-platform/user/user/user.service.ts","ng://@td-vantage/ui-platform/user/group/group.service.ts","ng://@td-vantage/ui-platform/user/user.module.ts","ng://@td-vantage/ui-platform/sqle/query.service.ts","ng://@td-vantage/ui-platform/sqle/dictionary.service.ts","ng://@td-vantage/ui-platform/sqle/connection.service.ts","ng://@td-vantage/ui-platform/sqle/sqle.module.ts","ng://@td-vantage/ui-platform/utilities/user-feedback/error/error.service.ts","ng://@td-vantage/ui-platform/utilities/user-feedback/toast/toast.service.ts","ng://@td-vantage/ui-platform/utilities/user-feedback/user-feedback.module.ts","ng://@td-vantage/ui-platform/theme/theme.service.ts","ng://@td-vantage/ui-platform/theme/theme.module.ts"],"sourcesContent":["import { Optional, SkipSelf, Provider } from '@angular/core';\nimport { HttpParams, HttpHeaders, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nimport { TdHttp, TdGET, TdPOST, TdParam, TdBody, TdResponse, TdQueryParams } from '@covalent/http';\n\nexport interface IAuditLog {\n  action?: string;\n  component?: string;\n  correlation_id?: string;\n  details?: string;\n  id?: number;\n  logtime?: any;\n  message?: string;\n  result?: boolean;\n  username?: string;\n}\n\n@TdHttp({\n  baseUrl: '/api/audit',\n  baseHeaders: new HttpHeaders({ Accept: 'application/json' }),\n})\nexport class VantageAuditService {\n  @TdGET({\n    path: '/audit/messages',\n    options: {\n      observe: 'response',\n    },\n  })\n  query(\n    @TdQueryParams() params?: HttpParams,\n    @TdResponse() response?: Observable<HttpResponse<any>>,\n  ): Observable<{ total: number; data: IAuditLog[] }> {\n    return response.pipe(\n      map((res: HttpResponse<any>) => {\n        return {\n          total: +res.headers.get('X-Total'),\n          data: <IAuditLog[]>res.body,\n        };\n      }),\n    );\n  }\n\n  @TdPOST({\n    path: '/audit/messages',\n  })\n  create(@TdBody() body: IAuditLog, @TdResponse() response?: Observable<IAuditLog>): Observable<IAuditLog> {\n    return response;\n  }\n\n  @TdGET({\n    path: '/audit/messages/:id',\n  })\n  get(@TdParam('id') id: number | string, @TdResponse() response?: Observable<IAuditLog>): Observable<IAuditLog> {\n    return response;\n  }\n\n  @TdGET({\n    path: '/health',\n  })\n  health(@TdResponse() response?: Observable<HttpResponse<any>>): Observable<boolean> {\n    return response.pipe(\n      catchError((error: HttpErrorResponse) => {\n        return of(false);\n      }),\n      map((res: HttpResponse<any>) => {\n        return !!res;\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_AUDIT_PROVIDER_FACTORY(parent: VantageAuditService): VantageAuditService {\n  return parent || new VantageAuditService();\n}\n\nexport const VANTAGE_AUDIT_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageAuditService,\n  deps: [[new Optional(), new SkipSelf(), VantageAuditService]],\n  useFactory: VANTAGE_AUDIT_PROVIDER_FACTORY,\n};\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VANTAGE_AUDIT_PROVIDER } from './audit.service';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [VANTAGE_AUDIT_PROVIDER],\n})\nexport class VantageAuditModule {}\n","import { Provider, Optional, SkipSelf } from '@angular/core';\nimport { HttpHeaders, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nimport { TdHttp, TdGET, TdPUT, TdDELETE, TdBody, TdResponse } from '@covalent/http';\n\nexport interface ISMTPConfig {\n  server?: string;\n  port?: number;\n  reply_address?: string;\n  smtp_username?: string;\n  smtp_password?: string;\n  use_ssl?: boolean;\n  anon_logon?: boolean;\n  server_timeout?: number;\n}\n\n@TdHttp({\n  baseUrl: '/api/notification',\n  baseHeaders: new HttpHeaders({ Accept: 'application/json' }),\n})\nexport class VantageSMTPService {\n  @TdPUT({\n    path: '/smtp-config',\n  })\n  create(@TdBody() body: ISMTPConfig, @TdResponse() response?: Observable<ISMTPConfig>): Observable<ISMTPConfig> {\n    return response;\n  }\n\n  @TdGET({\n    path: '/smtp-config',\n  })\n  query(@TdResponse() response?: Observable<ISMTPConfig>): Observable<ISMTPConfig> {\n    return response;\n  }\n\n  @TdDELETE({\n    path: '/smtp-config',\n  })\n  delete(@TdResponse() response?: Observable<void>): Observable<void> {\n    return response;\n  }\n\n  @TdGET({\n    path: '/health',\n  })\n  health(@TdResponse() response?: Observable<HttpResponse<any>>): Observable<boolean> {\n    return response.pipe(\n      catchError((error: HttpErrorResponse) => {\n        return of(false);\n      }),\n      map((res: HttpResponse<any>) => {\n        return !!res;\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_SMTP_PROVIDER_FACTORY(parent: VantageSMTPService): VantageSMTPService {\n  return parent || new VantageSMTPService();\n}\n\nexport const VANTAGE_SMTP_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageSMTPService,\n  deps: [[new Optional(), new SkipSelf(), VantageSMTPService]],\n  useFactory: VANTAGE_SMTP_PROVIDER_FACTORY,\n};\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VANTAGE_SMTP_PROVIDER } from './smtp/smtp.service';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [VANTAGE_SMTP_PROVIDER],\n})\nexport class VantageNotificationModule {}\n","import { Optional, SkipSelf, Provider } from '@angular/core';\nimport { HttpParams, HttpHeaders, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nimport { TdHttp, TdGET, TdPUT, TdPOST, TdDELETE, TdParam, TdBody, TdResponse, TdQueryParams } from '@covalent/http';\n\n/*\n * These interfaces are duplicated in the system and the query service.\n * However, within the system service, SystemType includes Aster & Presto.\n * Whereas in the query service, they are excluded.\n * TODO: DRY this up\n */\nexport enum SystemType {\n  Teradata = 'TERADATA',\n  Aster = 'ASTER',\n  Presto = 'PRESTO',\n}\n\nexport const VANTAGE_SYSTEMS_TYPES: SystemType[] = [SystemType.Teradata, SystemType.Aster, SystemType.Presto];\n\nexport interface ISystemAttributes {\n  attributes?: any;\n}\n\nexport interface IAbstractSystem {\n  host?: string;\n  port?: number;\n  system_type?: SystemType;\n  catalog?: string;\n  schema?: string;\n}\n\nexport interface ISystem extends IAbstractSystem {\n  attributes?: string;\n  data_center?: string;\n  environment?: string;\n  id?: string;\n  nickname?: string;\n  platform_id?: number;\n  system_attributes?: ISystemAttributes;\n  version?: string;\n}\n\nexport interface ITestSystem extends IAbstractSystem {\n  account?: string;\n  default_char_set?: string;\n  default_database?: string;\n  log_mech?: string;\n  password?: string;\n  username?: string;\n}\n\n@TdHttp({\n  baseUrl: '/api/system',\n  baseHeaders: new HttpHeaders({ Accept: 'application/json' }),\n})\nexport class VantageSystemService {\n  @TdGET({\n    path: '/health',\n  })\n  health(@TdResponse() response?: Observable<HttpResponse<any>>): Observable<boolean> {\n    return response.pipe(\n      catchError((error: HttpErrorResponse) => {\n        return of(false);\n      }),\n      map((res: HttpResponse<any>) => {\n        return !!res;\n      }),\n    );\n  }\n\n  @TdGET({\n    path: '/systems',\n    options: {\n      observe: 'response',\n    },\n  })\n  query(\n    @TdQueryParams() params?: HttpParams,\n    @TdResponse() response?: Observable<HttpResponse<any>>,\n  ): Observable<{ total: number; data: ISystem[] }> {\n    return response.pipe(\n      map((res: HttpResponse<any>) => {\n        return {\n          total: +res.headers.get('X-Total'),\n          data: <ISystem[]>res.body,\n        };\n      }),\n    );\n  }\n\n  @TdGET({\n    path: '/systems/:id',\n  })\n  get(@TdParam('id') id: string | number, @TdResponse() response?: Observable<ISystem>): Observable<ISystem> {\n    return response;\n  }\n\n  @TdPOST({\n    path: '/systems',\n  })\n  create(@TdBody() system: ISystem, @TdResponse() response?: Observable<ISystem>): Observable<ISystem> {\n    return response;\n  }\n\n  @TdPUT({\n    path: '/systems/:id',\n  })\n  update(\n    @TdParam('id') id: string,\n    @TdBody() system: ISystem,\n    @TdResponse() response?: Observable<ISystem>,\n  ): Observable<ISystem> {\n    return response;\n  }\n\n  @TdDELETE({\n    path: '/systems/:id',\n  })\n  delete(@TdParam('id') id: string, @TdResponse() response?: Observable<void>): Observable<void> {\n    return response;\n  }\n\n  @TdPOST({\n    path: '/testsystem',\n  })\n  test(@TdBody() system: ITestSystem, @TdResponse() response?: Observable<HttpResponse<any>>): Observable<boolean> {\n    return response.pipe(\n      map((res: HttpResponse<any>) => {\n        return true;\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_SYSTEM_PROVIDER_FACTORY(parent: VantageSystemService): VantageSystemService {\n  return parent || new VantageSystemService();\n}\n\nexport const VANTAGE_SYSTEM_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageSystemService,\n  deps: [[new Optional(), new SkipSelf(), VantageSystemService]],\n  useFactory: VANTAGE_SYSTEM_PROVIDER_FACTORY,\n};\n","import { NgModule, Type, InjectionToken } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VANTAGE_SYSTEM_PROVIDER } from './system.service';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [VANTAGE_SYSTEM_PROVIDER],\n})\nexport class VantageSystemModule {}\n","import { Provider, Optional, SkipSelf } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { TdHttp, TdGET, TdPUT, TdPOST, TdPATCH, TdDELETE, TdParam, TdBody, TdResponse } from '@covalent/http';\n\nexport enum LDAPEncription {\n  None = 'NONE',\n}\n\nexport interface ILDAPConfig {\n  allowed_groups?: string[];\n  base_dn?: string;\n  config_id?: number;\n  connectionUrl?: string;\n  email_field?: string;\n  encryption?: LDAPEncription;\n  group_id_field?: string;\n  groups_base_dn?: string;\n  id_field?: string;\n  member_field?: string;\n  member_of_field?: string;\n  name_field?: string;\n  port?: number;\n  search_pass?: string;\n  search_user?: string;\n  server?: string;\n  url?: string;\n}\n\n@TdHttp({\n  baseUrl: '/api/user/ldap/config',\n  baseHeaders: new HttpHeaders({ Accept: 'application/json' }),\n})\nexport class VantageLDAPService {\n  @TdGET({\n    path: '/',\n  })\n  query(@TdResponse() response?: Observable<ILDAPConfig[]>): Observable<ILDAPConfig[]> {\n    return response;\n  }\n\n  @TdPOST({\n    path: '/',\n  })\n  create(@TdBody() body: ILDAPConfig, @TdResponse() response?: Observable<ILDAPConfig>): Observable<ILDAPConfig> {\n    return response;\n  }\n\n  @TdPATCH({\n    path: '/:id',\n  })\n  update(\n    @TdParam('id') id: string | number,\n    @TdBody() body: ILDAPConfig,\n    @TdResponse() response?: Observable<ILDAPConfig>,\n  ): Observable<ILDAPConfig> {\n    return response;\n  }\n\n  @TdDELETE({\n    path: '/:id',\n  })\n  delete(@TdParam('id') id: string | number, @TdResponse() response?: Observable<void>): Observable<void> {\n    return response;\n  }\n\n  @TdPOST({\n    path: '/verify',\n    options: {\n      observe: 'response',\n    },\n  })\n  test(@TdBody() body: ILDAPConfig, @TdResponse() response?: Observable<boolean>): Observable<boolean> {\n    return response.pipe(\n      map((res: any) => {\n        return res.status === 200;\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_LDAP_PROVIDER_FACTORY(parent: VantageLDAPService): VantageLDAPService {\n  return parent || new VantageLDAPService();\n}\n\nexport const VANTAGE_LDAP_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageLDAPService,\n  deps: [[new Optional(), new SkipSelf(), VantageLDAPService]],\n  useFactory: VANTAGE_LDAP_PROVIDER_FACTORY,\n};\n","import { Provider, SkipSelf, Optional } from '@angular/core';\nimport { HttpHeaders, HttpResponse, HttpParams } from '@angular/common/http';\nimport { TdHttp, TdGET, TdResponse, TdParam, TdQueryParams } from '@covalent/http';\nimport { Observable, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nexport interface IUser {\n  username?: string;\n  password?: string;\n  email?: string;\n  local?: boolean;\n  admin?: boolean;\n  groups?: string[];\n  display_name?: string;\n  access_token?: string;\n  expires_at?: number;\n}\n\n@TdHttp({\n  baseUrl: '/api/user',\n  baseHeaders: new HttpHeaders({\n    Accept: 'application/json',\n  }),\n})\nexport class VantageUserService {\n  /**\n   * get all users\n   */\n  @TdGET({\n    path: '/users',\n    options: {\n      observe: 'response',\n    },\n  })\n  query(\n    @TdQueryParams() queryParams?: HttpParams,\n    @TdResponse() response?: Observable<HttpResponse<any>>,\n  ): Observable<{ total: number; data: IUser[] }> {\n    return response.pipe(\n      catchError((error: Response) => {\n        return of(error);\n      }),\n      map((res: HttpResponse<any>) => {\n        return {\n          total: +res.headers.get('X-Total'),\n          data: <IUser[]>res.body,\n        };\n      }),\n    );\n  }\n\n  /**\n   * gets a single users information\n   */\n  @TdGET({\n    path: '/users/:username',\n    options: {\n      observe: 'response',\n    },\n  })\n  get(@TdParam('username') id: string, @TdResponse() response?: Observable<HttpResponse<any>>): Observable<IUser> {\n    return response.pipe(\n      catchError((error: Response) => {\n        return of(error);\n      }),\n      map((res: HttpResponse<IUser>) => {\n        return res.body;\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_USER_PROVIDER_FACTORY(parent: VantageUserService): VantageUserService {\n  return parent || new VantageUserService();\n}\n\nexport const VANTAGE_USER_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageUserService,\n  deps: [[new Optional(), new SkipSelf(), VantageUserService]],\n  useFactory: VANTAGE_USER_PROVIDER_FACTORY,\n};\n","import { Provider, SkipSelf, Optional } from '@angular/core';\nimport { HttpHeaders, HttpResponse, HttpParams } from '@angular/common/http';\nimport { TdHttp, TdGET, TdResponse, TdQueryParams } from '@covalent/http';\nimport { Observable, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nexport interface IGroup {\n  name?: string;\n  description?: string;\n  id?: string;\n  display_name?: string;\n  users?: string[];\n}\n\n@TdHttp({\n  baseUrl: '/api/user',\n  baseHeaders: new HttpHeaders({\n    Accept: 'application/json',\n  }),\n})\nexport class VantageGroupService {\n  /**\n   * get groups in paginated form via query string\n   */\n  @TdGET({\n    path: '/groups',\n    options: {\n      observe: 'response',\n    },\n  })\n  query(\n    @TdQueryParams() queryParams?: HttpParams,\n    @TdResponse() response?: Observable<HttpResponse<any>>,\n  ): Observable<{ total: number; data: IGroup[] }> {\n    return response.pipe(\n      catchError((error: Response) => {\n        return of(error);\n      }),\n      map((res: HttpResponse<any>) => {\n        return {\n          total: +res.headers.get('X-Total'),\n          data: <IGroup[]>res.body,\n        };\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_GROUP_PROVIDER_FACTORY(parent: VantageGroupService): VantageGroupService {\n  return parent || new VantageGroupService();\n}\n\nexport const VANTAGE_GROUP_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageGroupService,\n  deps: [[new Optional(), new SkipSelf(), VantageGroupService]],\n  useFactory: VANTAGE_GROUP_PROVIDER_FACTORY,\n};\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VANTAGE_LDAP_PROVIDER } from './ldap/ldap.service';\nimport { VANTAGE_USER_PROVIDER } from './user/user.service';\nimport { VANTAGE_GROUP_PROVIDER } from './group/group.service';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [VANTAGE_LDAP_PROVIDER, VANTAGE_USER_PROVIDER, VANTAGE_GROUP_PROVIDER],\n})\nexport class VantageUserModule {}\n","import { Injectable, Provider, Optional, SkipSelf } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\n/*\n * These interfaces are duplicated in the system and the query service.\n * However, within the system service, SystemType includes Aster & Presto.\n * Whereas in the query service, they are excluded.\n * TODO: DRY this up\n */\nenum SystemType {\n  Teradata = 'TERADATA',\n  // TODO: remove the following 2\n  Aster = 'ASTER',\n  Presto = 'PRESTO',\n}\ninterface ISystemAttributes {\n  attributes?: any;\n}\ninterface IAbstractSystem {\n  host?: string;\n  port?: number;\n  system_type?: SystemType;\n  catalog?: string;\n  schema?: string;\n}\ninterface ISystem extends IAbstractSystem {\n  attributes?: string;\n  data_center?: string;\n  environment?: string;\n  id?: string;\n  nickname?: string;\n  platform_id?: number;\n  system_attributes?: ISystemAttributes;\n  version?: string;\n}\n\nexport interface IQueryPayload {\n  query: string;\n  session?: string;\n  logMech?: string;\n  rowOffset?: number;\n  rowLimit?: number;\n  format?: string; // (default)-object, array, or csv\n  includeColumns?: boolean;\n  includeColumnsTypes?: boolean;\n  spooledResultSet?: boolean;\n  clientId?: string;\n}\n\nexport interface IQueryResultSet {\n  queueDuration: number;\n  queryDuration: number;\n  results: IQueryResultSetResult[];\n}\n\nexport interface IQueryResultSetResult {\n  data: { [name: string]: string }[];\n  resultSet: boolean;\n  rowCount: number;\n  rowLimitExceeded: boolean;\n  columns?: { [name: string]: string }[];\n}\n\nexport interface IQueryInfo {\n  success?: boolean;\n  logTime?: string;\n  error?: any;\n  resultSet?: IQueryResultSet;\n}\n\nexport interface ISQLEConnection {\n  system: ISystem;\n  creds?: string;\n}\n\n@Injectable()\nexport class VantageQueryService {\n  constructor(private _httpClient: HttpClient) {}\n\n  querySystem(connection: ISQLEConnection, payload: IQueryPayload): Observable<IQueryResultSet> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n      payload.logMech = connection.system.system_attributes.attributes.log_mech || 'DEFAULT';\n    } else {\n      payload.logMech = 'JWT';\n    }\n    payload.clientId = 'VANTAGE.EDITOR';\n    const request: Observable<object> = this._httpClient.post(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries',\n      payload,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getTableInfo(connection: ISQLEConnection, databaseName: string, tableName: string): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n\n    const request: Observable<object> = this._httpClient.get(\n      `/api/query/systems/${connection.system.nickname}/databases/${databaseName}/tables/${tableName}`,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getViewInfo(connection: ISQLEConnection, databaseName: string, viewName: string): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n\n    const request: Observable<object> = this._httpClient.get(\n      `/api/query/systems/${connection.system.nickname}/databases/${databaseName}/views/${viewName}`,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getQuery(connection: ISQLEConnection, requestId: string): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._httpClient.get(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries/' + requestId,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: any) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getQueries(connection: ISQLEConnection, sessionId: string): Observable<IQueryResultSet> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._httpClient.get(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries?session=' + sessionId,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getQueryResult(connection: ISQLEConnection, queryId: string): Observable<IQueryResultSet> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._httpClient.get(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries/' + queryId + '/results',\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  deleteQuery(connection: ISQLEConnection, queryId: string): Observable<IQueryResultSet> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._httpClient.delete(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries/' + queryId,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  createSession(connection: ISQLEConnection): Observable<any> {\n    const payload: any = {\n      autoCommit: 'true',\n      transactionMode: 'TERA',\n      charSet: 'UTF8',\n    };\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n      payload.logMech = connection.system.system_attributes.attributes.log_mech || 'DEFAULT';\n    } else {\n      payload.logMech = 'JWT';\n    }\n    const request: Observable<object> = this._httpClient.post(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/sessions',\n      payload,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: any) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  deleteSession(connection: ISQLEConnection, sessionId: string): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._httpClient.delete(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/sessions/' + sessionId,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: any) => {\n        return resultSet;\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_QUERY_PROVIDER_FACTORY(\n  parent: VantageQueryService,\n  httpClient: HttpClient,\n): VantageQueryService {\n  return parent || new VantageQueryService(httpClient);\n}\n\nexport const VANTAGE_QUERY_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageQueryService,\n  deps: [[new Optional(), new SkipSelf(), VantageQueryService], HttpClient],\n  useFactory: VANTAGE_QUERY_PROVIDER_FACTORY,\n};\n","import { Injectable, SkipSelf, Optional, Provider } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nimport { VantageQueryService, IQueryResultSet, ISQLEConnection } from './query.service';\n\nexport const sysDatabases: string[] = [\n  'DBC',\n  'dbcmngr',\n  'SQLJ',\n  'SystemFe',\n  'SysAdmin',\n  'SYSBAR',\n  'SYSJDBC',\n  'SYSLIB',\n  'SYSUDTLIB',\n  'TDMaps',\n  'TD_SERVER_DB',\n  'TD_SYSFNLIB',\n  'TD_SYSXML',\n  'Sys_Calendar',\n];\n\nexport interface IDictionarySystem {\n  hostname?: string;\n  password?: string;\n  port?: number;\n  system_id?: string;\n  last_run?: string;\n  interval_minutes?: number;\n  enabled?: boolean;\n  last_attempt?: string;\n  in_collection?: boolean;\n  username?: string;\n}\n\nexport interface IDictionaryDatabase {\n  parent_name?: string;\n  size_bytes?: number;\n  system_id?: string;\n  name?: string;\n  id?: string;\n  type?: string;\n}\n\nexport interface IDictionaryDatabaseObject {\n  system_id?: string;\n  database_id?: string;\n  id?: string;\n  name?: string;\n  size_bytes?: number;\n  type?: string;\n  create_text?: string;\n}\n\nexport interface IDictionaryTableColumn {\n  system_id?: string;\n  database_id?: string;\n  table_id?: string;\n  id?: string;\n  name?: string;\n}\n\n/**\n * FunctionType\n * A - Aggregate\n * B - Aggregate and statistical\n * C - Contract function\n * D - External stored procedure\n * F - Scalar\n * H - User defined method\n * I - Internal type method\n * L - Table operator\n * R - Table Function\n * S - Statistical\n */\n\n/**\n * TableKind for dbc.tablesvx;\n * A - Aggregate function\n * B - Combined aggregate and ordered analytical function\n * C - Table operator parser contract function\n * D - JAR\n * E - External Stored Procedure\n * F - Standard Function\n * G - Trigger\n * H - Instance or contructor method\n * I - Join Index\n * J - Journal\n * K - Foreign Server Object\n * L - User defined table operator\n * M - Macro\n * N - Hash index\n * O - Table with no primary index and no partitioning\n * P - Stored Procedure\n * Q - Queue table\n * R - Table function\n * S - Ordered Analytical function\n * T - table with a primary index or primary AMP index, partitioning or both. Or a partioned table with NoPI;\n * U - User defined type\n * V - View\n * X - Authorization\n * Y - GLOP set\n * Z - UIF - User Installed File\n * 1 - A DATASET schema object created by CREATE SCHEMA\n * 2 - Functon alias object\n */\n\n/**\n * dbc.externalSPs\n * dbc.sessionInfovx\n */\n\n@Injectable()\nexport class VantageDictionaryService {\n  constructor(private _queryService: VantageQueryService) {}\n\n  getViewHelp(connection: ISQLEConnection, database: string, view: string): Observable<any> {\n    const queryStr: string = `\n      LOCK ROW FOR ACCESS\n      SELECT CAST(COUNT(*) AS BIGINT) as cnt\n      FROM ${database}.${view};\n      SHOW VIEW ${database}.${view};\n    `;\n\n    return this._queryService.getViewInfo(connection, database, view).pipe(\n      map((resultSet: any) => {\n        return resultSet.columns.map((column: any) => {\n          return {\n            comment: column.remarks,\n            type: 'column',\n            columnType: column.type,\n            name: column.name,\n            database: resultSet.database,\n            table: resultSet.name,\n          };\n        });\n      }),\n      switchMap((viewInfo: any) => {\n        return this._queryService\n          .querySystem(connection, {\n            query: queryStr,\n          })\n          .pipe(\n            map((resultSet: IQueryResultSet) => {\n              let ddlStatement: string = '';\n              resultSet.results[1].data.forEach((row: any) => {\n                ddlStatement += row['Request Text'];\n              });\n              let count: string;\n              resultSet.results[0].data.forEach((row: any) => {\n                count = row.cnt;\n              });\n\n              const columns: any[] = viewInfo.map((row: any) => {\n                return {\n                  columnName: row.name,\n                  type: row.columnType,\n                };\n              });\n\n              return {\n                database,\n                view,\n                columns,\n                count,\n                ddlStatement,\n              };\n            }),\n          );\n      }),\n    );\n  }\n\n  getTableHelp(connection: ISQLEConnection, database: string, table: string): Observable<any> {\n    const queryStr: string = `\n      LOCK ROW FOR ACCESS\n      SELECT CAST(COUNT(*) AS BIGINT) as cnt\n      FROM ${database}.${table};\n      SHOW TABLE ${database}.${table};\n    `;\n    return this._queryService.getTableInfo(connection, database, table).pipe(\n      map((resultSet: any) => {\n        return resultSet.columns.map((column: any) => {\n          return {\n            comment: column.remarks,\n            type: 'column',\n            columnType: column.type,\n            name: column.name,\n            database: resultSet.database,\n            table: resultSet.name,\n          };\n        });\n      }),\n      switchMap((info: any) => {\n        return this._queryService\n          .querySystem(connection, {\n            query: queryStr,\n          })\n          .pipe(\n            map((resultSet: IQueryResultSet) => {\n              let ddlStatement: string = '';\n              resultSet.results[1].data.forEach((row: any) => {\n                ddlStatement += row['Request Text'];\n              });\n              let count: string;\n              resultSet.results[0].data.forEach((row: any) => {\n                count = row.cnt;\n              });\n              const columns: any[] = info.map((row: any) => {\n                return {\n                  columnName: row.name,\n                  type: row.columnType,\n                };\n              });\n              return {\n                database,\n                table,\n                columns,\n                count,\n                ddlStatement,\n              };\n            }),\n          );\n      }),\n    );\n  }\n\n  getDatabaseFunction(connection: ISQLEConnection, funcName: string): Observable<any> {\n    const queryStr: string = `\n      HELP 'SQL ${funcName}';\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          const stringArray: string[] = resultSet.results[0].data.map((row: any) => {\n            return row['On-Line Help'];\n          });\n          return stringArray.join(' ');\n        }),\n      );\n  }\n\n  getDatabaseFunctions(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      HELP 'SQL';\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          const stringArray: string[] = resultSet.results[0].data.map((row: any) => {\n            return row['On-Line Help'];\n          });\n          let sqlHelp: string = stringArray.join(' ');\n          const index: number = sqlHelp.indexOf('FUNCTIONS') + 12;\n          sqlHelp = sqlHelp.substr(index, sqlHelp.length);\n          return sqlHelp\n            .split(' ')\n            .filter((func: string) => {\n              return func;\n            })\n            .map((func: string) => {\n              return {\n                name: func,\n              };\n            });\n        }),\n      );\n  }\n\n  getAnalyticalFunctions(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      HELP FOREIGN SCHEMA \"public\"@coprocessor;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            return {\n              name: row.objectname,\n            };\n          });\n        }),\n      );\n  }\n\n  getAnalyticalFunction(connection: ISQLEConnection, analyticalFunction: string): Observable<any> {\n    const queryStr: string = `\n      HELP FOREIGN FUNCTION \"public\".\"${analyticalFunction}\"@coprocessor;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          let functionName: string = '';\n          let shortDescription: string = '';\n          let longDescription: string = '';\n          let usageSyntax: string = '';\n          let inputColumns: string = '';\n          let outputColumns: string = '';\n          const functionOwner: string = '';\n          const creationTime: string = '';\n          const functionVersion: string = '';\n          const interfacesImplemented: string = '';\n          const stringArray: string[] = resultSet.results[0].data.map((row: any) => {\n            return row['Function Help'];\n          });\n          for (let index: number = 0; index < stringArray.length; index++) {\n            const value: string = stringArray[index];\n            if (value.indexOf('Function Name:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                functionName += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Short Description:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                shortDescription += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Long Description:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                longDescription += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Usage Syntax:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                usageSyntax += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Input Columns:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                inputColumns += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Output Columns:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                outputColumns += stringArray[index] + '\\n';\n              }\n            } else {\n              // Function Owner:\n              // Creation Time:\n              // Function Version:\n              // Interfaces Implemented:\n              if (stringArray.indexOf('') > -1) {\n                index = stringArray.indexOf('');\n                stringArray[index] = undefined;\n              }\n            }\n          }\n          return {\n            functionName,\n            shortDescription,\n            longDescription,\n            usageSyntax,\n            inputColumns,\n            outputColumns,\n          };\n        }),\n      );\n  }\n\n  resultSetPredicate(resultSet: IQueryResultSet): any {\n    return resultSet.results[0].data.map((row: any) => {\n      return {\n        name: row.TableName,\n        requestText: row.RequestText,\n        comment: row.CommentString,\n        kind: row.TableKind,\n      };\n    });\n  }\n\n  getStoredProcedures(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT DataBaseName, TableName, TableKind, RequestText, CommentString FROM dbc.tablesvx\n      WHERE TableKind = 'P'\n      ORDER BY TableName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.resultSetPredicate));\n  }\n\n  getExternalStoredProcedures(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT DataBaseName, TableName, TableKind, RequestText, CommentString FROM dbc.tablesvx\n      WHERE TableKind = 'E'\n      ORDER BY TableName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.resultSetPredicate));\n  }\n\n  getMacros(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT DataBaseName, TableName, TableKind, RequestText, CommentString FROM dbc.tablesvx\n      WHERE TableKind = 'M'\n      ORDER BY TableName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.resultSetPredicate));\n  }\n\n  functionsvxPredicate(resultSet: IQueryResultSet): any {\n    return resultSet.results[0].data.map((row: any) => {\n      return {\n        database: row.DatabaseName,\n        name: row.SpecificName,\n        paramNumber: row.NumParameters,\n        paramDataTypes: row.ParameterDataTypes,\n        requestText: row.RequestText,\n        commentString: row.CommentString,\n        kind: row.TableKind,\n      };\n    });\n  }\n\n  getTableOperators(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT func.DatabaseName, func.FunctionName, func.SpecificName, func.NumParameters,\n      func.ParameterDataTypes, tbl.RequestText, tbl.CommentString, tbl.TableKind\n      FROM dbc.functionsvx as func\n      INNER JOIN dbc.tablesvx as tbl\n      ON tbl.TableName = func.SpecificName\n      AND tbl.DataBaseName = func.DatabaseName\n      WHERE FunctionType = 'L'\n      ORDER BY func.FunctionName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.functionsvxPredicate));\n  }\n\n  getTableFunctions(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT func.DatabaseName, func.FunctionName, func.SpecificName, func.NumParameters,\n      func.ParameterDataTypes, tbl.RequestText, tbl.CommentString, tbl.TableKind\n      FROM dbc.functionsvx as func\n      INNER JOIN dbc.tablesvx as tbl\n      ON tbl.TableName = func.SpecificName\n      AND tbl.DataBaseName = func.DatabaseName\n      WHERE FunctionType = 'R'\n      ORDER BY func.FunctionName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.functionsvxPredicate));\n  }\n\n  getForeignServers(connection: ISQLEConnection): Observable<any[]> {\n    const queryStr: string = `\n      SELECT TableName, TableKind FROM DBC.TABLESVX\n      WHERE DATABASENAME = 'TD_SERVER_DB' AND\n      TABLEKIND = 'K' AND\n      TableName <> 'coprocesor';\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            return {\n              name: row.TableName,\n              kind: row.TableKind,\n            };\n          });\n        }),\n      );\n  }\n\n  getForeignSchemas(connection: ISQLEConnection, foreignServer: string): Observable<any[]> {\n    const queryStr: string = `\n      HELP FOREIGN SERVER ${foreignServer};\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: { Schema: string }) => {\n            return {\n              name: row.Schema,\n              kind: 'NONE',\n            };\n          });\n        }),\n      );\n  }\n\n  getForeignTables(connection: ISQLEConnection, foreignServer: string, schema: string): Observable<any[]> {\n    const queryStr: string = `\n      HELP FOREIGN DATABASE \"${schema}\"@${foreignServer};\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: { Table: string }) => {\n            return {\n              name: row.Table,\n              kind: 'NONE',\n            };\n          });\n        }),\n      );\n  }\n\n  getForeignColumns(\n    connection: ISQLEConnection,\n    foreignServer: string,\n    schema: string,\n    table: string,\n  ): Observable<any[]> {\n    const queryStr: string = `\n      HELP FOREIGN TABLE \"${schema}\".\"${table}\"@${foreignServer};\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: { Column: string; Type: string }) => {\n            return {\n              name: row.Column,\n              type: row.Type,\n            };\n          });\n        }),\n      );\n  }\n\n  getDatabases(connection: ISQLEConnection): Observable<any[]> {\n    const queryStr: string =\n      'SELECT databasename, PermSpace, SpoolSpace, TempSpace, CommentString, DBKind FROM dbc.databasesVX ORDER BY databasename;';\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            return {\n              name: row.DatabaseName || row.schemaname,\n              type: row.DBKind === 'U' ? 'user' : 'database',\n              permSpace: row.PermSpace,\n              spoolSpace: row.SpoolSpace,\n              tempSpace: row.TempSpace,\n              comment: row.CommentString,\n            };\n          });\n        }),\n      );\n  }\n\n  getDatabaseObjects(connection: ISQLEConnection, databaseId: string): Observable<any[]> {\n    const queryStr: string = `SELECT DataBaseName, TableName, TableKind, CommentString FROM dbc.tablesvx\n       WHERE TableKind in ('T', 'O', 'V') AND DataBaseName = '${databaseId}' ORDER BY TableName ASC;`;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            const type: string = row.TableKind || row.tablekind;\n            return {\n              kind: row.TableKind || row.tablekind,\n              type: type === 'V' ? 'view' : 'table',\n              name: row.TableName || row.tablename,\n              database: row.DataBaseName || row.databasename,\n              comment: row.CommentString,\n            };\n          });\n        }),\n      );\n  }\n\n  getTableColumns(type: string, connection: ISQLEConnection, databaseId: string, tableId: string): Observable<any> {\n    if (type === 'table') {\n      return this._queryService.getTableInfo(connection, databaseId, tableId).pipe(\n        map((resultSet: any) => {\n          return resultSet.columns.map((column: any) => {\n            return {\n              comment: column.remarks,\n              type: 'column',\n              columnType: column.type,\n              name: column.name,\n              database: resultSet.database,\n              table: resultSet.name,\n            };\n          });\n        }),\n      );\n    } else if (type === 'view') {\n      return this._queryService.getViewInfo(connection, databaseId, tableId).pipe(\n        map((resultSet: any) => {\n          return resultSet.columns.map((column: any) => {\n            return {\n              comment: column.remarks,\n              type: 'column',\n              columnType: column.type,\n              name: column.name,\n              database: resultSet.database,\n              table: resultSet.name,\n            };\n          });\n        }),\n      );\n    }\n  }\n\n  search(\n    connection: ISQLEConnection,\n    searchStr: string,\n    options: {\n      databases: boolean;\n      objects: boolean;\n      columns: boolean;\n    } = {\n      databases: true,\n      objects: true,\n      columns: true,\n    },\n  ): Observable<any[]> {\n    const queries: string[] = [];\n    if (options.databases) {\n      const dbQuery: string = `\n        SELECT\n            DatabaseName as objectName,\n            'database' as objectType,\n            DBKind as kind,\n            CommentString\n        FROM dbc.databasesvx\n        WHERE DatabaseName LIKE '%${searchStr}%'\n        AND DataBaseName NOT IN ('${sysDatabases.join(\"', '\")}')\n      `;\n      queries.push(dbQuery);\n    }\n    if (options.objects) {\n      const objectQuery: string = `\n        SELECT\n            DataBaseName || '~|~' || TableName as objectName,\n            'object' as objectType,\n            TableKind as kind,\n            CommentString\n        FROM dbc.tablesvx\n        WHERE TableKind in ('T', 'O', 'V')\n        AND TableName LIKE '%${searchStr}%'\n        AND DataBaseName NOT IN ('${sysDatabases.join(\"', '\")}')\n      `;\n      queries.push(objectQuery);\n    }\n    if (options.objects) {\n      const columnQuery: string = `\n        SELECT\n            DataBaseName || '~|~' || TableName || '~|~' || ColumnName as objectName,\n            'column' as objectType,\n            ColumnType as kind,\n            CommentString\n        FROM dbc.columnsVX\n        WHERE columnname LIKE '%${searchStr}%'\n        AND DataBaseName NOT IN ('${sysDatabases.join(\"', '\")}')\n      `;\n      queries.push(columnQuery);\n    }\n    const unionJoin: string = queries.join('UNION');\n    const queryStr: string = `\n      WITH quick_search AS (\n          ${unionJoin}\n      )\n      SELECT * FROM quick_search\n      ORDER BY 1\n      SAMPLE 100;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            let kind: string = row.kind;\n            // map to proper type/kind\n            if (row.objectType === 'column') {\n              kind = 'column';\n            } else if (row.objectType === 'database') {\n              kind = kind === 'D' ? 'database' : 'user';\n            } else {\n              kind = kind === 'V' ? 'view' : 'table';\n            }\n            const newParent: string[] = [];\n            // split name and parents..\n            const nameSplit: string[] = row.objectName.split('~|~');\n            for (let index: number = 0; index < nameSplit.length - 1; index++) {\n              newParent.push('\"' + nameSplit[index] + '\"');\n            }\n            return {\n              parent: newParent.join('.'),\n              name: nameSplit[nameSplit.length - 1],\n              kind,\n              type: row.objectType,\n              comment: row.CommentString,\n            };\n          });\n        }),\n      );\n  }\n}\n\nexport function VANTAGE_DICTIONARY_PROVIDER_FACTORY(\n  parent: VantageDictionaryService,\n  queryService: VantageQueryService,\n): VantageDictionaryService {\n  return parent || new VantageDictionaryService(queryService);\n}\n\nexport const VANTAGE_DICTIONARY_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageDictionaryService,\n  deps: [[new Optional(), new SkipSelf(), VantageDictionaryService], VantageQueryService],\n  useFactory: VANTAGE_DICTIONARY_PROVIDER_FACTORY,\n};\n","import { Injectable, Optional, SkipSelf, Provider } from '@angular/core';\nimport { retry, timeout } from 'rxjs/operators';\nimport { ISQLEConnection, VantageQueryService } from './query.service';\n\nconst CONNECTION_SESSION_KEY: string = 'vantage.editor.connection';\n\n@Injectable()\nexport class VantageConnectionService {\n  constructor(private _queryService: VantageQueryService) {}\n\n  public get current(): ISQLEConnection {\n    return JSON.parse(sessionStorage.getItem(CONNECTION_SESSION_KEY));\n  }\n\n  public disconnect(): void {\n    sessionStorage.removeItem(CONNECTION_SESSION_KEY);\n  }\n\n  public async connect(connection: ISQLEConnection): Promise<void> {\n    // clear connection before starting a new one\n    this.disconnect();\n    // test connection with SELECT 1\n    await this._queryService\n      .querySystem(connection, { query: 'SELECT 1;' })\n      .pipe(timeout(7000), retry(1))\n      .toPromise();\n    // if successful, save\n    this.store(connection);\n  }\n\n  private store({ system, creds }: ISQLEConnection): void {\n    sessionStorage.setItem(CONNECTION_SESSION_KEY, JSON.stringify({ system, creds }));\n  }\n}\n\nexport function VANTAGE_CONNECTION_PROVIDER_FACTORY(\n  parent: VantageConnectionService,\n  queryService: VantageQueryService,\n): VantageConnectionService {\n  return parent || new VantageConnectionService(queryService);\n}\n\nexport const VANTAGE_CONNECTION_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageConnectionService,\n  deps: [[new Optional(), new SkipSelf(), VantageConnectionService], VantageQueryService],\n  useFactory: VANTAGE_CONNECTION_PROVIDER_FACTORY,\n};\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VANTAGE_CONNECTION_PROVIDER } from './connection.service';\nimport { VANTAGE_DICTIONARY_PROVIDER } from './dictionary.service';\nimport { VANTAGE_QUERY_PROVIDER } from './query.service';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [VANTAGE_CONNECTION_PROVIDER, VANTAGE_DICTIONARY_PROVIDER, VANTAGE_QUERY_PROVIDER],\n})\nexport class VantageSQLEModule {}\n","import { Injectable, Provider, SkipSelf, Optional } from '@angular/core';\n\nimport { MatDialogRef } from '@angular/material/dialog';\n\nimport { TdDialogService, IAlertConfig, TdAlertDialogComponent } from '@covalent/core/dialogs';\n\nimport { TranslateService } from '@ngx-translate/core';\n\nexport class VantageError {\n  message: string;\n  error: number;\n}\n\n@Injectable()\nexport class VantageErrorService {\n  constructor(private _dialogService: TdDialogService, private _translate: TranslateService) {}\n\n  open(error: VantageError): MatDialogRef<TdAlertDialogComponent> {\n    if (error) {\n      const config: IAlertConfig = {\n        title: this._translate.instant('THERE_WAS_A_PROBLEM'),\n        message: error.message,\n        disableClose: true,\n        closeButton: this._translate.instant('CLOSE'),\n      };\n      if (error.error) {\n        config.message += ` (${error.error.toString()})`;\n      }\n      if (config.message || config.title) {\n        return this._dialogService.openAlert(config);\n      }\n    }\n  }\n}\n\nexport function VANTAGE_ERROR_PROVIDER_FACTORY(\n  parent: VantageErrorService,\n  dialogService: TdDialogService,\n  translate: TranslateService,\n): VantageErrorService {\n  return parent || new VantageErrorService(dialogService, translate);\n}\n\nexport const VANTAGE_ERROR_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageErrorService,\n  deps: [[new Optional(), new SkipSelf(), VantageErrorService], TdDialogService, TranslateService],\n  useFactory: VANTAGE_ERROR_PROVIDER_FACTORY,\n};\n","import { Injectable, Provider, Optional, SkipSelf } from '@angular/core';\n\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\nimport { TdMediaService } from '@covalent/core/media';\n\n@Injectable()\nexport class VantageToastService {\n  constructor(private _snackBarService: MatSnackBar, private _media: TdMediaService) {}\n\n  open(message: string, time: number = 3000): void {\n    if (message) {\n      this._snackBarService.open(message, undefined, {\n        duration: time,\n        horizontalPosition: this._media && this._media.query('gt-sm') ? 'end' : 'center',\n      });\n    }\n  }\n}\n\nexport function VANTAGE_TOAST_PROVIDER_FACTORY(\n  parent: VantageToastService,\n  snackBar: MatSnackBar,\n  media: TdMediaService,\n): VantageToastService {\n  return parent || new VantageToastService(snackBar, media);\n}\n\nexport const VANTAGE_TOAST_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageToastService,\n  deps: [[new Optional(), new SkipSelf(), VantageToastService], MatSnackBar, [new Optional(), TdMediaService]],\n  useFactory: VANTAGE_TOAST_PROVIDER_FACTORY,\n};\n","import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\n\nimport { CovalentDialogsModule } from '@covalent/core/dialogs';\nimport { CovalentMediaModule } from '@covalent/core/media';\n\nimport { VANTAGE_ERROR_PROVIDER } from './error/error.service';\nimport { VANTAGE_TOAST_PROVIDER } from './toast/toast.service';\n\n@NgModule({\n  imports: [CommonModule, MatSnackBarModule, CovalentDialogsModule, CovalentMediaModule],\n  providers: [VANTAGE_ERROR_PROVIDER, VANTAGE_TOAST_PROVIDER],\n})\nexport class VantageUserFeedbackModule {}\n","import { Injectable, Renderer2, Inject, RendererFactory2, Provider, Optional, SkipSelf } from '@angular/core';\nimport { fromEvent, BehaviorSubject, Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n\nconst THEME_LOCAL_STORAGE_KEY: string = 'vantage.theme';\n\nexport enum VantageTheme {\n  DARK = 'dark-theme',\n  LIGHT = 'light-theme',\n}\n\n@Injectable()\nexport class VantageThemeService {\n  private _renderer2: Renderer2;\n\n  private readonly _activeThemeSubject: BehaviorSubject<VantageTheme> = new BehaviorSubject<VantageTheme>(\n    <VantageTheme>localStorage.getItem(THEME_LOCAL_STORAGE_KEY),\n  );\n  readonly activeTheme$: Observable<VantageTheme> = this._activeThemeSubject.asObservable();\n  constructor(private rendererFactory: RendererFactory2, @Inject(DOCUMENT) private _document: any) {\n    this._renderer2 = rendererFactory.createRenderer(undefined, undefined);\n    fromEvent(window, 'storage')\n      .pipe(filter((event: StorageEvent) => event.key === THEME_LOCAL_STORAGE_KEY))\n      .subscribe((event: StorageEvent) => this.applyTheme(<VantageTheme>event.newValue));\n  }\n\n  private get activeTheme(): VantageTheme {\n    return this._activeThemeSubject.getValue();\n  }\n\n  private set activeTheme(theme: VantageTheme) {\n    this._activeThemeSubject.next(theme);\n  }\n\n  public get darkThemeIsActive(): boolean {\n    return this.activeTheme === VantageTheme.DARK;\n  }\n  public get lightThemeIsActive(): boolean {\n    return this.activeTheme === VantageTheme.LIGHT;\n  }\n\n  public applyLightTheme(): void {\n    this.applyTheme(VantageTheme.LIGHT);\n  }\n\n  public applyDarkTheme(): void {\n    this.applyTheme(VantageTheme.DARK);\n  }\n\n  public toggleTheme(): void {\n    this.activeTheme === VantageTheme.DARK ? this.applyLightTheme() : this.applyDarkTheme();\n  }\n\n  private applyTheme(theme: VantageTheme): void {\n    this._renderer2.removeClass(\n      this._document.querySelector('html'),\n      theme === VantageTheme.DARK ? VantageTheme.LIGHT : VantageTheme.DARK,\n    );\n    localStorage.setItem(THEME_LOCAL_STORAGE_KEY, theme);\n    this._renderer2.addClass(this._document.querySelector('html'), theme);\n    this.activeTheme = <VantageTheme>localStorage.getItem(THEME_LOCAL_STORAGE_KEY);\n  }\n}\n\nexport function VANTAGE_THEME_PROVIDER_FACTORY(\n  parent: VantageThemeService,\n  rendererFactory: RendererFactory2,\n  _document: any,\n): VantageThemeService {\n  return parent || new VantageThemeService(rendererFactory, _document);\n}\n\nexport const VANTAGE_THEME_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageThemeService,\n  deps: [[new Optional(), new SkipSelf(), VantageThemeService], [RendererFactory2], [DOCUMENT]],\n  useFactory: VANTAGE_THEME_PROVIDER_FACTORY,\n};\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { VANTAGE_THEME_PROVIDER } from './theme.service';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [VANTAGE_THEME_PROVIDER],\n})\nexport class VantageThemeModule {}\n"],"names":["ISystemAttributes","IAbstractSystem","ISystem"],"mappings":"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"}