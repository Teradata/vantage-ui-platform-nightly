{"version":3,"sources":["ng://@td-vantage/ui-platform/utilities/user-feedback/error/error.service.ts","ng://@td-vantage/ui-platform/utilities/user-feedback/toast/toast.service.ts","ng://@td-vantage/ui-platform/utilities/user-feedback/user-feedback.module.ts","ng://@td-vantage/ui-platform/utilities/theme/theme.service.ts"],"names":["VantageError","VantageErrorService","_dialogService","_translate","this","prototype","open","error","config","title","instant","message","disableClose","closeButton","toString","openAlert","Injectable","TdDialogService","TranslateService","VANTAGE_ERROR_PROVIDER_FACTORY","parent","dialogService","translate","VANTAGE_ERROR_PROVIDER","provide","deps","Optional","SkipSelf","useFactory","VantageToastService","_snackBarService","_media","time","undefined","duration","horizontalPosition","query","MatSnackBar","TdMediaService","VANTAGE_TOAST_PROVIDER_FACTORY","snackBar","media","VANTAGE_TOAST_PROVIDER","VantageUserFeedbackModule","NgModule","args","imports","CommonModule","MatSnackBarModule","CovalentDialogsModule","CovalentMediaModule","providers","THEME_LOCAL_STORAGE_KEY","DARK","LIGHT","VantageThemeService","_document","rendererFactory","_this","_activeThemeSubject","BehaviorSubject","localStorage","getItem","activeTheme$","asObservable","_renderer2","createRenderer","fromEvent","window","pipe","filter","event","key","subscribe","applyTheme","Object","defineProperty","getValue","theme","next","activeTheme","VantageTheme","applyLightTheme","applyDarkTheme","removeClass","querySelector","setItem","addClass","providedIn","Inject","DOCUMENT","RendererFactory2"],"mappings":"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","sourcesContent":["import { Injectable, Provider, SkipSelf, Optional } from '@angular/core';\n\nimport { MatDialogRef } from '@angular/material/dialog';\n\nimport { TdDialogService, IAlertConfig, TdAlertDialogComponent } from '@covalent/core/dialogs';\n\nimport { TranslateService } from '@ngx-translate/core';\n\nexport class VantageError {\n  message: string;\n  error: number;\n}\n\n@Injectable()\nexport class VantageErrorService {\n  constructor(private _dialogService: TdDialogService, private _translate: TranslateService) {}\n\n  open(error: VantageError): MatDialogRef<TdAlertDialogComponent> {\n    if (error) {\n      const config: IAlertConfig = {\n        title: this._translate.instant('THERE_WAS_A_PROBLEM'),\n        message: error.message,\n        disableClose: true,\n        closeButton: this._translate.instant('CLOSE'),\n      };\n      if (error.error) {\n        config.message += ` (${error.error.toString()})`;\n      }\n      if (config.message || config.title) {\n        return this._dialogService.openAlert(config);\n      }\n    }\n  }\n}\n\nexport function VANTAGE_ERROR_PROVIDER_FACTORY(\n  parent: VantageErrorService,\n  dialogService: TdDialogService,\n  translate: TranslateService,\n): VantageErrorService {\n  return parent || new VantageErrorService(dialogService, translate);\n}\n\nexport const VANTAGE_ERROR_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageErrorService,\n  deps: [[new Optional(), new SkipSelf(), VantageErrorService], TdDialogService, TranslateService],\n  useFactory: VANTAGE_ERROR_PROVIDER_FACTORY,\n};\n","import { Injectable, Provider, Optional, SkipSelf } from '@angular/core';\n\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\nimport { TdMediaService } from '@covalent/core/media';\n\n@Injectable()\nexport class VantageToastService {\n  constructor(private _snackBarService: MatSnackBar, private _media: TdMediaService) {}\n\n  open(message: string, time: number = 3000): void {\n    if (message) {\n      this._snackBarService.open(message, undefined, {\n        duration: time,\n        horizontalPosition: this._media && this._media.query('gt-sm') ? 'end' : 'center',\n      });\n    }\n  }\n}\n\nexport function VANTAGE_TOAST_PROVIDER_FACTORY(\n  parent: VantageToastService,\n  snackBar: MatSnackBar,\n  media: TdMediaService,\n): VantageToastService {\n  return parent || new VantageToastService(snackBar, media);\n}\n\nexport const VANTAGE_TOAST_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageToastService,\n  deps: [[new Optional(), new SkipSelf(), VantageToastService], MatSnackBar, [new Optional(), TdMediaService]],\n  useFactory: VANTAGE_TOAST_PROVIDER_FACTORY,\n};\n","import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\n\nimport { CovalentDialogsModule } from '@covalent/core/dialogs';\nimport { CovalentMediaModule } from '@covalent/core/media';\n\nimport { VANTAGE_ERROR_PROVIDER } from './error/error.service';\nimport { VANTAGE_TOAST_PROVIDER } from './toast/toast.service';\n\n@NgModule({\n  imports: [CommonModule, MatSnackBarModule, CovalentDialogsModule, CovalentMediaModule],\n  providers: [VANTAGE_ERROR_PROVIDER, VANTAGE_TOAST_PROVIDER],\n})\nexport class VantageUserFeedbackModule {}\n","import { Injectable, Renderer2, Inject, RendererFactory2 } from '@angular/core';\nimport { fromEvent, BehaviorSubject, Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n\nconst THEME_LOCAL_STORAGE_KEY: string = 'vantage.theme';\n\nexport enum VantageTheme {\n  DARK = 'dark-theme',\n  LIGHT = 'light-theme',\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class VantageThemeService {\n  private _renderer2: Renderer2;\n\n  private readonly _activeThemeSubject: BehaviorSubject<VantageTheme> = new BehaviorSubject<VantageTheme>(\n    <VantageTheme>localStorage.getItem(THEME_LOCAL_STORAGE_KEY),\n  );\n  readonly activeTheme$: Observable<VantageTheme> = this._activeThemeSubject.asObservable();\n\n  constructor(@Inject(DOCUMENT) private _document: any, private rendererFactory: RendererFactory2) {\n    this._renderer2 = rendererFactory.createRenderer(undefined, undefined);\n    fromEvent(window, 'storage')\n      .pipe(filter((event: StorageEvent) => event.key === THEME_LOCAL_STORAGE_KEY))\n      .subscribe((event: StorageEvent) => this.applyTheme(<VantageTheme>event.newValue));\n  }\n\n  private get activeTheme(): VantageTheme {\n    return this._activeThemeSubject.getValue();\n  }\n\n  private set activeTheme(theme: VantageTheme) {\n    this._activeThemeSubject.next(theme);\n  }\n\n  public get darkThemeIsActive(): boolean {\n    return this.activeTheme === VantageTheme.DARK;\n  }\n  public get lightThemeIsActive(): boolean {\n    return this.activeTheme === VantageTheme.LIGHT;\n  }\n\n  public applyLightTheme(): void {\n    this.applyTheme(VantageTheme.LIGHT);\n  }\n  public applyDarkTheme(): void {\n    this.applyTheme(VantageTheme.DARK);\n  }\n\n  private applyTheme(theme: VantageTheme): void {\n    this._renderer2.removeClass(\n      this._document.querySelector('html'),\n      theme === VantageTheme.DARK ? VantageTheme.LIGHT : VantageTheme.DARK,\n    );\n    localStorage.setItem(THEME_LOCAL_STORAGE_KEY, theme);\n    this._renderer2.addClass(this._document.querySelector('html'), theme);\n    this.activeTheme = <VantageTheme>localStorage.getItem(THEME_LOCAL_STORAGE_KEY);\n  }\n}\n"]}