{"version":3,"file":"td-vantage-ui-platform-testing-cypress.umd.js","sources":["ng://@td-vantage/ui-platform/testing/cypress/utility/utility.ts","ng://@td-vantage/ui-platform/testing/cypress/mock/mockutility.ts"],"sourcesContent":["/// <reference types=\"cypress\" />\n\nconst BASE_URL: string = Cypress.config('baseUrl'); // ex: http://localhost:4200\nconst LOGIN_URL: string = Cypress.env('loginUrl'); // ex: https://vantage.url.io/auth\n\nexport interface ILoginCredentials {\n  username: string;\n  password: string;\n}\n\n// inspired by https://vrockai.github.io/blog/2017/10/28/cypress-keycloak-intregration/\nexport function login({ username, password }: ILoginCredentials): void {\n  cy.request({\n    url: LOGIN_URL,\n  }).then((response: any) => {\n    const loginPageHtml: HTMLElement = document.createElement('html');\n    loginPageHtml.innerHTML = response.body;\n    const loginForm: HTMLFormElement = loginPageHtml.querySelector('#kc-form-login');\n    if (loginForm) {\n      cy.request({\n        form: true,\n        method: 'POST',\n        url: loginForm.action,\n        followRedirect: false,\n        body: {\n          username,\n          password,\n        },\n      }).then(() => {\n        _redirectToHome();\n      });\n    } else {\n      _redirectToHome();\n    }\n  });\n}\n\nexport function logout(): void {\n  cy.request('/api/user/logout');\n}\n\nfunction _redirectToHome(): void {\n  cy.visit(BASE_URL);\n  cy.url().should('not.include', LOGIN_URL);\n  cy.url().should('include', BASE_URL);\n}\n\nexport const SSO_COOKIES: string[] = ['USER_SSO_ID', 'XSRF-TOKEN'];\nexport function whiteListSSOCookies(): void {\n  Cypress.Cookies.defaults({ whitelist: SSO_COOKIES });\n}\n\nexport function waitForAngular(): Cypress.Chainable {\n  cy.get('[ng-version]').should('exist');\n  return cy.window().then((win: Window) => {\n    return new Cypress.Promise(\n      (resolve: (thenableOrResult?: {} | PromiseLike<{}>) => void, reject: (error?: any) => void) => {\n        const testabilities: any = win['getAllAngularTestabilities']();\n        if (!testabilities) {\n          return reject(new Error('No testabilities. Is Angular loaded?'));\n        }\n        let count: number = testabilities.length;\n        testabilities.forEach((testability: any) =>\n          testability.whenStable(() => {\n            count--;\n            if (count !== 0) {\n              return;\n            }\n            resolve();\n          }),\n        );\n      },\n    );\n  });\n}\n","/// <reference types=\"cypress\" />\n\ndeclare global {\n  // tslint:disable-next-line\n  namespace Cypress {\n    // tslint:disable-next-line\n    interface Chainable {\n      now(func: string, ...args: any[]): Chainable<Element>;\n    }\n  }\n}\n\nimport { login, logout, ILoginCredentials, waitForAngular } from '../utility/utility';\n\nimport moment from 'moment';\n\nexport enum TestType {\n  'unit' = 'unit',\n  'e2e' = 'e2e',\n}\n\nenum Methods {\n  'GET' = 'GET',\n  'PUT' = 'PUT',\n  'POST' = 'POST',\n  'PATCH' = 'PATCH',\n  'DELETE' = 'DELETE',\n}\n\ninterface IRouteDef {\n  url: string;\n  method: string;\n  status?: number;\n  headers?: any;\n  response?: any;\n  onResponse?: any;\n}\n\ninterface IFixtureRouteDef {\n  alias?: string;\n  status?: number;\n  headers?: any;\n  response?: any;\n  onResponse?: any;\n}\n\nconst allowedHeaders: string[] = ['content-type', 'x-length', 'x-page', 'x-total', 'x-total-pages'];\n\nconst PIPE: string = '|';\nconst SLASH: string = '/';\n\nexport class MockUtility {\n  timestamp: string;\n  recordedURLMethodFixtureMap: Map<string, Map<string, IFixtureRouteDef[]>>;\n  urlMethodFixtureMap: Map<string, IFixtureRouteDef[]>;\n  mocking: boolean = false;\n  recording: boolean = false;\n  testType: TestType;\n  testName: string;\n\n  /**\n   * Method that handles all boilerplate work to set up test.\n   *\n   * @param testName testname used to determine existence of test specific fixtures and\n   * @param testType unit or e2e\n   * @param templates array of templates to be loaded (eg. 'empty' or 'golden')\n   * @param userName user name matching fixture containing credentials\n   * @param record force recording for this test, default is false\n   */\n  setUp(testName: string, testType: TestType, templates: string[], userName: string, record: boolean = false): void {\n    cy.now('log', 'Test: ' + testName + SLASH + testType);\n    this.testName = testName;\n    this.testType = testType;\n\n    // Start server to support routes\n    cy.server();\n\n    // Create timestamp and structures to retain fixture data\n    this.timestamp = moment().format('LTS');\n    this.urlMethodFixtureMap = new Map<string, IFixtureRouteDef[]>();\n    this.recordedURLMethodFixtureMap = new Map<string, Map<string, IFixtureRouteDef[]>>();\n\n    // Conditionally turn on recording\n    if (Cypress.env('record') || record) {\n      this.recording = true;\n\n      cy.now('log', 'Recording...');\n      ['GET', 'POST', 'PUT', 'PATCH', 'DELETE'].forEach((method: string) => {\n        cy.route({\n          url: '**',\n          method,\n          onResponse: (xhr: any) => {\n            this.recordResponse(xhr);\n          },\n        });\n      });\n    }\n\n    // Conditionally turn on mocking\n    if (Cypress.env('mock') || testType === TestType.unit) {\n      cy.now('log', 'Mocking...');\n      this.mocking = true;\n    }\n\n    // Add routes for user logon\n    if (this.mocking && !this.recording) {\n      this.registerRoute(userName);\n    }\n    // Load template and test specific routes\n    templates.forEach((template: string) => {\n      this.registerRoute('templates/' + template);\n      this.registerRoute('templates/' + template + SLASH + userName);\n    });\n    this.registerRoute('testspecific/' + testName);\n\n    // Add new route command that alters its behavior based on mode.\n    // If recording or production, just wait.\n    // If mocking, allow returning mock results.\n    Cypress.Commands.add('route2', (routeDef: IRouteDef) => {\n      if (Cypress.env('mock')) {\n        cy.now('log', 'Setting route to mock');\n        cy.route(routeDef);\n      } else {\n        cy.now('log', ' Setting route to alias');\n        cy.route(routeDef.url);\n      }\n    });\n\n    cy.route({\n      method: 'GET',\n      url: '/api/user/logout',\n      status: 200,\n      response: {},\n    });\n\n    // Handle login based on mode.\n    // Mock, bypass login\n    // Otherwise, log in using credentials from fixture.\n    if (this.mocking && !this.recording) {\n      cy.visit('/');\n    } else {\n      cy.fixture('credentials/' + userName).then((credentials: ILoginCredentials) => {\n        login(credentials);\n      });\n    }\n\n    // Wait for page to load\n    waitForAngular();\n  }\n\n  /**\n   * Discover any mock data fixtures under the specified directory hierarchy\n   * and register associated cy.routes.\n   *\n   * @param filename fixture filename\n   */\n  registerRoute(dir: string): void {\n    // Check to see if the file exists.\n    const mockDataFile: string = dir + '/mockdata.json';\n    cy.exec('if [ -f cypress/fixtures/' + mockDataFile + ' ]; then ls cypress/fixtures/' + mockDataFile + '; fi').then(\n      (results: any) => {\n        if (!results.stdout) {\n          return;\n        }\n        cy.fixture(mockDataFile).then((byURLRoutesMap: Map<string, Map<string, IFixtureRouteDef[]>>) => {\n          // Iterate through file processing URL/method mappings\n          // File is a map with URL as the key. Values are maps\n          // in turn, where each map has method as the key value.\n          // The value of these internal maps is an array of responses.\n          Object.keys(byURLRoutesMap).forEach((url: string) => {\n            const byMethodRoutesMap: Map<string, IFixtureRouteDef[]> = byURLRoutesMap[url];\n            Object.keys(byMethodRoutesMap).forEach((method: string) => {\n              const fixtureRouteDefs: IFixtureRouteDef[] = byMethodRoutesMap[method];\n              const urlMethodKey: string = url + PIPE + method;\n              let firstRouteDef: boolean = false;\n              fixtureRouteDefs.forEach((fixtureRouteDef: IFixtureRouteDef) => {\n                // Known mocks supercede recording\n                if (this.mocking) {\n                  if (this.urlMethodFixtureMap.get(urlMethodKey) === undefined) {\n                    this.urlMethodFixtureMap.set(urlMethodKey, []);\n                    firstRouteDef = true;\n                  }\n                  this.urlMethodFixtureMap.get(urlMethodKey).push(fixtureRouteDef);\n\n                  if (firstRouteDef) {\n                    this.registerMockRoute(url, method, fixtureRouteDef);\n                  }\n                } else if (this.recording) {\n                  // onResponse records XHR response\n                  const routeDef: IRouteDef = {\n                    method,\n                    url,\n                    onResponse: (xhr: any) => {\n                      this.recordResponse(xhr);\n                    },\n                  };\n\n                  cy.now('log', 'Registering recording route:');\n                  cy.now('log', 'url/method: ' + url + SLASH + method);\n                  cy.route(routeDef).as(fixtureRouteDef.alias);\n                } else {\n                  const routeDef: IRouteDef = {\n                    method,\n                    url,\n                  };\n\n                  cy.now('log', 'Registering alias route:');\n                  cy.now('log', 'url/method: ' + url + SLASH + method);\n                  cy.now('log', 'alias: ' + fixtureRouteDef.alias);\n                  cy.route(routeDef).as(fixtureRouteDef.alias);\n                }\n              });\n            });\n          });\n        });\n      },\n    );\n  }\n\n  registerMockRoute(url: string, method: string, fixtureRouteDef: IFixtureRouteDef): void {\n    const routeDef: IRouteDef = {\n      url,\n      method,\n      status: fixtureRouteDef.status,\n      headers: fixtureRouteDef.headers,\n      response: fixtureRouteDef.response,\n      onResponse: (xhr: any) => {\n        const responseURL: URL = new URL(xhr.url);\n        const responseKey: string = responseURL.pathname + PIPE + xhr.method;\n        const fixtureRouteDefs: IFixtureRouteDef[] = this.urlMethodFixtureMap.get(responseKey);\n        // If more routes exist, shift old fixture, and re-assign\n        if (fixtureRouteDefs.length > 1) {\n          fixtureRouteDefs.shift();\n          const updatedFixtureRouteDef: IFixtureRouteDef = fixtureRouteDefs[0];\n          this.registerMockRoute(url, method, updatedFixtureRouteDef);\n        }\n      },\n    };\n\n    cy.now('log', 'Registering mock route:');\n    cy.now('log', 'url/method: ' + url + SLASH + method);\n    cy.now('log', 'alias: ' + fixtureRouteDef.alias);\n    cy.now('log', 'status: ' + fixtureRouteDef.status);\n    cy.now('log', 'headers: ' + JSON.stringify(fixtureRouteDef.headers));\n    cy.now('log', 'response: ' + JSON.stringify(fixtureRouteDef.response));\n    cy.route(routeDef).as(fixtureRouteDef.alias);\n  }\n\n  recordResponse(xhr: any): void {\n    // Manipulate URL value to strip host info\n    const url: string = xhr.url.substring(Cypress.config('baseUrl').length);\n    const method: string = xhr.method;\n\n    // Remove black listed headers\n    const headers: any = {};\n    Object.keys(xhr.response.headers).forEach((key: string) => {\n      if (allowedHeaders.indexOf(key) !== -1) {\n        headers[key] = xhr.response.headers[key];\n      }\n    });\n\n    const fixtureRouteDef: IFixtureRouteDef = {\n      alias: url + PIPE + method,\n      status: xhr.status,\n      headers,\n      response: xhr.response.body,\n    };\n\n    if (!this.recordedURLMethodFixtureMap[url]) {\n      this.recordedURLMethodFixtureMap[url] = {};\n    }\n    const byMethodMap: Map<string, IFixtureRouteDef[]> = this.recordedURLMethodFixtureMap[url];\n    if (!byMethodMap[method]) {\n      byMethodMap[method] = [];\n    }\n    cy.now('log', 'Recording response:');\n    cy.now('log', 'url/method: ' + url + SLASH + method);\n    cy.now('log', 'response: ' + JSON.stringify(fixtureRouteDef));\n    byMethodMap[method].push(fixtureRouteDef);\n  }\n\n  tearDown(): void {\n    if (this.recording) {\n      cy.now(\n        'log',\n        'Writing record fixture: ' + 'cypress/recordings/' + this.testName + SLASH + this.timestamp + '/mockdata.json',\n      );\n      cy.now(\n        'writeFile',\n        'cypress/recordings/' + this.testName + SLASH + this.timestamp + '/mockdata.json',\n        this.recordedURLMethodFixtureMap,\n      );\n    }\n    if (!this.mocking) {\n      logout();\n    }\n  }\n}\n"],"names":[],"mappings":"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"}