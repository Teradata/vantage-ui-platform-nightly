{"version":3,"file":"vantage-ui-platform.js","sources":["ng://@vantage/ui-platform/audit/audit.service.ts","ng://@vantage/ui-platform/audit/audit.module.ts","ng://@vantage/ui-platform/notification/smtp/smtp.service.ts","ng://@vantage/ui-platform/notification/notification.module.ts","ng://@vantage/ui-platform/system/system.service.ts","ng://@vantage/ui-platform/system/system.module.ts","ng://@vantage/ui-platform/user/ldap/ldap.service.ts","ng://@vantage/ui-platform/user/user/user.service.ts","ng://@vantage/ui-platform/user/group/group.service.ts","ng://@vantage/ui-platform/user/user.module.ts","ng://@vantage/ui-platform/utilities/user-feedback/error/error.service.ts","ng://@vantage/ui-platform/utilities/user-feedback/toast/toast.service.ts","ng://@vantage/ui-platform/utilities/user-feedback/user-feedback.module.ts"],"sourcesContent":["import { Optional, SkipSelf, Provider } from '@angular/core';\nimport { HttpParams, HttpHeaders, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nimport {\n  TdHttp,\n  TdGET,\n  TdPOST,\n  TdParam,\n  TdBody,\n  TdResponse,\n  TdQueryParams,\n} from '@covalent/http';\n\nexport interface IAuditLog {\n  action?: string;\n  component?: string;\n  correlation_id?: string;\n  details?: string;\n  id?: number;\n  logtime?: any;\n  message?: string;\n  result?: boolean;\n  username?: string;\n}\n\n@TdHttp({\n  baseUrl: '/api/audit',\n  baseHeaders: new HttpHeaders({ 'Accept': 'application/json' }),\n})\nexport class VantageAuditService {\n\n  @TdGET({\n    path: '/audit/messages',\n    options: {\n      observe: 'response',\n    },\n  })\n  query(@TdQueryParams() params?: HttpParams,\n        @TdResponse() response?: Observable<HttpResponse<any>>): Observable<{total: number, data: IAuditLog[]}> {\n    return response.pipe(\n      map((res: HttpResponse<any>) => {\n        return {\n          total: +res.headers.get('X-Total'),\n          data: <IAuditLog[]>res.body,\n        };\n      }),\n    );\n  }\n\n  @TdPOST({\n    path: '/audit/messages',\n  })\n  create(@TdBody() body: IAuditLog,\n          @TdResponse() response?: Observable<IAuditLog>,\n        ): Observable<IAuditLog> {\n    return response;\n  }\n\n  @TdGET({\n    path: '/audit/messages/:id',\n  })\n  get(@TdParam('id') id: number | string,\n      @TdResponse() response?: Observable<IAuditLog>): Observable<IAuditLog> {\n    return response;\n  }\n\n  @TdGET({\n    path: '/health',\n  })\n  health(@TdResponse() response?: Observable<HttpResponse<any>>): Observable<boolean> {\n    return response.pipe(\n      catchError((error: HttpErrorResponse) => {\n        return of(false);\n      }),\n      map((res: HttpResponse<any>) => {\n        return !!res;\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_AUDIT_PROVIDER_FACTORY(parent: VantageAuditService): VantageAuditService {\n  return parent || new VantageAuditService();\n}\n\nexport const VANTAGE_AUDIT_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageAuditService,\n  deps: [[new Optional(), new SkipSelf(), VantageAuditService]],\n  useFactory: VANTAGE_AUDIT_PROVIDER_FACTORY,\n};\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VANTAGE_AUDIT_PROVIDER } from './audit.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  providers: [\n    VANTAGE_AUDIT_PROVIDER,\n  ],\n})\nexport class VantageAuditModule {\n\n}\n","import { Provider, Optional, SkipSelf } from '@angular/core';\nimport { HttpHeaders, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nimport {\n  TdHttp,\n  TdGET,\n  TdPUT,\n  TdDELETE,\n  TdBody,\n  TdResponse,\n} from '@covalent/http';\n\nexport interface ISMTPConfig {\n  server?: string;\n  port?: number;\n  reply_address?: string;\n  smtp_username?: string;\n  smtp_password?: string;\n  use_ssl?: boolean;\n  anon_logon?: boolean;\n  server_timeout?: number;\n}\n\n@TdHttp({\n  baseUrl: '/api/notification',\n  baseHeaders: new HttpHeaders({ 'Accept': 'application/json' }),\n})\nexport class VantageSMTPService {\n\n  @TdPUT({\n    path: '/smtp-config',\n  })\n  create(@TdBody() body: ISMTPConfig,\n         @TdResponse() response?: Observable<ISMTPConfig>,\n        ): Observable<ISMTPConfig> {\n    return response;\n  }\n\n  @TdGET({\n    path: '/smtp-config',\n  })\n  query(@TdResponse() response?: Observable<ISMTPConfig>): Observable<ISMTPConfig> {\n    return response;\n  }\n  \n  @TdDELETE({\n    path: '/smtp-config',\n  })\n  delete(@TdResponse() response?: Observable<void>): Observable<void> {\n    return response;\n  }\n\n  @TdGET({\n    path: '/health',\n  })\n  health(@TdResponse() response?: Observable<HttpResponse<any>>): Observable<boolean> {\n    return response.pipe(\n      catchError((error: HttpErrorResponse) => {\n        return of(false);\n      }),\n      map((res: HttpResponse<any>) => {\n        return !!res;\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_SMTP_PROVIDER_FACTORY(parent: VantageSMTPService): VantageSMTPService {\n  return parent || new VantageSMTPService();\n}\n\nexport const VANTAGE_SMTP_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageSMTPService,\n  deps: [[new Optional(), new SkipSelf(), VantageSMTPService]],\n  useFactory: VANTAGE_SMTP_PROVIDER_FACTORY,\n};\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VANTAGE_SMTP_PROVIDER } from './smtp/smtp.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  providers: [\n    VANTAGE_SMTP_PROVIDER,\n  ],\n})\nexport class VantageNotificationModule {\n\n}\n","import { Optional, SkipSelf, Provider } from '@angular/core';\nimport { HttpParams, HttpHeaders, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nimport {\n  TdHttp,\n  TdGET,\n  TdPUT,\n  TdPOST,\n  TdDELETE,\n  TdParam,\n  TdBody,\n  TdResponse,\n  TdQueryParams,\n} from '@covalent/http';\n\nexport enum SystemType {\n  Teradata = 'TERADATA',\n  Aster = 'ASTER',\n  Presto = 'PRESTO',\n}\n\nexport const VANTAGE_SYSTEMS_TYPES: SystemType[] = [\n  SystemType.Teradata,\n  SystemType.Aster,\n  SystemType.Presto,\n];\n\nexport interface ISystemAttributes {\n  attributes?: any;\n}\n\nexport interface IAbstractSystem {\n  host?: string;\n  port?: number;\n  system_type?: SystemType;\n  catalog?: string;\n  schema?: string;\n}\n\nexport interface ISystem extends IAbstractSystem {\n  attributes?: string;\n  data_center?: string;\n  environment?: string;\n  id?: string;\n  nickname?: string;\n  platform_id?: number;\n  system_attributes?: ISystemAttributes;\n  version?: string;\n}\n\nexport interface ITestSystem extends IAbstractSystem {\n  account?: string;\n  default_char_set?: string;\n  default_database?: string;\n  log_mech?: string;\n  password?: string;\n  username?: string;\n}\n\n@TdHttp({\n  baseUrl: '/api/system',\n  baseHeaders: new HttpHeaders({ 'Accept': 'application/json' }),\n})\nexport class VantageSystemService {\n\n  @TdGET({\n    path: '/health',\n  })\n  health(@TdResponse() response?: Observable<HttpResponse<any>>): Observable<boolean> {\n    return response.pipe(\n      catchError((error: HttpErrorResponse) => {\n        return of(false);\n      }),\n      map((res: HttpResponse<any>) => {\n        return !!res;\n      }),\n    );\n  }\n\n  @TdGET({\n    path: '/systems',\n    options: {\n      observe: 'response',\n    },\n  })\n  query(@TdQueryParams() params?: HttpParams,\n         @TdResponse() response?: Observable<HttpResponse<any>>): Observable<{total: number, data: ISystem[]}> {\n    return response.pipe(\n      map((res: HttpResponse<any>) => {\n        return {\n          total: +res.headers.get('X-Total'),\n          data: <ISystem[]>res.body,\n        };\n      }),\n    );\n  }\n\n  @TdGET({\n    path: '/systems/:id',\n  })\n  get(@TdParam('id') id: string | number,\n        @TdResponse() response?: Observable<ISystem>): Observable<ISystem> {\n    return response;\n  }\n\n  @TdPOST({\n    path: '/systems',\n  })\n  create(@TdBody() system: ISystem,\n          @TdResponse() response?: Observable<ISystem>): Observable<ISystem> {\n    return response;\n  }\n\n  @TdPUT({\n    path: '/systems/:id',\n  })\n  update(@TdParam('id') id: string,\n          @TdBody() system: ISystem,\n          @TdResponse() response?: Observable<ISystem>): Observable<ISystem> {\n    return response;\n  }\n\n  @TdDELETE({\n    path: '/systems/:id',\n  })\n  delete(@TdParam('id') id: string,\n          @TdResponse() response?: Observable<void>): Observable<void> {\n    return response;\n  }\n\n  @TdPOST({\n    path: '/testsystem',\n  })\n  test(@TdBody() system: ITestSystem,\n        @TdResponse() response?: Observable<HttpResponse<any>>): Observable<boolean> {\n    return response.pipe(\n      map((res: HttpResponse<any>) => {\n        return true;\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_SYSTEM_PROVIDER_FACTORY(parent: VantageSystemService): VantageSystemService {\n  return parent || new VantageSystemService();\n}\n\nexport const VANTAGE_SYSTEM_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageSystemService,\n  deps: [[new Optional(), new SkipSelf(), VantageSystemService]],\n  useFactory: VANTAGE_SYSTEM_PROVIDER_FACTORY,\n};\n","import { NgModule, Type, InjectionToken } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VANTAGE_SYSTEM_PROVIDER } from './system.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  providers: [\n    VANTAGE_SYSTEM_PROVIDER,\n  ],\n})\nexport class VantageSystemModule {\n\n}\n","import { Provider, Optional, SkipSelf } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport {\n  TdHttp,\n  TdGET,\n  TdPUT,\n  TdPOST,\n  TdPATCH,\n  TdDELETE,\n  TdParam,\n  TdBody,\n  TdResponse,\n} from '@covalent/http';\n\nexport enum LDAPEncription {\n  None = 'NONE',\n}\n\nexport interface ILDAPConfig {\n  allowed_groups?: string[];\n  base_dn?: string;\n  config_id?: number;\n  connectionUrl?: string;\n  email_field?: string;\n  encryption?: LDAPEncription;\n  group_id_field?: string;\n  groups_base_dn?: string;\n  id_field?: string;\n  member_field?: string;\n  member_of_field?: string;\n  name_field?: string;\n  port?: number;\n  search_pass?: string;\n  search_user?: string;\n  server?: string;\n  url?: string;\n}\n\n@TdHttp({\n  baseUrl: '/api/user/ldap/config',\n  baseHeaders: new HttpHeaders({ 'Accept': 'application/json' }),\n})\nexport class VantageLDAPService {\n  \n  @TdGET({\n    path: '/',\n  })\n  query(@TdResponse() response?: Observable<ILDAPConfig[]>): Observable<ILDAPConfig[]> {\n    return response;\n  }\n\n  @TdPOST({\n    path: '/',\n  })\n  create(@TdBody() body: ILDAPConfig,\n         @TdResponse() response?: Observable<ILDAPConfig>): Observable<ILDAPConfig> {\n    return response;\n  }\n\n  @TdPATCH({\n    path: '/:id',\n  })\n  update(@TdParam('id') id: string | number,\n          @TdBody() body: ILDAPConfig,\n          @TdResponse() response?: Observable<ILDAPConfig>): Observable<ILDAPConfig> {\n    return response;\n  }\n\n  @TdDELETE({\n    path: '/:id',\n  })\n  delete(@TdParam('id') id: string | number,\n          @TdResponse() response?: Observable<void>): Observable<void> {\n    return response;\n  }\n\n  @TdPOST({\n    path: '/verify',\n    options: {\n      observe: 'response',\n    },\n  })\n  test(@TdBody() body: ILDAPConfig,\n       @TdResponse() response?: Observable<boolean>): Observable<boolean> {\n    return response.pipe(\n      map((res: any) => {\n        return res.status === 200 ? true : false;\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_LDAP_PROVIDER_FACTORY(parent: VantageLDAPService): VantageLDAPService {\n  return parent || new VantageLDAPService();\n}\n\nexport const VANTAGE_LDAP_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageLDAPService,\n  deps: [[new Optional(), new SkipSelf(), VantageLDAPService]],\n  useFactory: VANTAGE_LDAP_PROVIDER_FACTORY,\n};\n","import { Provider, SkipSelf, Optional } from '@angular/core';\nimport { HttpHeaders, HttpResponse, HttpParams } from '@angular/common/http';\nimport {\n  TdHttp,\n  TdGET,\n  TdResponse,\n  TdParam,\n  TdQueryParams,\n} from '@covalent/http';\nimport { Observable, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nexport interface IUser {\n  username?: string;\n  password?: string;\n  email?: string;\n  local?: boolean;\n  admin?: boolean;\n  groups?: string[];\n  display_name?: string;\n  access_token?: string;\n  expires_at?: number;\n}\n\n@TdHttp({\n  baseUrl: '/api/user',\n  baseHeaders: new HttpHeaders({\n    Accept: 'application/json',\n  }),\n})\nexport class VantageUserService {\n\n  /**\n   * get all users\n   */\n  @TdGET({\n    path: '/users',\n    options: {\n      observe: 'response',\n    },\n  })\n  query(\n    @TdQueryParams() queryParams?: HttpParams,\n    @TdResponse() response?: Observable<HttpResponse<any>>,\n  ): Observable<{total: number, data: IUser[]}> {\n    return response.pipe(\n      catchError((error: Response) => {\n        return of(error);\n      }),\n      map((res: HttpResponse<any>) => {\n        return {\n          total: +res.headers.get('X-Total'),\n          data: <IUser[]>res.body,\n        };\n      }),\n    );\n  }\n\n  /**\n   * gets a single users information\n   */\n  @TdGET({\n    path: '/users/:username',\n    options: {\n      observe: 'response',\n    },\n  })\n  get(\n    @TdParam('username') id: string,\n    @TdResponse() response?: Observable<HttpResponse<any>>,\n  ): Observable<IUser> {\n    return response.pipe(\n      catchError((error: Response) => {\n        return of(error);\n      }),\n      map((res: HttpResponse<IUser>) => {\n        return <IUser>res.body;\n      }),\n    );\n  }\n\n}\n\nexport function VANTAGE_USER_PROVIDER_FACTORY(parent: VantageUserService): VantageUserService {\n  return parent || new VantageUserService();\n}\n\nexport const VANTAGE_USER_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageUserService,\n  deps: [[new Optional(), new SkipSelf(), VantageUserService]],\n  useFactory: VANTAGE_USER_PROVIDER_FACTORY,\n};\n","import { Provider, SkipSelf, Optional } from '@angular/core';\nimport { HttpHeaders, HttpResponse, HttpParams } from '@angular/common/http';\nimport {\n  TdHttp,\n  TdGET,\n  TdResponse,\n  TdQueryParams,\n} from '@covalent/http';\nimport { Observable, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nexport interface IGroup {\n  name?: string;\n  description?: string;\n  id?: string;\n  display_name?: string;\n  users?: string[];\n}\n\n@TdHttp({\n  baseUrl: '/api/user',\n  baseHeaders: new HttpHeaders({\n    Accept: 'application/json',\n  }),\n})\nexport class VantageGroupService {\n\n  /**\n   * get groups in paginated form via query string\n   */\n  @TdGET({\n    path: '/groups',\n    options: {\n      observe: 'response',\n    },\n  })\n  query(\n    @TdQueryParams() queryParams?: HttpParams,\n    @TdResponse() response?: Observable<HttpResponse<any>>,\n  ): Observable<{total: number, data: IGroup[]}> {\n    return response.pipe(\n      catchError((error: Response) => {\n        return of(error);\n      }),\n      map((res: HttpResponse<any>) => {\n        return {\n          total: +res.headers.get('X-Total'),\n          data: <IGroup[]>res.body,\n        };\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_GROUP_PROVIDER_FACTORY(parent: VantageGroupService): VantageGroupService {\n  return parent || new VantageGroupService();\n}\n\nexport const VANTAGE_GROUP_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageGroupService,\n  deps: [[new Optional(), new SkipSelf(), VantageGroupService]],\n  useFactory: VANTAGE_GROUP_PROVIDER_FACTORY,\n};\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VANTAGE_LDAP_PROVIDER } from './ldap/ldap.service';\nimport { VANTAGE_USER_PROVIDER } from './user/user.service';\nimport { VANTAGE_GROUP_PROVIDER } from './group/group.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  providers: [\n    VANTAGE_LDAP_PROVIDER,\n    VANTAGE_USER_PROVIDER,\n    VANTAGE_GROUP_PROVIDER,\n  ],\n})\nexport class VantageUserModule {\n\n}\n","import { Injectable, Provider, SkipSelf, Optional } from '@angular/core';\n\nimport { MatDialogRef } from '@angular/material/dialog';\n\nimport { TdDialogService, IAlertConfig, TdAlertDialogComponent } from '@covalent/core/dialogs';\n\nimport { TranslateService } from '@ngx-translate/core';\n\nexport class VantageError {\n  message: string;\n  error: number;\n}\n\n@Injectable()\nexport class VantageErrorService {\n\n  constructor(private _dialogService: TdDialogService,\n              private _translate: TranslateService) {}\n\n  open(error: VantageError): MatDialogRef<TdAlertDialogComponent> {\n    if (error) {\n      let config: IAlertConfig = {\n        title: this._translate.instant('THERE_WAS_A_PROBLEM'),\n        message: error.message,\n        disableClose: true,\n        closeButton: this._translate.instant('CLOSE'),\n      };\n      if (error.error) {\n        config.message += ` (${error.error.toString()})`;\n      }\n      if (config.message || config.title) {\n        return this._dialogService.openAlert(config);\n      }\n    }\n  }\n\n}\n\nexport function VANTAGE_ERROR_PROVIDER_FACTORY(\n  parent: VantageErrorService, dialogService: TdDialogService, translate: TranslateService): VantageErrorService {\n  return parent || new VantageErrorService(dialogService, translate);\n}\n\nexport const VANTAGE_ERROR_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageErrorService,\n  deps: [[new Optional(), new SkipSelf(), VantageErrorService], TdDialogService, TranslateService],\n  useFactory: VANTAGE_ERROR_PROVIDER_FACTORY,\n};\n","import { Injectable, Provider, Optional, SkipSelf } from '@angular/core';\n\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\nimport { TdMediaService } from '@covalent/core/media';\n\n@Injectable()\nexport class VantageToastService {\n\n  constructor(private _snackBarService: MatSnackBar,\n              private _media: TdMediaService) { }\n\n  open(message: string, time: number = 3000): void {\n    if (message) {\n      this._snackBarService.open(message, undefined, {\n        duration: time,\n        horizontalPosition: this._media && this._media.query('gt-sm') ? 'end' : 'center',\n      });\n    }\n  }\n\n}\n\nexport function VANTAGE_TOAST_PROVIDER_FACTORY(\n  parent: VantageToastService, snackBar: MatSnackBar, media: TdMediaService): VantageToastService {\n  return parent || new VantageToastService(snackBar, media);\n}\n\nexport const VANTAGE_TOAST_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageToastService,\n  deps: [[new Optional(), new SkipSelf(), VantageToastService], MatSnackBar, [new Optional(), TdMediaService]],\n  useFactory: VANTAGE_TOAST_PROVIDER_FACTORY,\n};\n","import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\n\nimport { CovalentDialogsModule } from '@covalent/core/dialogs';\nimport { CovalentMediaModule } from '@covalent/core/media';\n\nimport { VANTAGE_ERROR_PROVIDER } from './error/error.service';\nimport { VANTAGE_TOAST_PROVIDER } from './toast/toast.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatSnackBarModule,\n    CovalentDialogsModule,\n    CovalentMediaModule,\n  ],\n  providers: [\n    VANTAGE_ERROR_PROVIDER,\n    VANTAGE_TOAST_PROVIDER,\n  ],\n})\nexport class VantageUserFeedbackModule {\n\n}\n"],"names":["tslib_1.__decorate","tslib_1.__param"],"mappings":"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"}