{"version":3,"file":"vantage-ui-platform-user.js","sources":["ng://@vantage/ui-platform/user/ldap/ldap.service.ts","ng://@vantage/ui-platform/user/user/user.service.ts","ng://@vantage/ui-platform/user/group/group.service.ts","ng://@vantage/ui-platform/user/user.module.ts"],"sourcesContent":["import { Provider, Optional, SkipSelf } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport {\n  TdHttp,\n  TdGET,\n  TdPUT,\n  TdPOST,\n  TdPATCH,\n  TdDELETE,\n  TdParam,\n  TdBody,\n  TdResponse,\n} from '@covalent/http';\n\nexport enum LDAPEncription {\n  None = 'NONE',\n}\n\nexport interface ILDAPConfig {\n  allowed_groups?: string[];\n  base_dn?: string;\n  config_id?: number;\n  connectionUrl?: string;\n  email_field?: string;\n  encryption?: LDAPEncription;\n  group_id_field?: string;\n  groups_base_dn?: string;\n  id_field?: string;\n  member_field?: string;\n  member_of_field?: string;\n  name_field?: string;\n  port?: number;\n  search_pass?: string;\n  search_user?: string;\n  server?: string;\n  url?: string;\n}\n\n@TdHttp({\n  baseUrl: '/api/user/ldap/config',\n  baseHeaders: new HttpHeaders({ 'Accept': 'application/json' }),\n})\nexport class VantageLDAPService {\n  \n  @TdGET({\n    path: '/',\n  })\n  query(@TdResponse() response?: Observable<ILDAPConfig[]>): Observable<ILDAPConfig[]> {\n    return response;\n  }\n\n  @TdPOST({\n    path: '/',\n  })\n  create(@TdBody() body: ILDAPConfig,\n         @TdResponse() response?: Observable<ILDAPConfig>): Observable<ILDAPConfig> {\n    return response;\n  }\n\n  @TdPATCH({\n    path: '/:id',\n  })\n  update(@TdParam('id') id: string | number,\n          @TdBody() body: ILDAPConfig,\n          @TdResponse() response?: Observable<ILDAPConfig>): Observable<ILDAPConfig> {\n    return response;\n  }\n\n  @TdDELETE({\n    path: '/:id',\n  })\n  delete(@TdParam('id') id: string | number,\n          @TdResponse() response?: Observable<void>): Observable<void> {\n    return response;\n  }\n\n  @TdPOST({\n    path: '/verify',\n    options: {\n      observe: 'response',\n    },\n  })\n  test(@TdBody() body: ILDAPConfig,\n       @TdResponse() response?: Observable<boolean>): Observable<boolean> {\n    return response.pipe(\n      map((res: any) => {\n        return res.status === 200 ? true : false;\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_LDAP_PROVIDER_FACTORY(parent: VantageLDAPService): VantageLDAPService {\n  return parent || new VantageLDAPService();\n}\n\nexport const VANTAGE_LDAP_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageLDAPService,\n  deps: [[new Optional(), new SkipSelf(), VantageLDAPService]],\n  useFactory: VANTAGE_LDAP_PROVIDER_FACTORY,\n};\n","import { Provider, SkipSelf, Optional } from '@angular/core';\nimport { HttpHeaders, HttpResponse, HttpParams } from '@angular/common/http';\nimport {\n  TdHttp,\n  TdGET,\n  TdResponse,\n  TdParam,\n  TdQueryParams,\n} from '@covalent/http';\nimport { Observable, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nexport interface IUser {\n  username?: string;\n  password?: string;\n  email?: string;\n  local?: boolean;\n  admin?: boolean;\n  groups?: string[];\n  display_name?: string;\n  access_token?: string;\n  expires_at?: number;\n}\n\n@TdHttp({\n  baseUrl: '/api/user',\n  baseHeaders: new HttpHeaders({\n    Accept: 'application/json',\n  }),\n})\nexport class VantageUserService {\n\n  /**\n   * get all users\n   */\n  @TdGET({\n    path: '/users',\n    options: {\n      observe: 'response',\n    },\n  })\n  query(\n    @TdQueryParams() queryParams?: HttpParams,\n    @TdResponse() response?: Observable<HttpResponse<any>>,\n  ): Observable<{total: number, data: IUser[]}> {\n    return response.pipe(\n      catchError((error: Response) => {\n        return of(error);\n      }),\n      map((res: HttpResponse<any>) => {\n        return {\n          total: +res.headers.get('X-Total'),\n          data: <IUser[]>res.body,\n        };\n      }),\n    );\n  }\n\n  /**\n   * gets a single users information\n   */\n  @TdGET({\n    path: '/users/:username',\n    options: {\n      observe: 'response',\n    },\n  })\n  get(\n    @TdParam('username') id: string,\n    @TdResponse() response?: Observable<HttpResponse<any>>,\n  ): Observable<IUser> {\n    return response.pipe(\n      catchError((error: Response) => {\n        return of(error);\n      }),\n      map((res: HttpResponse<IUser>) => {\n        return <IUser>res.body;\n      }),\n    );\n  }\n\n}\n\nexport function VANTAGE_USER_PROVIDER_FACTORY(parent: VantageUserService): VantageUserService {\n  return parent || new VantageUserService();\n}\n\nexport const VANTAGE_USER_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageUserService,\n  deps: [[new Optional(), new SkipSelf(), VantageUserService]],\n  useFactory: VANTAGE_USER_PROVIDER_FACTORY,\n};\n","import { Provider, SkipSelf, Optional } from '@angular/core';\nimport { HttpHeaders, HttpResponse, HttpParams } from '@angular/common/http';\nimport {\n  TdHttp,\n  TdGET,\n  TdResponse,\n  TdQueryParams,\n} from '@covalent/http';\nimport { Observable, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nexport interface IGroup {\n  name?: string;\n  description?: string;\n  id?: string;\n  display_name?: string;\n  users?: string[];\n}\n\n@TdHttp({\n  baseUrl: '/api/user',\n  baseHeaders: new HttpHeaders({\n    Accept: 'application/json',\n  }),\n})\nexport class VantageGroupService {\n\n  /**\n   * get groups in paginated form via query string\n   */\n  @TdGET({\n    path: '/groups',\n    options: {\n      observe: 'response',\n    },\n  })\n  query(\n    @TdQueryParams() queryParams?: HttpParams,\n    @TdResponse() response?: Observable<HttpResponse<any>>,\n  ): Observable<{total: number, data: IGroup[]}> {\n    return response.pipe(\n      catchError((error: Response) => {\n        return of(error);\n      }),\n      map((res: HttpResponse<any>) => {\n        return {\n          total: +res.headers.get('X-Total'),\n          data: <IGroup[]>res.body,\n        };\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_GROUP_PROVIDER_FACTORY(parent: VantageGroupService): VantageGroupService {\n  return parent || new VantageGroupService();\n}\n\nexport const VANTAGE_GROUP_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageGroupService,\n  deps: [[new Optional(), new SkipSelf(), VantageGroupService]],\n  useFactory: VANTAGE_GROUP_PROVIDER_FACTORY,\n};\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VANTAGE_LDAP_PROVIDER } from './ldap/ldap.service';\nimport { VANTAGE_USER_PROVIDER } from './user/user.service';\nimport { VANTAGE_GROUP_PROVIDER } from './group/group.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  providers: [\n    VANTAGE_LDAP_PROVIDER,\n    VANTAGE_USER_PROVIDER,\n    VANTAGE_GROUP_PROVIDER,\n  ],\n})\nexport class VantageUserModule {\n\n}\n"],"names":["tslib_1.__decorate","tslib_1.__param"],"mappings":"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"}