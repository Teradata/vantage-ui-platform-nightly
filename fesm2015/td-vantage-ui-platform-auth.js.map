{"version":3,"file":"td-vantage-ui-platform-auth.js","sources":["ng://@td-vantage/ui-platform/auth/token/token.service.ts","ng://@td-vantage/ui-platform/auth/session/session.service.ts","ng://@td-vantage/ui-platform/auth/guards/authentication.guard.ts","ng://@td-vantage/ui-platform/auth/auth.module.ts","ng://@td-vantage/ui-platform/auth/interceptors/authentication.interceptor.ts"],"sourcesContent":["import { Injectable, Optional, SkipSelf, Provider } from '@angular/core';\nimport { HttpHeaders, HttpResponse } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { mixinHttp, TdPOST, TdBody, TdResponse } from '@covalent/http';\n\nexport interface IToken {\n  access_token?: string;\n  refresh_token?: string;\n  expires_at?: string;\n  token_type?: string;\n  expires_in?: number;\n  token_in?: string;\n}\n\n@Injectable()\nexport class VantageTokenService extends mixinHttp(class {}, {\n  baseUrl: '/api/user',\n  baseHeaders: new HttpHeaders({ Accept: 'application/json' }),\n}) {\n  @TdPOST({\n    path: '/token',\n    options: {\n      observe: 'response',\n    },\n  })\n  create(\n    @TdBody() user: { username: string; password: string },\n    @TdResponse() response?: Observable<HttpResponse<IToken>>,\n  ): Observable<any> {\n    return response.pipe(\n      map((res: HttpResponse<IToken>) => {\n        const data: IToken = res.body;\n        const token: string = res.headers.get('X-AUTH-TOKEN') || data.access_token;\n        return { data, token };\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_TOKEN_PROVIDER_FACTORY(parent: VantageTokenService): VantageTokenService {\n  return parent || new VantageTokenService();\n}\n\nexport const VANTAGE_TOKEN_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageTokenService,\n  deps: [[new Optional(), new SkipSelf(), VantageTokenService]],\n  useFactory: VANTAGE_TOKEN_PROVIDER_FACTORY,\n};\n","import { map, catchError } from 'rxjs/operators';\nimport { Injectable, Provider, Optional, SkipSelf } from '@angular/core';\nimport { HttpHeaders, HttpResponse } from '@angular/common/http';\nimport { mixinHttp, TdGET, TdResponse, TdPOST, TdParam } from '@covalent/http';\nimport { Observable, of } from 'rxjs';\nimport { IUser } from '@td-vantage/ui-platform/user';\n\nimport { tap, switchMap } from 'rxjs/operators';\n\nexport interface ISessionUser {\n  user?: string;\n  valid?: boolean;\n  admin?: boolean;\n  groups?: string[];\n  expires_at?: string;\n}\n\n@Injectable()\nexport class VantageSessionService extends mixinHttp(class {}, {\n  baseUrl: '/api/user',\n  baseHeaders: new HttpHeaders({\n    Accept: 'application/json',\n  }),\n}) {\n  private _user: IUser;\n\n  get user(): IUser {\n    return this._user;\n  }\n\n  getInfo(): Observable<IUser> {\n    if (!this._user) {\n      return this._get().pipe(\n        switchMap((sessionUser: ISessionUser) => {\n          return this._getUser(sessionUser.user).pipe(\n            tap((u: IUser) => {\n              this._user = Object.assign({}, sessionUser, u);\n            }),\n          );\n        }),\n      );\n    } else {\n      return of(this._user);\n    }\n  }\n\n  public logout(): void {\n    window.location.href = '/api/user/logout?nonce=' + Math.floor(1000000000 + Math.random() * 9000000000);\n  }\n\n  /**\n   * gets the current sso logged in users information\n   */\n  @TdPOST({\n    path: '/token/validity?fields=user,groups',\n    options: {\n      observe: 'response',\n    },\n  })\n  private _get(@TdResponse() response?: Observable<HttpResponse<any>>): Observable<any> {\n    return response.pipe(\n      map((res: HttpResponse<ISessionUser>) => {\n        return res.body;\n      }),\n    );\n  }\n\n  /**\n   * gets a single users information\n   */\n  @TdGET({\n    path: '/users/:username',\n    options: {\n      observe: 'response',\n    },\n  })\n  private _getUser(\n    @TdParam('username') id: string,\n    @TdResponse() response?: Observable<HttpResponse<any>>,\n  ): Observable<IUser> {\n    return response.pipe(\n      catchError((error: Response) => {\n        return of(error);\n      }),\n      map((res: HttpResponse<IUser>) => {\n        return res.body;\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_SESSION_PROVIDER_FACTORY(parent: VantageSessionService): VantageSessionService {\n  return parent || new VantageSessionService();\n}\n\nexport const VANTAGE_SESSION_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageSessionService,\n  deps: [[new Optional(), new SkipSelf(), VantageSessionService]],\n  useFactory: VANTAGE_SESSION_PROVIDER_FACTORY,\n};\n","import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { ActivatedRouteSnapshot, RouterStateSnapshot, CanActivate, Router } from '@angular/router';\nimport { VantageSessionService } from '../session/session.service';\nimport { Observable } from 'rxjs';\nimport { timeout, catchError, map, finalize } from 'rxjs/operators';\nimport { showPreLoader, hidePreLoader } from '@td-vantage/ui-platform/utilities';\n\nconst UNAUTHORIZED: number = 401;\n\n@Injectable()\nexport class VantageAuthenticationGuard implements CanActivate {\n  constructor(private _router: Router, private _sessionService: VantageSessionService) {}\n\n  canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    showPreLoader();\n    return this._sessionService.getInfo().pipe(\n      timeout(5000),\n      catchError((e: HttpErrorResponse) => {\n        // if not logged in, go ahead and log in...otherwise logout\n        // append the current path so we get redirected back upon login\n        e.status === UNAUTHORIZED\n          ? (window.location.href = '/start-login?nonce=' + Math.floor(1000000000 + Math.random() * 9000000000))\n          : this._sessionService.logout();\n        throw e;\n      }),\n      map(() => true),\n      finalize(() => hidePreLoader()),\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VANTAGE_TOKEN_PROVIDER } from './token/token.service';\nimport { VANTAGE_SESSION_PROVIDER } from './session/session.service';\n\nimport { VantageAuthenticationGuard } from './guards/authentication.guard';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [VANTAGE_TOKEN_PROVIDER, VANTAGE_SESSION_PROVIDER, VantageAuthenticationGuard],\n})\nexport class VantageAuthenticationModule {}\n","import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { ITdHttpInterceptor } from '@covalent/http';\n\n/* 4XX errors */\nconst UNAUTHORIZED: number = 401;\nconst PAYLOAD_TOO_LARGE: number = 413;\n\n/* 5XX errors */\nconst SERVICE_UNAVAILABLE: number = 503;\nconst GATEWAY_TIMEOUT: number = 504;\n\n@Injectable()\nexport class VantageAuthenticationInterceptor implements ITdHttpInterceptor {\n  onResponseError(error: any): any {\n    if (error.status === UNAUTHORIZED && !error.url.includes('/token/validity')) {\n      // if logged in, go ahead an expire the cooke and reload the page\n      document.cookie = 'XSRF-TOKEN=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n      window.location.reload();\n    }\n    throw error;\n  }\n\n  handleResponse(observable: Observable<any>): Observable<any> {\n    return observable.pipe(\n      catchError((e: any) => {\n        // check error and do something\n        if (e instanceof HttpErrorResponse) {\n          // do something if its response error\n          return this.onResponseError(e);\n        }\n      }),\n    );\n  }\n}\n"],"names":["UNAUTHORIZED"],"mappings":"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"}