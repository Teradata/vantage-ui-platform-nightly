{"version":3,"file":"vantage-ui-platform-auth.js","sources":["ng://@vantage/ui-platform/auth/token/token.service.ts","ng://@vantage/ui-platform/auth/session/session.service.ts","ng://@vantage/ui-platform/auth/guards/authentication.guard.ts","ng://@vantage/ui-platform/auth/auth.module.ts","ng://@vantage/ui-platform/auth/interceptors/authentication.interceptor.ts"],"sourcesContent":["import { Optional, SkipSelf, Provider } from '@angular/core';\nimport { HttpHeaders, HttpResponse } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport {\n  TdHttp,\n  TdPOST,\n  TdBody,\n  TdResponse,\n} from '@covalent/http';\n\nexport interface IToken {\n  access_token?: string;\n  refresh_token?: string;\n  expires_at?: string;\n  token_type?: string;\n  expires_in?: number;\n  token_in?: string;\n}\n\n@TdHttp({\n  baseUrl: '/api/user',\n  baseHeaders: new HttpHeaders({ 'Accept': 'application/json' }),\n})\nexport class VantageTokenService {\n\n  @TdPOST({\n    path: '/token',\n    options: {\n      observe: 'response',\n    },\n  })\n  create(@TdBody() user: { username: string, password: string },\n         @TdResponse() response?: Observable<HttpResponse<IToken>>): Observable<any> {\n    return response.pipe(\n      map((res: HttpResponse<IToken>) => {\n        let data: IToken = res.body;\n        let token: string = res.headers.get('X-AUTH-TOKEN') || data.access_token;\n        return { data: data, token: token };\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_TOKEN_PROVIDER_FACTORY(parent: VantageTokenService): VantageTokenService {\n  return parent || new VantageTokenService();\n}\n\nexport const VANTAGE_TOKEN_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageTokenService,\n  deps: [[new Optional(), new SkipSelf(), VantageTokenService]],\n  useFactory: VANTAGE_TOKEN_PROVIDER_FACTORY,\n};\n","import { map, catchError } from 'rxjs/operators';\nimport { Provider, Optional, SkipSelf } from '@angular/core';\nimport { HttpHeaders, HttpResponse } from '@angular/common/http';\nimport { TdHttp, TdGET, TdResponse, TdPOST, TdParam } from '@covalent/http';\nimport { Observable, of } from 'rxjs';\n\nimport { tap, switchMap } from 'rxjs/operators';\n\nexport interface IUser {\n  username?: string;\n  password?: string;\n  email?: string;\n  local?: boolean;\n  admin?: boolean;\n  groups?: string[];\n  display_name?: string;\n  access_token?: string;\n  expires_at?: number;\n}\n\nexport interface ISessionUser {\n  user?: string;\n  valid?: boolean;\n  admin?: boolean;\n  groups?: string[];\n  expires_at?: string;\n}\n\n@TdHttp({\n  baseUrl: '/api/user',\n  baseHeaders: new HttpHeaders({\n    Accept: 'application/json',\n  }),\n})\nexport class VantageSessionService {\n\n  private _user: IUser;\n\n  get user(): IUser {\n    return this._user;\n  }\n\n  getInfo(): Observable<IUser> {\n    if (!this._user) {\n      return this._get().pipe(\n        switchMap((sessionUser: ISessionUser) => {\n          return this._getUser(sessionUser.user).pipe(\n            tap((u: IUser) => {\n              this._user = Object.assign({}, sessionUser, u);\n            },\n          ));\n        }),\n      );\n    } else {\n      return of(this._user);\n    }\n  }\n\n  async logout(): Promise<void> {\n    try {\n      return await this._logout().toPromise();\n    } catch (e) {\n      // ignore error\n    } finally {\n      document.cookie = 'XSRF-TOKEN=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n      window.location.reload();\n    }\n  }\n\n  /**\n   * gets the current sso logged in users information\n   */\n  @TdPOST({\n    path: '/token/validity?fields=user,groups',\n    options: {\n      observe: 'response',\n    },\n  })\n  private _get(\n    @TdResponse() response?: Observable<HttpResponse<any>>,\n  ): Observable<any> {\n    return response.pipe(\n      map((res: HttpResponse<ISessionUser>) => {\n        return res.body;\n      }),\n    );\n  }\n\n  @TdGET({\n    path: '/logout?session=true',\n    options: {\n      observe: 'response',\n    },\n  })\n  private _logout(\n    @TdResponse() response?: Observable<HttpResponse<any>>,\n  ): Observable<any> {\n    return response.pipe(\n      map((res: HttpResponse<any>) => {\n        return res;\n      }),\n    );\n  }\n\n  /**\n   * gets a single users information\n   */\n  @TdGET({\n    path: '/users/:username',\n    options: {\n      observe: 'response',\n    },\n  })\n  private _getUser(\n    @TdParam('username') id: string,\n    @TdResponse() response?: Observable<HttpResponse<any>>,\n  ): Observable<IUser> {\n    return response.pipe(\n      catchError((error: Response) => {\n        return of(error);\n      }),\n      map((res: HttpResponse<IUser>) => {\n        return <IUser>res.body;\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_SESSION_PROVIDER_FACTORY(parent: VantageSessionService): VantageSessionService {\n  return parent || new VantageSessionService();\n}\n\nexport const VANTAGE_SESSION_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageSessionService,\n  deps: [[new Optional(), new SkipSelf(), VantageSessionService]],\n  useFactory: VANTAGE_SESSION_PROVIDER_FACTORY,\n};\n","import { Injectable } from '@angular/core';\nimport { ActivatedRouteSnapshot, RouterStateSnapshot, CanActivate } from '@angular/router';\n\nimport { VantageSessionService } from '../session/session.service';\n\n@Injectable()\nexport class VantageAuthenticationGuard implements CanActivate {\n\n  constructor(private _sessionService: VantageSessionService) {}\n\n  getCookiebyName(name: string): string {\n    let pair: string[] = document.cookie.match(new RegExp(name + '=([^;]+)'));\n    return !!pair ? pair[1] : undefined;\n  }\n\n  async canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Promise<boolean> {\n    let xsrfToken: string = this.getCookiebyName('XSRF-TOKEN');\n    if (!xsrfToken) {\n      window.location.href = '/start-login';\n      return false;\n    } else {\n      try {\n        await this._sessionService.getInfo().toPromise();\n      } catch (e) {\n        this._sessionService.logout();\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VANTAGE_TOKEN_PROVIDER } from './token/token.service';\nimport { VANTAGE_SESSION_PROVIDER } from './session/session.service';\n\nimport { VantageAuthenticationGuard } from './guards/authentication.guard';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  providers: [\n    VANTAGE_TOKEN_PROVIDER,\n    VANTAGE_SESSION_PROVIDER,\n    VantageAuthenticationGuard,\n  ],\n})\nexport class VantageAuthenticationModule {\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\n\nimport { ITdHttpInterceptor } from '@covalent/http';\n\n/* 4XX errors */\nconst UNAUTHORIZED: number = 401;\nconst PAYLOAD_TOO_LARGE: number = 413;\n\n/* 5XX errors */\nconst SERVICE_UNAVAILABLE: number = 503;\nconst GATEWAY_TIMEOUT: number = 504;\n\n@Injectable()\nexport class VantageAuthenticationInterceptor implements ITdHttpInterceptor {\n\n  onResponseError(error: any): any {\n    if (error.status === UNAUTHORIZED) {\n      // expire the xsrf cookie and reload page\n      document.cookie = 'XSRF-TOKEN=;expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n      window.location.reload();\n    } \n    return error;\n  }\n\n  handleResponse(observable: Observable<any>): Observable<any> {\n    return observable.pipe(\n      catchError((e: any) => {\n        // check error and do something\n        if (e instanceof HttpErrorResponse) {\n          // do something if its response error\n         return this.onResponseError(e);\n        }\n      }),\n    );\n  }\n}\n"],"names":["tslib_1.__decorate","tslib_1.__param"],"mappings":"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"}