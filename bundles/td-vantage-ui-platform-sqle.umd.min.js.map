{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@td-vantage/ui-platform/sqle/query.service.ts","ng://@td-vantage/ui-platform/sqle/connection.service.ts","ng://@td-vantage/ui-platform/sqle/spooled-query.service.ts","ng://@td-vantage/ui-platform/sqle/dictionary.service.ts","ng://@td-vantage/ui-platform/sqle/credentials-dialog/credentials-dialog.component.ts","ng://@td-vantage/ui-platform/sqle/sqle.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__generator","thisArg","body","f","y","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","v","op","TypeError","done","value","pop","push","e","step","__read","o","m","r","ar","error","VantageQueryService","_http","querySystem","connection","payload","headers","HttpHeaders","append","creds","set","logMech","system","system_attributes","attributes","log_mech","clientId","post","nickname","pipe","catchError","map","resultSet","getTableInfo","databaseName","tableName","get","getViewInfo","viewName","getQuery","requestId","getQueries","sessionId","getQueryResult","queryId","deleteQuery","delete","createSession","autoCommit","transactionMode","charSet","deleteSession","Injectable","TdHttpService","VANTAGE_QUERY_PROVIDER_FACTORY","parent","tdHttpService","VANTAGE_QUERY_PROVIDER","provide","deps","Optional","SkipSelf","useFactory","current","JSON","parse","sessionStorage","getItem","_a","VantageConnectionService","_queryService","defineProperty","disconnect","removeItem","connect","_this","query","tap","store","mapTo","setItem","stringify","VANTAGE_CONNECTION_PROVIDER_FACTORY","queryService","VANTAGE_CONNECTION_PROVIDER","VantageSpooledQueryService","connectionService","translate","queryStatus","BehaviorSubject","undefined","queryStatus$","asObservable","queryStack","cancelLastQuery","thisQuery","deleteSpooledQuery","getRunningInfo","spooledResultSet","res","id","switchMap","exponentialBackOffInterval","toString","queryState","val","skipWhile","_b","SpooledQueryState","take","throwError","detailMessage","message","maxInterval","returnVal","of","expand","iteration","timer","calcInterval","interval","Math","pow","min","subscribe","err","Error","instant","TranslateService","VANTAGE_SPOOLED_QUERY_PROVIDER_FACTORY","VANTAGE_SPOOLED_QUERY_PROVIDER","sysDatabases","VantageDictionaryService","getViewHelp","database","view","queryStr","columns","column","comment","remarks","type","columnType","name","table","viewInfo","count","ddlStatement","results","data","forEach","row","cnt","columnName","getTableHelp","info","getDatabaseFunction","funcName","join","getDatabaseFunctions","sqlHelp","index","indexOf","substr","split","filter","func","getAnalyticalFunctions","objectname","getAnalyticalFunction","analyticalFunction","functionName","shortDescription","longDescription","usageSyntax","inputColumns","outputColumns","stringArray","resultSetPredicate","TableName","requestText","RequestText","CommentString","kind","TableKind","getStoredProcedures","getExternalStoredProcedures","getMacros","functionsvxPredicate","DatabaseName","SpecificName","paramNumber","NumParameters","paramDataTypes","ParameterDataTypes","commentString","getTableOperators","getTableFunctions","getForeignServers","getForeignSchemas","foreignServer","Schema","getForeignTables","schema","Table","getForeignColumns","Column","Type","getDatabases","schemaname","DBKind","permSpace","PermSpace","spoolSpace","SpoolSpace","tempSpace","TempSpace","getDatabaseObjects","databaseId","tablekind","tablename","DataBaseName","databasename","getTableColumns","tableId","search","searchStr","options","databases","objects","queries","dbQuery","objectQuery","columnQuery","objectType","newParent","nameSplit","objectName","VANTAGE_DICTIONARY_PROVIDER_FACTORY","VANTAGE_DICTIONARY_PROVIDER","VantageCredentialsDialogComponent","_dialogRef","_connectionService","_systemService","_loadingService","_translate","_connectionAttempt$","Subject","connectionAttempt$","basicAuthEnabled","connectionType","ngOnInit","queryParams","HttpParams","systems$","retry","errorMsg","resp","systems","ngOnDestroy","complete","compareSystemWith","a","b","_arguments","generator","disableClose","register","btoa","username","password","toPromise","close","error_1","resolve","P","Promise","reject","fulfilled","rejected","result","then","cancel","Component","args","selector","template","MatDialogRef","VantageSystemService","TdLoadingService","VantageSQLEModule","NgModule","declarations","exports","imports","CommonModule","FormsModule","MatCardModule","MatButtonModule","MatDialogModule","MatFormFieldModule","MatInputModule","MatSelectModule","MatRadioModule","MatIconModule","CovalentLoadingModule","CovalentMessageModule","VantageSystemModule","TranslateModule","providers"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Injectable, Provider, Optional, SkipSelf } from '@angular/core';\nimport { HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { ISystem } from '@td-vantage/ui-platform/system';\nimport { TdHttpService } from '@covalent/http';\n\nexport interface IQueryPayload {\n  query: string;\n  session?: string;\n  logMech?: string;\n  rowOffset?: number;\n  rowLimit?: number;\n  format?: string; // (default)-object, array, or csv\n  includeColumns?: boolean;\n  includeColumnsTypes?: boolean;\n  spooledResultSet?: boolean;\n  clientId?: string;\n}\n\nexport interface IQueryResultSet {\n  queueDuration: number;\n  queryDuration: number;\n  results: IQueryResultSetResult[];\n}\n\nexport interface IQueryResultSetResult {\n  data: { [name: string]: string }[];\n  resultSet: boolean;\n  rowCount: number;\n  rowLimitExceeded: boolean;\n  columns?: { [name: string]: string }[];\n}\n\nexport interface IQueryInfo {\n  success?: boolean;\n  logTime?: string;\n  error?: any;\n  resultSet?: IQueryResultSet;\n}\n\nexport interface ISQLEConnection {\n  system: ISystem;\n  creds?: string;\n}\n\n@Injectable()\nexport class VantageQueryService {\n  constructor(private _http: TdHttpService) {}\n\n  querySystem(connection: ISQLEConnection, payload: IQueryPayload): Observable<IQueryResultSet> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n      payload.logMech = connection.system.system_attributes.attributes.log_mech || 'DEFAULT';\n    } else {\n      payload.logMech = 'JWT';\n    }\n    payload.clientId = 'VANTAGE.EDITOR';\n    const request: Observable<object> = this._http.post(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries',\n      payload,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getTableInfo(connection: ISQLEConnection, databaseName: string, tableName: string): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n\n    const request: Observable<object> = this._http.get(\n      `/api/query/systems/${connection.system.nickname}/databases/${databaseName}/tables/${tableName}`,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getViewInfo(connection: ISQLEConnection, databaseName: string, viewName: string): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n\n    const request: Observable<object> = this._http.get(\n      `/api/query/systems/${connection.system.nickname}/databases/${databaseName}/views/${viewName}`,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getQuery(connection: ISQLEConnection, requestId: string): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._http.get(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries/' + requestId,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: any) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getQueries(connection: ISQLEConnection, sessionId: string): Observable<IQueryResultSet> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._http.get(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries?session=' + sessionId,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getQueryResult(connection: ISQLEConnection, queryId: string): Observable<IQueryResultSet> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._http.get(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries/' + queryId + '/results',\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  deleteQuery(connection: ISQLEConnection, queryId: string): Observable<IQueryResultSet> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._http.delete(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries/' + queryId,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  createSession(connection: ISQLEConnection): Observable<any> {\n    const payload: any = {\n      autoCommit: 'true',\n      transactionMode: 'TERA',\n      charSet: 'UTF8',\n    };\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n      payload.logMech = connection.system.system_attributes.attributes.log_mech || 'DEFAULT';\n    } else {\n      payload.logMech = 'JWT';\n    }\n    const request: Observable<object> = this._http.post(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/sessions',\n      payload,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: any) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  deleteSession(connection: ISQLEConnection, sessionId: string): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._http.delete(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/sessions/' + sessionId,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: any) => {\n        return resultSet;\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_QUERY_PROVIDER_FACTORY(\n  parent: VantageQueryService,\n  tdHttpService: TdHttpService,\n): VantageQueryService {\n  return parent || new VantageQueryService(tdHttpService);\n}\n\nexport const VANTAGE_QUERY_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageQueryService,\n  deps: [[new Optional(), new SkipSelf(), VantageQueryService], TdHttpService],\n  useFactory: VANTAGE_QUERY_PROVIDER_FACTORY,\n};\n","import { Injectable, Optional, SkipSelf, Provider } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap, mapTo } from 'rxjs/operators';\nimport { VantageQueryService, ISQLEConnection } from './query.service';\n\nconst CONNECTION_SESSION_KEY: string = 'vantage.editor.connection';\n\nexport function current(): ISQLEConnection {\n  try {\n    return JSON.parse(sessionStorage.getItem(CONNECTION_SESSION_KEY));\n  } catch {\n    return undefined;\n  }\n}\n\n@Injectable()\nexport class VantageConnectionService {\n  constructor(private _queryService: VantageQueryService) {}\n\n  public get current(): ISQLEConnection {\n    return current();\n  }\n\n  public disconnect(): void {\n    sessionStorage.removeItem(CONNECTION_SESSION_KEY);\n  }\n\n  public connect(connection: ISQLEConnection): Observable<ISQLEConnection> {\n    // clear connection before starting a new one\n    this.disconnect();\n    // test connection with SELECT 1\n    return this._queryService.querySystem(connection, { query: 'SELECT 1;' }).pipe(\n      tap(() => this.store(connection)), // if successful, save\n      mapTo(connection),\n    );\n  }\n\n  private store({ system, creds }: ISQLEConnection): void {\n    sessionStorage.setItem(CONNECTION_SESSION_KEY, JSON.stringify({ system, creds }));\n  }\n}\n\nexport function VANTAGE_CONNECTION_PROVIDER_FACTORY(\n  parent: VantageConnectionService,\n  queryService: VantageQueryService,\n): VantageConnectionService {\n  return parent || new VantageConnectionService(queryService);\n}\n\nexport const VANTAGE_CONNECTION_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageConnectionService,\n  deps: [[new Optional(), new SkipSelf(), VantageConnectionService], VantageQueryService],\n  useFactory: VANTAGE_CONNECTION_PROVIDER_FACTORY,\n};\n","import { Injectable, Provider, Optional, SkipSelf } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { TranslateService } from '@ngx-translate/core';\nimport { catchError, expand, map, mapTo, skipWhile, switchMap, take, tap } from 'rxjs/operators';\nimport { BehaviorSubject, Observable, of, throwError, timer } from 'rxjs';\nimport { VantageConnectionService } from './connection.service';\nimport { VantageQueryService, IQueryPayload, IQueryResultSet } from './query.service';\n\ninterface ISpooledQueryError extends HttpErrorResponse {\n  id: string;\n  detailMessage: string;\n}\n\nconst MAX_INTERVAL: number = 10000;\nconst BASE_INTERVAL: number = 2000;\n\nenum SpooledQueryState {\n  QUEUED = 'QUEUED',\n  PENDING = 'PENDING',\n  SUBMITTED = 'SUBMITTED',\n  RESPONDING = 'RESPONDING',\n  SPOOLING = 'SPOOLING',\n  RESULT_SET_READY = 'RESULT_SET_READY',\n}\n\n@Injectable()\nexport class VantageSpooledQueryService {\n  queryStatus: BehaviorSubject<SpooledQueryState> = new BehaviorSubject<SpooledQueryState>(undefined);\n  queryStatus$: Observable<SpooledQueryState> = this.queryStatus.asObservable();\n  queryStack: string[] = [];\n  constructor(\n    private connectionService: VantageConnectionService,\n    private queryService: VantageQueryService,\n    private translate: TranslateService,\n  ) {}\n\n  cancelLastQuery(): void {\n    const thisQuery: string = this.queryStack.pop();\n\n    return this.deleteSpooledQuery(thisQuery);\n  }\n\n  getRunningInfo(): Observable<SpooledQueryState> {\n    return this.queryStatus$;\n  }\n\n  querySystem(payload: IQueryPayload): Observable<IQueryResultSet> {\n    return this.queryService.querySystem(this.connectionService.current, { ...payload, spooledResultSet: true }).pipe(\n      tap((res: any) => this.queryStack.push(res.id)),\n      switchMap((res: any) => this.exponentialBackOffInterval(MAX_INTERVAL, res.id)),\n      switchMap((id: number) =>\n        this.queryService.getQuery(this.connectionService.current, id.toString()).pipe(\n          map((query: any) => query.queryState),\n          tap((val: any) => this.queryStatus.next(val)),\n          map((val: any) => [id, val]),\n        ),\n      ),\n      skipWhile(([id, status]: [string, SpooledQueryState]) => status !== SpooledQueryState.RESULT_SET_READY),\n      take(1),\n      switchMap(([id]: [string, SpooledQueryState]) =>\n        this.queryService.getQueryResult(this.connectionService.current, id).pipe(\n          map((val: IQueryResultSet) => [id, val]),\n          tap(() => this.queryStack.pop()),\n          catchError((res: HttpErrorResponse) => {\n            return throwError({\n              ...res,\n              ...{ id },\n              detailMessage: `Error ${res.error.error}: ${res.error.message}`,\n            } as ISpooledQueryError);\n          }),\n        ),\n      ),\n      map(([id, results]: [string, IQueryResultSet]) => results),\n    );\n  }\n\n  exponentialBackOffInterval(maxInterval: number, returnVal: any): Observable<number> {\n    return of(0).pipe(\n      expand((iteration: number) => timer(this.calcInterval(iteration, maxInterval)).pipe(mapTo(iteration + 1))),\n      mapTo(returnVal),\n    );\n  }\n\n  calcInterval(iteration: number, maxInterval: number): number {\n    const expo: number = 1.4;\n    const interval: number = Math.pow(expo, iteration) * BASE_INTERVAL;\n\n    return Math.min(interval, maxInterval);\n  }\n\n  deleteSpooledQuery(queryId: string): void {\n    this.queryService.deleteQuery(this.connectionService.current, queryId).subscribe(undefined, (err: Error) => {\n      throw new Error(this.translate.instant('SPOOLED_QUERY_COULD_NOT_BE_DELETED', { error: JSON.stringify(err) }));\n    });\n  }\n}\n\nexport function VANTAGE_SPOOLED_QUERY_PROVIDER_FACTORY(\n  parent: VantageSpooledQueryService,\n  connectionService: VantageConnectionService,\n  queryService: VantageQueryService,\n  translate: TranslateService,\n): VantageSpooledQueryService {\n  return parent || new VantageSpooledQueryService(connectionService, queryService, translate);\n}\n\nexport const VANTAGE_SPOOLED_QUERY_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageSpooledQueryService,\n  deps: [\n    [new Optional(), new SkipSelf(), VantageSpooledQueryService],\n    VantageConnectionService,\n    VantageQueryService,\n    TranslateService,\n  ],\n  useFactory: VANTAGE_SPOOLED_QUERY_PROVIDER_FACTORY,\n};\n","import { Injectable, SkipSelf, Optional, Provider } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nimport { VantageQueryService, IQueryResultSet, ISQLEConnection } from './query.service';\n\nexport const sysDatabases: string[] = [\n  'DBC',\n  'dbcmngr',\n  'SQLJ',\n  'SystemFe',\n  'SysAdmin',\n  'SYSBAR',\n  'SYSJDBC',\n  'SYSLIB',\n  'SYSUDTLIB',\n  'TDMaps',\n  'TD_SERVER_DB',\n  'TD_SYSFNLIB',\n  'TD_SYSXML',\n  'Sys_Calendar',\n];\n\nexport interface IDictionarySystem {\n  hostname?: string;\n  password?: string;\n  port?: number;\n  system_id?: string;\n  last_run?: string;\n  interval_minutes?: number;\n  enabled?: boolean;\n  last_attempt?: string;\n  in_collection?: boolean;\n  username?: string;\n}\n\nexport interface IDictionaryDatabase {\n  parent_name?: string;\n  size_bytes?: number;\n  system_id?: string;\n  name?: string;\n  id?: string;\n  type?: string;\n}\n\nexport interface IDictionaryDatabaseObject {\n  system_id?: string;\n  database_id?: string;\n  id?: string;\n  name?: string;\n  size_bytes?: number;\n  type?: string;\n  create_text?: string;\n}\n\nexport interface IDictionaryTableColumn {\n  system_id?: string;\n  database_id?: string;\n  table_id?: string;\n  id?: string;\n  name?: string;\n}\n\n/**\n * FunctionType\n * A - Aggregate\n * B - Aggregate and statistical\n * C - Contract function\n * D - External stored procedure\n * F - Scalar\n * H - User defined method\n * I - Internal type method\n * L - Table operator\n * R - Table Function\n * S - Statistical\n */\n\n/**\n * TableKind for dbc.tablesvx;\n * A - Aggregate function\n * B - Combined aggregate and ordered analytical function\n * C - Table operator parser contract function\n * D - JAR\n * E - External Stored Procedure\n * F - Standard Function\n * G - Trigger\n * H - Instance or contructor method\n * I - Join Index\n * J - Journal\n * K - Foreign Server Object\n * L - User defined table operator\n * M - Macro\n * N - Hash index\n * O - Table with no primary index and no partitioning\n * P - Stored Procedure\n * Q - Queue table\n * R - Table function\n * S - Ordered Analytical function\n * T - table with a primary index or primary AMP index, partitioning or both. Or a partioned table with NoPI;\n * U - User defined type\n * V - View\n * X - Authorization\n * Y - GLOP set\n * Z - UIF - User Installed File\n * 1 - A DATASET schema object created by CREATE SCHEMA\n * 2 - Functon alias object\n */\n\n/**\n * dbc.externalSPs\n * dbc.sessionInfovx\n */\n\n@Injectable()\nexport class VantageDictionaryService {\n  constructor(private _queryService: VantageQueryService) {}\n\n  getViewHelp(connection: ISQLEConnection, database: string, view: string): Observable<any> {\n    const queryStr: string = `\n      LOCK ROW FOR ACCESS\n      SELECT CAST(COUNT(*) AS BIGINT) as cnt\n      FROM ${database}.${view};\n      SHOW VIEW ${database}.${view};\n    `;\n\n    return this._queryService.getViewInfo(connection, database, view).pipe(\n      map((resultSet: any) => {\n        return resultSet.columns.map((column: any) => {\n          return {\n            comment: column.remarks,\n            type: 'column',\n            columnType: column.type,\n            name: column.name,\n            database: resultSet.database,\n            table: resultSet.name,\n          };\n        });\n      }),\n      switchMap((viewInfo: any) => {\n        return this._queryService\n          .querySystem(connection, {\n            query: queryStr,\n          })\n          .pipe(\n            map((resultSet: IQueryResultSet) => {\n              let ddlStatement: string = '';\n              resultSet.results[1].data.forEach((row: any) => {\n                ddlStatement += row['Request Text'];\n              });\n              let count: string;\n              resultSet.results[0].data.forEach((row: any) => {\n                count = row.cnt;\n              });\n\n              const columns: any[] = viewInfo.map((row: any) => {\n                return {\n                  columnName: row.name,\n                  type: row.columnType,\n                };\n              });\n\n              return {\n                database,\n                view,\n                columns,\n                count,\n                ddlStatement,\n              };\n            }),\n          );\n      }),\n    );\n  }\n\n  getTableHelp(connection: ISQLEConnection, database: string, table: string): Observable<any> {\n    const queryStr: string = `\n      LOCK ROW FOR ACCESS\n      SELECT CAST(COUNT(*) AS BIGINT) as cnt\n      FROM ${database}.${table};\n      SHOW TABLE ${database}.${table};\n    `;\n    return this._queryService.getTableInfo(connection, database, table).pipe(\n      map((resultSet: any) => {\n        return resultSet.columns.map((column: any) => {\n          return {\n            comment: column.remarks,\n            type: 'column',\n            columnType: column.type,\n            name: column.name,\n            database: resultSet.database,\n            table: resultSet.name,\n          };\n        });\n      }),\n      switchMap((info: any) => {\n        return this._queryService\n          .querySystem(connection, {\n            query: queryStr,\n          })\n          .pipe(\n            map((resultSet: IQueryResultSet) => {\n              let ddlStatement: string = '';\n              resultSet.results[1].data.forEach((row: any) => {\n                ddlStatement += row['Request Text'];\n              });\n              let count: string;\n              resultSet.results[0].data.forEach((row: any) => {\n                count = row.cnt;\n              });\n              const columns: any[] = info.map((row: any) => {\n                return {\n                  columnName: row.name,\n                  type: row.columnType,\n                };\n              });\n              return {\n                database,\n                table,\n                columns,\n                count,\n                ddlStatement,\n              };\n            }),\n          );\n      }),\n    );\n  }\n\n  getDatabaseFunction(connection: ISQLEConnection, funcName: string): Observable<any> {\n    const queryStr: string = `\n      HELP 'SQL ${funcName}';\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          const stringArray: string[] = resultSet.results[0].data.map((row: any) => {\n            return row['On-Line Help'];\n          });\n          return stringArray.join(' ');\n        }),\n      );\n  }\n\n  getDatabaseFunctions(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      HELP 'SQL';\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          const stringArray: string[] = resultSet.results[0].data.map((row: any) => {\n            return row['On-Line Help'];\n          });\n          let sqlHelp: string = stringArray.join(' ');\n          const index: number = sqlHelp.indexOf('FUNCTIONS') + 12;\n          sqlHelp = sqlHelp.substr(index, sqlHelp.length);\n          return sqlHelp\n            .split(' ')\n            .filter((func: string) => {\n              return func;\n            })\n            .map((func: string) => {\n              return {\n                name: func,\n              };\n            });\n        }),\n      );\n  }\n\n  getAnalyticalFunctions(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      HELP FOREIGN SCHEMA \"public\"@coprocessor;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            return {\n              name: row.objectname,\n            };\n          });\n        }),\n      );\n  }\n\n  getAnalyticalFunction(connection: ISQLEConnection, analyticalFunction: string): Observable<any> {\n    const queryStr: string = `\n      HELP FOREIGN FUNCTION \"public\".\"${analyticalFunction}\"@coprocessor;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          let functionName: string = '';\n          let shortDescription: string = '';\n          let longDescription: string = '';\n          let usageSyntax: string = '';\n          let inputColumns: string = '';\n          let outputColumns: string = '';\n          const functionOwner: string = '';\n          const creationTime: string = '';\n          const functionVersion: string = '';\n          const interfacesImplemented: string = '';\n          const stringArray: string[] = resultSet.results[0].data.map((row: any) => {\n            return row['Function Help'];\n          });\n          for (let index: number = 0; index < stringArray.length; index++) {\n            const value: string = stringArray[index];\n            if (value.indexOf('Function Name:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                functionName += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Short Description:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                shortDescription += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Long Description:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                longDescription += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Usage Syntax:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                usageSyntax += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Input Columns:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                inputColumns += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Output Columns:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                outputColumns += stringArray[index] + '\\n';\n              }\n            } else {\n              // Function Owner:\n              // Creation Time:\n              // Function Version:\n              // Interfaces Implemented:\n              if (stringArray.indexOf('') > -1) {\n                index = stringArray.indexOf('');\n                stringArray[index] = undefined;\n              }\n            }\n          }\n          return {\n            functionName,\n            shortDescription,\n            longDescription,\n            usageSyntax,\n            inputColumns,\n            outputColumns,\n          };\n        }),\n      );\n  }\n\n  resultSetPredicate(resultSet: IQueryResultSet): any {\n    return resultSet.results[0].data.map((row: any) => {\n      return {\n        name: row.TableName,\n        requestText: row.RequestText,\n        comment: row.CommentString,\n        kind: row.TableKind,\n      };\n    });\n  }\n\n  getStoredProcedures(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT DataBaseName, TableName, TableKind, RequestText, CommentString FROM dbc.tablesvx\n      WHERE TableKind = 'P'\n      ORDER BY TableName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.resultSetPredicate));\n  }\n\n  getExternalStoredProcedures(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT DataBaseName, TableName, TableKind, RequestText, CommentString FROM dbc.tablesvx\n      WHERE TableKind = 'E'\n      ORDER BY TableName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.resultSetPredicate));\n  }\n\n  getMacros(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT DataBaseName, TableName, TableKind, RequestText, CommentString FROM dbc.tablesvx\n      WHERE TableKind = 'M'\n      ORDER BY TableName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.resultSetPredicate));\n  }\n\n  functionsvxPredicate(resultSet: IQueryResultSet): any {\n    return resultSet.results[0].data.map((row: any) => {\n      return {\n        database: row.DatabaseName,\n        name: row.SpecificName,\n        paramNumber: row.NumParameters,\n        paramDataTypes: row.ParameterDataTypes,\n        requestText: row.RequestText,\n        commentString: row.CommentString,\n        kind: row.TableKind,\n      };\n    });\n  }\n\n  getTableOperators(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT func.DatabaseName, func.FunctionName, func.SpecificName, func.NumParameters,\n      func.ParameterDataTypes, tbl.RequestText, tbl.CommentString, tbl.TableKind\n      FROM dbc.functionsvx as func\n      INNER JOIN dbc.tablesvx as tbl\n      ON tbl.TableName = func.SpecificName\n      AND tbl.DataBaseName = func.DatabaseName\n      WHERE FunctionType = 'L'\n      ORDER BY func.FunctionName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.functionsvxPredicate));\n  }\n\n  getTableFunctions(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT func.DatabaseName, func.FunctionName, func.SpecificName, func.NumParameters,\n      func.ParameterDataTypes, tbl.RequestText, tbl.CommentString, tbl.TableKind\n      FROM dbc.functionsvx as func\n      INNER JOIN dbc.tablesvx as tbl\n      ON tbl.TableName = func.SpecificName\n      AND tbl.DataBaseName = func.DatabaseName\n      WHERE FunctionType = 'R'\n      ORDER BY func.FunctionName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.functionsvxPredicate));\n  }\n\n  getForeignServers(connection: ISQLEConnection): Observable<any[]> {\n    const queryStr: string = `\n      SELECT TableName, TableKind FROM DBC.TABLESVX\n      WHERE DATABASENAME = 'TD_SERVER_DB' AND\n      TABLEKIND = 'K' AND\n      TableName <> 'coprocesor';\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            return {\n              name: row.TableName,\n              kind: row.TableKind,\n            };\n          });\n        }),\n      );\n  }\n\n  getForeignSchemas(connection: ISQLEConnection, foreignServer: string): Observable<any[]> {\n    const queryStr: string = `\n      HELP FOREIGN SERVER ${foreignServer};\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: { Schema: string }) => {\n            return {\n              name: row.Schema,\n              kind: 'NONE',\n            };\n          });\n        }),\n      );\n  }\n\n  getForeignTables(connection: ISQLEConnection, foreignServer: string, schema: string): Observable<any[]> {\n    const queryStr: string = `\n      HELP FOREIGN DATABASE \"${schema}\"@${foreignServer};\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: { Table: string }) => {\n            return {\n              name: row.Table,\n              kind: 'NONE',\n            };\n          });\n        }),\n      );\n  }\n\n  getForeignColumns(\n    connection: ISQLEConnection,\n    foreignServer: string,\n    schema: string,\n    table: string,\n  ): Observable<any[]> {\n    const queryStr: string = `\n      HELP FOREIGN TABLE \"${schema}\".\"${table}\"@${foreignServer};\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: { Column: string; Type: string }) => {\n            return {\n              name: row.Column,\n              type: row.Type,\n            };\n          });\n        }),\n      );\n  }\n\n  getDatabases(connection: ISQLEConnection): Observable<any[]> {\n    const queryStr: string =\n      'SELECT databasename, PermSpace, SpoolSpace, TempSpace, CommentString, DBKind FROM dbc.databasesVX ORDER BY databasename;';\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            return {\n              name: row.DatabaseName || row.schemaname,\n              type: row.DBKind === 'U' ? 'user' : 'database',\n              permSpace: row.PermSpace,\n              spoolSpace: row.SpoolSpace,\n              tempSpace: row.TempSpace,\n              comment: row.CommentString,\n            };\n          });\n        }),\n      );\n  }\n\n  getDatabaseObjects(connection: ISQLEConnection, databaseId: string): Observable<any[]> {\n    const queryStr: string = `SELECT DataBaseName, TableName, TableKind, CommentString FROM dbc.tablesvx\n       WHERE TableKind in ('T', 'O', 'V') AND DataBaseName = '${databaseId}' ORDER BY TableName ASC;`;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            const type: string = row.TableKind || row.tablekind;\n            return {\n              kind: row.TableKind || row.tablekind,\n              type: type === 'V' ? 'view' : 'table',\n              name: row.TableName || row.tablename,\n              database: row.DataBaseName || row.databasename,\n              comment: row.CommentString,\n            };\n          });\n        }),\n      );\n  }\n\n  getTableColumns(type: string, connection: ISQLEConnection, databaseId: string, tableId: string): Observable<any> {\n    if (type === 'table') {\n      return this._queryService.getTableInfo(connection, databaseId, tableId).pipe(\n        map((resultSet: any) => {\n          return resultSet.columns.map((column: any) => {\n            return {\n              comment: column.remarks,\n              type: 'column',\n              columnType: column.type,\n              name: column.name,\n              database: resultSet.database,\n              table: resultSet.name,\n            };\n          });\n        }),\n      );\n    } else if (type === 'view') {\n      return this._queryService.getViewInfo(connection, databaseId, tableId).pipe(\n        map((resultSet: any) => {\n          return resultSet.columns.map((column: any) => {\n            return {\n              comment: column.remarks,\n              type: 'column',\n              columnType: column.type,\n              name: column.name,\n              database: resultSet.database,\n              table: resultSet.name,\n            };\n          });\n        }),\n      );\n    }\n  }\n\n  search(\n    connection: ISQLEConnection,\n    searchStr: string,\n    options: {\n      databases: boolean;\n      objects: boolean;\n      columns: boolean;\n    } = {\n      databases: true,\n      objects: true,\n      columns: true,\n    },\n  ): Observable<any[]> {\n    const queries: string[] = [];\n    if (options.databases) {\n      const dbQuery: string = `\n        SELECT\n            DatabaseName as objectName,\n            'database' as objectType,\n            DBKind as kind,\n            CommentString\n        FROM dbc.databasesvx\n        WHERE DatabaseName LIKE '%${searchStr}%'\n        AND DataBaseName NOT IN ('${sysDatabases.join(\"', '\")}')\n      `;\n      queries.push(dbQuery);\n    }\n    if (options.objects) {\n      const objectQuery: string = `\n        SELECT\n            DataBaseName || '~|~' || TableName as objectName,\n            'object' as objectType,\n            TableKind as kind,\n            CommentString\n        FROM dbc.tablesvx\n        WHERE TableKind in ('T', 'O', 'V')\n        AND TableName LIKE '%${searchStr}%'\n        AND DataBaseName NOT IN ('${sysDatabases.join(\"', '\")}')\n      `;\n      queries.push(objectQuery);\n    }\n    if (options.objects) {\n      const columnQuery: string = `\n        SELECT\n            DataBaseName || '~|~' || TableName || '~|~' || ColumnName as objectName,\n            'column' as objectType,\n            ColumnType as kind,\n            CommentString\n        FROM dbc.columnsVX\n        WHERE columnname LIKE '%${searchStr}%'\n        AND DataBaseName NOT IN ('${sysDatabases.join(\"', '\")}')\n      `;\n      queries.push(columnQuery);\n    }\n    const unionJoin: string = queries.join('UNION');\n    const queryStr: string = `\n      WITH quick_search AS (\n          ${unionJoin}\n      )\n      SELECT * FROM quick_search\n      ORDER BY 1\n      SAMPLE 100;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            let kind: string = row.kind;\n            // map to proper type/kind\n            if (row.objectType === 'column') {\n              kind = 'column';\n            } else if (row.objectType === 'database') {\n              kind = kind === 'D' ? 'database' : 'user';\n            } else {\n              kind = kind === 'V' ? 'view' : 'table';\n            }\n            const newParent: string[] = [];\n            // split name and parents..\n            const nameSplit: string[] = row.objectName.split('~|~');\n            for (let index: number = 0; index < nameSplit.length - 1; index++) {\n              newParent.push('\"' + nameSplit[index] + '\"');\n            }\n            return {\n              parent: newParent.join('.'),\n              name: nameSplit[nameSplit.length - 1],\n              kind,\n              type: row.objectType,\n              comment: row.CommentString,\n            };\n          });\n        }),\n      );\n  }\n}\n\nexport function VANTAGE_DICTIONARY_PROVIDER_FACTORY(\n  parent: VantageDictionaryService,\n  queryService: VantageQueryService,\n): VantageDictionaryService {\n  return parent || new VantageDictionaryService(queryService);\n}\n\nexport const VANTAGE_DICTIONARY_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageDictionaryService,\n  deps: [[new Optional(), new SkipSelf(), VantageDictionaryService], VantageQueryService],\n  useFactory: VANTAGE_DICTIONARY_PROVIDER_FACTORY,\n};\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { HttpParams } from '@angular/common/http';\n\nimport { MatDialogRef } from '@angular/material/dialog';\n\nimport { TdLoadingService } from '@covalent/core/loading';\n\nimport { ISystem, VantageSystemService } from '@td-vantage/ui-platform/system';\nimport { VantageConnectionService } from '../connection.service';\nimport { ISQLEConnection } from '../query.service';\n\nimport { Observable, Subject, of } from 'rxjs';\nimport { retry, map, tap, catchError } from 'rxjs/operators';\n\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'vui-sqle-credentials-dialog',\n  templateUrl: './credentials-dialog.component.html',\n  styleUrls: ['./credentials-dialog.component.scss'],\n})\nexport class VantageCredentialsDialogComponent implements OnInit, OnDestroy {\n  // listens to times we try to connect regardless\n  private _connectionAttempt$: Subject<void> = new Subject<void>();\n  connectionAttempt$: Observable<void> = this._connectionAttempt$.asObservable();\n\n  basicAuthEnabled: boolean = false;\n  systems$: Observable<ISystem[]>;\n\n  system: ISystem;\n  connectionType: boolean = false;\n  username: string;\n  password: string;\n\n  errorMsg: string;\n\n  constructor(\n    private _dialogRef: MatDialogRef<VantageCredentialsDialogComponent>,\n    private _connectionService: VantageConnectionService,\n    private _systemService: VantageSystemService,\n    private _loadingService: TdLoadingService,\n    private _translate: TranslateService,\n  ) {}\n\n  ngOnInit(): void {\n    // prepopulate connection type\n    this.connectionType = this.basicAuthEnabled;\n    // prep systems observable\n    let queryParams: HttpParams = new HttpParams();\n    queryParams = queryParams.append('systemType', 'TERADATA');\n    this.systems$ = this._systemService.query(queryParams).pipe(\n      retry(2),\n      catchError(() => {\n        this.errorMsg = this._translate.instant('ERROR_RETRIEVE_DATA');\n        return of({ data: [] });\n      }),\n      map((resp: { data: ISystem[] }) => resp.data),\n      tap((systems: ISystem[]) => {\n        if (systems && systems.length) {\n          // select first system by default if no system was prepopulated\n          if (!this.system) {\n            this.system = systems[0];\n          }\n          // if there is only one system and basic auth disabled, we try to connect to it automagically\n          if (systems.length === 1 && !this.basicAuthEnabled) {\n            this.connect();\n          }\n        }\n      }),\n    );\n  }\n\n  ngOnDestroy(): void {\n    // finallize subject\n    this._connectionAttempt$.complete();\n  }\n\n  compareSystemWith(a: ISystem, b: ISystem): boolean {\n    return a && b && a.nickname === b.nickname;\n  }\n\n  async connect(): Promise<void> {\n    try {\n      this.errorMsg = undefined;\n      // block users from closing the dialog while connecting\n      this._dialogRef.disableClose = true;\n      this._loadingService.register('system.connect');\n      const connection: ISQLEConnection = this.connectionType\n        ? { system: this.system, creds: btoa(this.username + ':' + this.password) }\n        : { system: this.system };\n      await this._connectionService.connect(connection).toPromise();\n      this._dialogRef.close(connection);\n    } catch (error) {\n      this.errorMsg = error.message;\n    } finally {\n      this._connectionAttempt$.next();\n      // allow users to close dialog again\n      this._dialogRef.disableClose = false;\n      this._loadingService.resolve('system.connect');\n    }\n  }\n\n  cancel(): void {\n    this._dialogRef.close();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport { CovalentLoadingModule } from '@covalent/core/loading';\nimport { CovalentMessageModule } from '@covalent/core/message';\n\nimport { VantageSystemModule } from '@td-vantage/ui-platform/system';\n\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { VANTAGE_CONNECTION_PROVIDER } from './connection.service';\nimport { VANTAGE_DICTIONARY_PROVIDER } from './dictionary.service';\nimport { VANTAGE_QUERY_PROVIDER } from './query.service';\nimport { VANTAGE_SPOOLED_QUERY_PROVIDER } from './spooled-query.service';\n\nimport { VantageCredentialsDialogComponent } from './credentials-dialog/credentials-dialog.component';\n\n@NgModule({\n  declarations: [VantageCredentialsDialogComponent],\n  exports: [VantageCredentialsDialogComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    MatCardModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatRadioModule,\n    MatIconModule,\n    CovalentLoadingModule,\n    CovalentMessageModule,\n    VantageSystemModule,\n    TranslateModule,\n  ],\n  providers: [\n    VANTAGE_CONNECTION_PROVIDER,\n    VANTAGE_DICTIONARY_PROVIDER,\n    VANTAGE_QUERY_PROVIDER,\n    VANTAGE_SPOOLED_QUERY_PROVIDER,\n  ],\n})\nexport class VantageSQLEModule {}\n"]}