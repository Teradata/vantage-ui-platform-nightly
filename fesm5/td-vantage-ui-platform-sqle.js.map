{"version":3,"file":"td-vantage-ui-platform-sqle.js","sources":["ng://@td-vantage/ui-platform/sqle/query.service.ts","ng://@td-vantage/ui-platform/sqle/connection.service.ts","ng://@td-vantage/ui-platform/sqle/spooled-query.service.ts","ng://@td-vantage/ui-platform/sqle/dictionary.service.ts","ng://@td-vantage/ui-platform/sqle/credentials-dialog/credentials-dialog.component.ts","ng://@td-vantage/ui-platform/sqle/sqle.module.ts"],"sourcesContent":["import { Injectable, Provider, Optional, SkipSelf } from '@angular/core';\nimport { HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { ISystem } from '@td-vantage/ui-platform/system';\nimport { TdHttpService } from '@covalent/http';\n\nexport interface IQueryPayload {\n  query: string;\n  session?: string;\n  logMech?: string;\n  rowOffset?: number;\n  rowLimit?: number;\n  format?: string; // (default)-object, array, or csv\n  includeColumns?: boolean;\n  includeColumnsTypes?: boolean;\n  outputNumbersAsStrings?: boolean;\n  spooledResultSet?: boolean;\n  clientId?: string;\n}\n\nexport interface IQueryResultSet {\n  queueDuration: number;\n  queryDuration: number;\n  results: IQueryResultSetResult[];\n}\n\nexport interface IQueryResultSetResult {\n  data: { [name: string]: string }[];\n  resultSet: boolean;\n  rowCount: number;\n  rowLimitExceeded: boolean;\n  columns?: IQueryResultSetColumn[];\n}\n\nexport interface IQueryResultSetColumn {\n  name: string;\n  type: string;\n}\n\nexport interface IQueryInfo {\n  success?: boolean;\n  logTime?: string;\n  error?: any;\n  resultSet?: IQueryResultSet;\n}\n\nexport interface ISQLEConnection {\n  system: ISystem;\n  creds?: string;\n}\n\nexport interface ISessionPayload {\n  autoCommit: string;\n  transactionMode: string;\n  charSet: string;\n  defaultDatabase?: string;\n  logMech?: string;\n}\n\n@Injectable()\nexport class VantageQueryService {\n  constructor(private _http: TdHttpService) {}\n\n  querySystem(connection: ISQLEConnection, payload: IQueryPayload): Observable<IQueryResultSet> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n      const attributes: { [key: string]: string } = connection.system.system_attributes?.attributes;\n      payload.logMech = attributes?.log_mech || attributes?.logMech || 'DEFAULT';\n    } else {\n      payload.logMech = 'JWT';\n    }\n    payload.clientId = 'VANTAGE.EDITOR';\n    const request: Observable<object> = this._http.post(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries',\n      payload,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw Object.assign({}, error.error, { httpStatus: error.status });\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getTableInfo(connection: ISQLEConnection, databaseName: string, tableName: string): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n\n    const request: Observable<object> = this._http.get(\n      `/api/query/systems/${connection.system.nickname}/databases/${databaseName}/tables/${tableName}`,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw Object.assign({}, error.error, { httpStatus: error.status });\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getViewInfo(connection: ISQLEConnection, databaseName: string, viewName: string): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n\n    const request: Observable<object> = this._http.get(\n      `/api/query/systems/${connection.system.nickname}/databases/${databaseName}/views/${viewName}`,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw Object.assign({}, error.error, { httpStatus: error.status });\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getQuery(connection: ISQLEConnection, requestId: string): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._http.get(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries/' + requestId,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw Object.assign({}, error.error, { httpStatus: error.status });\n      }),\n      map((resultSet: any) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getQueries(connection: ISQLEConnection, sessionId: string): Observable<IQueryResultSet> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._http.get(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries?session=' + sessionId,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw Object.assign({}, error.error, { httpStatus: error.status });\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getQueryResult(connection: ISQLEConnection, queryId: string): Observable<IQueryResultSet> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._http.get(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries/' + queryId + '/results',\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw Object.assign({}, error.error, { httpStatus: error.status });\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  deleteQuery(connection: ISQLEConnection, queryId: string): Observable<IQueryResultSet> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._http.delete(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries/' + queryId,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw Object.assign({}, error.error, { httpStatus: error.status });\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  createSession(\n    connection: ISQLEConnection,\n    payload: ISessionPayload = { autoCommit: 'true', transactionMode: 'TERA', charSet: 'UTF8' },\n  ): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n      const attributes: { [key: string]: string } = connection.system.system_attributes?.attributes;\n      payload.logMech = attributes?.log_mech || attributes?.logMech || 'DEFAULT';\n    } else {\n      payload.logMech = 'JWT';\n    }\n    const request: Observable<object> = this._http.post(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/sessions',\n      payload,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw Object.assign({}, error.error, { httpStatus: error.status });\n      }),\n      map((resultSet: any) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  deleteSession(connection: ISQLEConnection, sessionId: string): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._http.delete(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/sessions/' + sessionId,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw Object.assign({}, error.error, { httpStatus: error.status });\n      }),\n      map((resultSet: any) => {\n        return resultSet;\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_QUERY_PROVIDER_FACTORY(\n  parent: VantageQueryService,\n  tdHttpService: TdHttpService,\n): VantageQueryService {\n  return parent || new VantageQueryService(tdHttpService);\n}\n\nexport const VANTAGE_QUERY_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageQueryService,\n  deps: [[new Optional(), new SkipSelf(), VantageQueryService], TdHttpService],\n  useFactory: VANTAGE_QUERY_PROVIDER_FACTORY,\n};\n","import { Injectable, Optional, SkipSelf, Provider } from '@angular/core';\nimport { Observable, throwError, timer, BehaviorSubject } from 'rxjs';\nimport { mergeMap, retryWhen, tap, timeout, mapTo } from 'rxjs/operators';\nimport { VantageQueryService, ISQLEConnection } from './query.service';\nimport { VantageSessionService } from '@td-vantage/ui-platform/auth';\n\nconst CONNECTION_SESSION_KEY: string = 'vantage.connection_state';\n\ninterface IVantageConnectionState {\n  current?: ISQLEConnection;\n  connections: ISQLEConnection[];\n  username: string;\n}\n\nexport interface IConnectOptions {\n  timeout: number;\n  attempts: number;\n}\n\nexport function generateConnectionKey(connection: ISQLEConnection): string {\n  if (connection) {\n    return `${connection.system.nickname}${connection.creds}`;\n  }\n}\n\n@Injectable()\nexport class VantageConnectionService {\n  private readonly _currentConnectionSubject: BehaviorSubject<ISQLEConnection> = new BehaviorSubject<ISQLEConnection>(\n    this._getConnectionState().current,\n  );\n  private readonly _connectionsSubject: BehaviorSubject<ISQLEConnection[]> = new BehaviorSubject<ISQLEConnection[]>(\n    this._getConnectionState().connections,\n  );\n  public currentConnection$: Observable<ISQLEConnection> = this._currentConnectionSubject.asObservable();\n  public connections$: Observable<ISQLEConnection[]> = this._connectionsSubject.asObservable();\n\n  constructor(private _queryService: VantageQueryService, private _sessionService: VantageSessionService) {\n    const connectionState: IVantageConnectionState = this._getConnectionState();\n    if (connectionState && connectionState.username !== this._currentUsername) {\n      // mismatch, so clear\n      this._connections = [];\n      this._currentConnection = undefined;\n    }\n  }\n\n  private set _currentConnection(connection: ISQLEConnection) {\n    this._setConnectionState({\n      current: connection,\n      connections: this._connections,\n      username: this._currentUsername,\n    });\n    this._currentConnectionSubject.next(connection);\n  }\n  private get _currentConnection(): ISQLEConnection {\n    return this._currentConnectionSubject.getValue();\n  }\n  public get currentConnection(): ISQLEConnection {\n    return this._currentConnection;\n  }\n\n  private set _connections(connections: ISQLEConnection[]) {\n    this._setConnectionState({\n      current: this._currentConnection,\n      connections,\n      username: this._currentUsername,\n    });\n    this._connectionsSubject.next(connections);\n  }\n  private get _connections(): ISQLEConnection[] {\n    return this._connectionsSubject.getValue();\n  }\n  public get connections(): ISQLEConnection[] {\n    return this._connections;\n  }\n\n  public addAndSetAsCurrent(connection: ISQLEConnection, options?: IConnectOptions): Observable<ISQLEConnection> {\n    if (this._getConnectionIndex(connection) > -1) {\n      throw Error('Connection already exists');\n    } else {\n      return this._pingAndSave(connection, true, options);\n    }\n  }\n\n  public add(connection: ISQLEConnection, options?: IConnectOptions): Observable<ISQLEConnection> {\n    if (this._getConnectionIndex(connection) > -1) {\n      throw Error('Connection already exists');\n    } else {\n      return this._pingAndSave(connection, false, options);\n    }\n  }\n\n  public setAsCurrent(connection: ISQLEConnection, options?: IConnectOptions): Observable<ISQLEConnection> {\n    if (this._getConnectionIndex(connection) > -1) {\n      return this._pingAndSave(connection, true, options);\n    } else {\n      throw Error('Connection does not exist');\n    }\n  }\n\n  public remove(connection: ISQLEConnection): ISQLEConnection {\n    const index: number = this._getConnectionIndex(connection);\n    if (index > -1) {\n      this._connections = [...this._connections.slice(0, index), ...this._connections.slice(index + 1)];\n      this._currentConnection =\n        this._currentConnection && this._areEqual(this._currentConnection, connection)\n          ? undefined\n          : this._currentConnection;\n      return connection;\n    } else {\n      // connection does not exist but that is fine?\n      return undefined;\n    }\n  }\n\n  public unsetAsCurrent(): void {\n    this._currentConnection = undefined;\n  }\n\n  public removeAll(): void {\n    this._connections = [];\n    this._currentConnection = undefined;\n  }\n\n  public exists(connection: ISQLEConnection): boolean {\n    return this._getConnectionIndex(connection) > -1;\n  }\n\n  public isCurrent(connection: ISQLEConnection): boolean {\n    return this._areEqual(connection, this.currentConnection);\n  }\n\n  public generateKey(connection: ISQLEConnection): string {\n    return generateConnectionKey(connection);\n  }\n\n  private _pingAndSave(\n    connection: ISQLEConnection,\n    setAsCurrent: boolean,\n    opts?: IConnectOptions,\n  ): Observable<ISQLEConnection> {\n    // test connection with SELECT 1\n    return this._queryService.querySystem(connection, { query: 'SELECT 1;' }).pipe(\n      // timeout connection if more than 7 seconds\n      timeout(opts?.timeout || 7000),\n      // retry only after a certain number of attempts or if the error is something else than 420\n      retryWhen((errors: Observable<{ httpStatus: number }>) => {\n        return errors.pipe(\n          mergeMap((error: { httpStatus: number }, index: number) => {\n            const retryAttempt: number = index + 1;\n            if (retryAttempt > (opts?.attempts || 2) || error.httpStatus === 420) {\n              return throwError(error);\n            }\n            return timer(0);\n          }),\n        );\n      }),\n      tap(() => {\n        // if successful, save\n        const index: number = this._getConnectionIndex(connection);\n        if (index === -1) {\n          this._connections = [...this._connections, connection];\n        }\n        if (setAsCurrent) {\n          this._currentConnection = connection;\n        }\n      }),\n      mapTo(connection),\n    );\n  }\n\n  private get _currentUsername(): string {\n    return this._sessionService.user && this._sessionService.user.username;\n  }\n\n  private _areEqual(connectionA: ISQLEConnection, connectionB: ISQLEConnection): boolean {\n    return connectionA.creds === connectionB.creds && connectionA.system.nickname === connectionB.system.nickname;\n  }\n\n  private _getConnectionIndex(connection: ISQLEConnection): number {\n    return this.connections.findIndex((conn: ISQLEConnection) => this._areEqual(connection, conn));\n  }\n\n  private _getConnectionState(): IVantageConnectionState {\n    try {\n      const connectionState: IVantageConnectionState = JSON.parse(sessionStorage.getItem(CONNECTION_SESSION_KEY));\n      if (connectionState) {\n        return connectionState;\n      }\n      return {\n        username: undefined,\n        current: undefined,\n        connections: [],\n      };\n    } catch {\n      return {\n        username: undefined,\n        current: undefined,\n        connections: [],\n      };\n    }\n  }\n\n  private _setConnectionState(connectionState: IVantageConnectionState): void {\n    sessionStorage.setItem(CONNECTION_SESSION_KEY, JSON.stringify(connectionState));\n  }\n}\n\nexport function VANTAGE_CONNECTION_PROVIDER_FACTORY(\n  parent: VantageConnectionService,\n  queryService: VantageQueryService,\n  sessionService: VantageSessionService,\n): VantageConnectionService {\n  return parent || new VantageConnectionService(queryService, sessionService);\n}\n\nexport const VANTAGE_CONNECTION_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageConnectionService,\n  deps: [[new Optional(), new SkipSelf(), VantageConnectionService], VantageQueryService, VantageSessionService],\n  useFactory: VANTAGE_CONNECTION_PROVIDER_FACTORY,\n};\n","import { Injectable, Provider, Optional, SkipSelf } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { TranslateService } from '@ngx-translate/core';\nimport { catchError, expand, map, mapTo, skipWhile, switchMap, take, tap } from 'rxjs/operators';\nimport { BehaviorSubject, Observable, of, throwError, timer } from 'rxjs';\nimport { VantageConnectionService } from './connection.service';\nimport { VantageQueryService, IQueryPayload, IQueryResultSet } from './query.service';\n\ninterface ISpooledQueryError extends HttpErrorResponse {\n  id: string;\n  detailMessage: string;\n}\n\nconst MAX_INTERVAL: number = 10000;\nconst BASE_INTERVAL: number = 2000;\n\nenum SpooledQueryState {\n  QUEUED = 'QUEUED',\n  PENDING = 'PENDING',\n  SUBMITTED = 'SUBMITTED',\n  RESPONDING = 'RESPONDING',\n  SPOOLING = 'SPOOLING',\n  RESULT_SET_READY = 'RESULT_SET_READY',\n}\n\n@Injectable()\nexport class VantageSpooledQueryService {\n  queryStatus: BehaviorSubject<SpooledQueryState> = new BehaviorSubject<SpooledQueryState>(undefined);\n  queryStatus$: Observable<SpooledQueryState> = this.queryStatus.asObservable();\n  queryStack: string[] = [];\n  constructor(\n    private connectionService: VantageConnectionService,\n    private queryService: VantageQueryService,\n    private translate: TranslateService,\n  ) {}\n\n  cancelLastQuery(): void {\n    const thisQuery: string = this.queryStack.pop();\n\n    return this.deleteSpooledQuery(thisQuery);\n  }\n\n  getRunningInfo(): Observable<SpooledQueryState> {\n    return this.queryStatus$;\n  }\n\n  querySystem(payload: IQueryPayload): Observable<IQueryResultSet> {\n    return this.queryService\n      .querySystem(this.connectionService.currentConnection, { ...payload, spooledResultSet: true })\n      .pipe(\n        tap((res: any) => this.queryStack.push(res.id)),\n        switchMap((res: any) => this.exponentialBackOffInterval(MAX_INTERVAL, res.id)),\n        switchMap((id: number) =>\n          this.queryService.getQuery(this.connectionService.currentConnection, id.toString()).pipe(\n            map((query: any) => query.queryState),\n            tap((val: any) => this.queryStatus.next(val)),\n            map((val: any) => [id, val]),\n          ),\n        ),\n        skipWhile(([id, status]: [string, SpooledQueryState]) => status !== SpooledQueryState.RESULT_SET_READY),\n        take(1),\n        switchMap(([id]: [string, SpooledQueryState]) =>\n          this.queryService.getQueryResult(this.connectionService.currentConnection, id).pipe(\n            map((val: IQueryResultSet) => [id, val]),\n            tap(() => this.queryStack.pop()),\n            catchError((res: HttpErrorResponse) => {\n              return throwError({\n                ...res,\n                ...{ id },\n                detailMessage: `Error ${res.error.error}: ${res.error.message}`,\n              } as ISpooledQueryError);\n            }),\n          ),\n        ),\n        map(([id, results]: [string, IQueryResultSet]) => results),\n      );\n  }\n\n  exponentialBackOffInterval(maxInterval: number, returnVal: any): Observable<number> {\n    return of(0).pipe(\n      expand((iteration: number) => timer(this.calcInterval(iteration, maxInterval)).pipe(mapTo(iteration + 1))),\n      mapTo(returnVal),\n    );\n  }\n\n  calcInterval(iteration: number, maxInterval: number): number {\n    const expo: number = 1.4;\n    const interval: number = Math.pow(expo, iteration) * BASE_INTERVAL;\n\n    return Math.min(interval, maxInterval);\n  }\n\n  deleteSpooledQuery(queryId: string): void {\n    this.queryService\n      .deleteQuery(this.connectionService.currentConnection, queryId)\n      .subscribe(undefined, (err: Error) => {\n        throw new Error(this.translate.instant('SPOOLED_QUERY_COULD_NOT_BE_DELETED', { error: JSON.stringify(err) }));\n      });\n  }\n}\n\nexport function VANTAGE_SPOOLED_QUERY_PROVIDER_FACTORY(\n  parent: VantageSpooledQueryService,\n  connectionService: VantageConnectionService,\n  queryService: VantageQueryService,\n  translate: TranslateService,\n): VantageSpooledQueryService {\n  return parent || new VantageSpooledQueryService(connectionService, queryService, translate);\n}\n\nexport const VANTAGE_SPOOLED_QUERY_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageSpooledQueryService,\n  deps: [\n    [new Optional(), new SkipSelf(), VantageSpooledQueryService],\n    VantageConnectionService,\n    VantageQueryService,\n    TranslateService,\n  ],\n  useFactory: VANTAGE_SPOOLED_QUERY_PROVIDER_FACTORY,\n};\n","import { Injectable, SkipSelf, Optional, Provider } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nimport { VantageQueryService, IQueryResultSet, ISQLEConnection } from './query.service';\n\nexport const sysDatabases: string[] = [\n  'DBC',\n  'dbcmngr',\n  'SQLJ',\n  'SystemFe',\n  'SysAdmin',\n  'SYSBAR',\n  'SYSJDBC',\n  'SYSLIB',\n  'SYSUDTLIB',\n  'TDMaps',\n  'TD_SERVER_DB',\n  'TD_SYSFNLIB',\n  'TD_SYSXML',\n  'Sys_Calendar',\n];\n\nexport interface IDictionarySystem {\n  hostname?: string;\n  password?: string;\n  port?: number;\n  system_id?: string;\n  last_run?: string;\n  interval_minutes?: number;\n  enabled?: boolean;\n  last_attempt?: string;\n  in_collection?: boolean;\n  username?: string;\n}\n\nexport interface IDictionaryDatabase {\n  parent_name?: string;\n  size_bytes?: number;\n  system_id?: string;\n  name?: string;\n  id?: string;\n  type?: string;\n}\n\nexport interface IDictionaryDatabaseObject {\n  system_id?: string;\n  database_id?: string;\n  id?: string;\n  name?: string;\n  size_bytes?: number;\n  type?: string;\n  create_text?: string;\n}\n\nexport interface IDictionaryTableColumn {\n  system_id?: string;\n  database_id?: string;\n  table_id?: string;\n  id?: string;\n  name?: string;\n}\n\n/**\n * FunctionType\n * A - Aggregate\n * B - Aggregate and statistical\n * C - Contract function\n * D - External stored procedure\n * F - Scalar\n * H - User defined method\n * I - Internal type method\n * L - Table operator\n * R - Table Function\n * S - Statistical\n */\n\n/**\n * TableKind for dbc.tablesvx;\n * A - Aggregate function\n * B - Combined aggregate and ordered analytical function\n * C - Table operator parser contract function\n * D - JAR\n * E - External Stored Procedure\n * F - Standard Function\n * G - Trigger\n * H - Instance or contructor method\n * I - Join Index\n * J - Journal\n * K - Foreign Server Object\n * L - User defined table operator\n * M - Macro\n * N - Hash index\n * O - Table with no primary index and no partitioning\n * P - Stored Procedure\n * Q - Queue table\n * R - Table function\n * S - Ordered Analytical function\n * T - table with a primary index or primary AMP index, partitioning or both. Or a partioned table with NoPI;\n * U - User defined type\n * V - View\n * X - Authorization\n * Y - GLOP set\n * Z - UIF - User Installed File\n * 1 - A DATASET schema object created by CREATE SCHEMA\n * 2 - Functon alias object\n */\n\n/**\n * dbc.externalSPs\n * dbc.sessionInfovx\n */\n\n@Injectable()\nexport class VantageDictionaryService {\n  constructor(private _queryService: VantageQueryService) {}\n\n  getViewHelp(connection: ISQLEConnection, database: string, view: string): Observable<any> {\n    const queryStr: string = `\n      LOCK ROW FOR ACCESS\n      SELECT CAST(COUNT(*) AS BIGINT) as cnt\n      FROM ${database}.${view};\n      SHOW VIEW ${database}.${view};\n    `;\n\n    return this._queryService.getViewInfo(connection, database, view).pipe(\n      map((resultSet: any) => {\n        return resultSet.columns.map((column: any) => {\n          return {\n            comment: column.remarks,\n            type: 'column',\n            columnType: column.type,\n            name: column.name,\n            database: resultSet.database,\n            table: resultSet.name,\n          };\n        });\n      }),\n      switchMap((viewInfo: any) => {\n        return this._queryService\n          .querySystem(connection, {\n            query: queryStr,\n          })\n          .pipe(\n            map((resultSet: IQueryResultSet) => {\n              let ddlStatement: string = '';\n              resultSet.results[1].data.forEach((row: any) => {\n                ddlStatement += row['Request Text'];\n              });\n              let count: string;\n              resultSet.results[0].data.forEach((row: any) => {\n                count = row.cnt;\n              });\n\n              const columns: any[] = viewInfo.map((row: any) => {\n                return {\n                  columnName: row.name,\n                  type: row.columnType,\n                };\n              });\n\n              return {\n                database,\n                view,\n                columns,\n                count,\n                ddlStatement,\n              };\n            }),\n          );\n      }),\n    );\n  }\n\n  getTableHelp(connection: ISQLEConnection, database: string, table: string): Observable<any> {\n    const queryStr: string = `\n      LOCK ROW FOR ACCESS\n      SELECT CAST(COUNT(*) AS BIGINT) as cnt\n      FROM ${database}.${table};\n      SHOW TABLE ${database}.${table};\n    `;\n    return this._queryService.getTableInfo(connection, database, table).pipe(\n      map((resultSet: any) => {\n        return resultSet.columns.map((column: any) => {\n          return {\n            comment: column.remarks,\n            type: 'column',\n            columnType: column.type,\n            name: column.name,\n            database: resultSet.database,\n            table: resultSet.name,\n          };\n        });\n      }),\n      switchMap((info: any) => {\n        return this._queryService\n          .querySystem(connection, {\n            query: queryStr,\n          })\n          .pipe(\n            map((resultSet: IQueryResultSet) => {\n              let ddlStatement: string = '';\n              resultSet.results[1].data.forEach((row: any) => {\n                ddlStatement += row['Request Text'];\n              });\n              let count: string;\n              resultSet.results[0].data.forEach((row: any) => {\n                count = row.cnt;\n              });\n              const columns: any[] = info.map((row: any) => {\n                return {\n                  columnName: row.name,\n                  type: row.columnType,\n                };\n              });\n              return {\n                database,\n                table,\n                columns,\n                count,\n                ddlStatement,\n              };\n            }),\n          );\n      }),\n    );\n  }\n\n  getDatabaseFunction(connection: ISQLEConnection, funcName: string): Observable<any> {\n    const queryStr: string = `\n      HELP 'SQL ${funcName}';\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          const stringArray: string[] = resultSet.results[0].data.map((row: any) => {\n            return row['On-Line Help'];\n          });\n          return stringArray.join(' ');\n        }),\n      );\n  }\n\n  getDatabaseFunctions(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      HELP 'SQL';\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          const stringArray: string[] = resultSet.results[0].data.map((row: any) => {\n            return row['On-Line Help'];\n          });\n          let sqlHelp: string = stringArray.join(' ');\n          const index: number = sqlHelp.indexOf('FUNCTIONS') + 12;\n          sqlHelp = sqlHelp.substr(index, sqlHelp.length);\n          return sqlHelp\n            .split(' ')\n            .filter((func: string) => {\n              return func;\n            })\n            .map((func: string) => {\n              return {\n                name: func,\n              };\n            });\n        }),\n      );\n  }\n\n  getAnalyticalFunctions(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      HELP FOREIGN SCHEMA \"public\"@coprocessor;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            return {\n              name: row.objectname,\n            };\n          });\n        }),\n      );\n  }\n\n  getAnalyticalFunction(connection: ISQLEConnection, analyticalFunction: string): Observable<any> {\n    const queryStr: string = `\n      HELP FOREIGN FUNCTION \"public\".\"${analyticalFunction}\"@coprocessor;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          let functionName: string = '';\n          let shortDescription: string = '';\n          let longDescription: string = '';\n          let usageSyntax: string = '';\n          let inputColumns: string = '';\n          let outputColumns: string = '';\n          const functionOwner: string = '';\n          const creationTime: string = '';\n          const functionVersion: string = '';\n          const interfacesImplemented: string = '';\n          const stringArray: string[] = resultSet.results[0].data.map((row: any) => {\n            return row['Function Help'];\n          });\n          for (let index: number = 0; index < stringArray.length; index++) {\n            const value: string = stringArray[index];\n            if (value.indexOf('Function Name:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                functionName += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Short Description:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                shortDescription += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Long Description:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                longDescription += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Usage Syntax:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                usageSyntax += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Input Columns:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                inputColumns += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Output Columns:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                outputColumns += stringArray[index] + '\\n';\n              }\n            } else {\n              // Function Owner:\n              // Creation Time:\n              // Function Version:\n              // Interfaces Implemented:\n              if (stringArray.indexOf('') > -1) {\n                index = stringArray.indexOf('');\n                stringArray[index] = undefined;\n              }\n            }\n          }\n          return {\n            functionName,\n            shortDescription,\n            longDescription,\n            usageSyntax,\n            inputColumns,\n            outputColumns,\n          };\n        }),\n      );\n  }\n\n  resultSetPredicate(resultSet: IQueryResultSet): any {\n    return resultSet.results[0].data.map((row: any) => {\n      return {\n        name: row.TableName,\n        requestText: row.RequestText,\n        comment: row.CommentString,\n        kind: row.TableKind,\n      };\n    });\n  }\n\n  getStoredProcedures(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT DataBaseName, TableName, TableKind, RequestText, CommentString FROM dbc.tablesvx\n      WHERE TableKind = 'P'\n      ORDER BY TableName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.resultSetPredicate));\n  }\n\n  getExternalStoredProcedures(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT DataBaseName, TableName, TableKind, RequestText, CommentString FROM dbc.tablesvx\n      WHERE TableKind = 'E'\n      ORDER BY TableName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.resultSetPredicate));\n  }\n\n  getMacros(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT DataBaseName, TableName, TableKind, RequestText, CommentString FROM dbc.tablesvx\n      WHERE TableKind = 'M'\n      ORDER BY TableName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.resultSetPredicate));\n  }\n\n  functionsvxPredicate(resultSet: IQueryResultSet): any {\n    return resultSet.results[0].data.map((row: any) => {\n      return {\n        database: row.DatabaseName,\n        name: row.SpecificName,\n        paramNumber: row.NumParameters,\n        paramDataTypes: row.ParameterDataTypes,\n        requestText: row.RequestText,\n        commentString: row.CommentString,\n        kind: row.TableKind,\n      };\n    });\n  }\n\n  getTableOperators(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT func.DatabaseName, func.FunctionName, func.SpecificName, func.NumParameters,\n      func.ParameterDataTypes, tbl.RequestText, tbl.CommentString, tbl.TableKind\n      FROM dbc.functionsvx as func\n      INNER JOIN dbc.tablesvx as tbl\n      ON tbl.TableName = func.SpecificName\n      AND tbl.DataBaseName = func.DatabaseName\n      WHERE FunctionType = 'L'\n      ORDER BY func.FunctionName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.functionsvxPredicate));\n  }\n\n  getTableFunctions(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT func.DatabaseName, func.FunctionName, func.SpecificName, func.NumParameters,\n      func.ParameterDataTypes, tbl.RequestText, tbl.CommentString, tbl.TableKind\n      FROM dbc.functionsvx as func\n      INNER JOIN dbc.tablesvx as tbl\n      ON tbl.TableName = func.SpecificName\n      AND tbl.DataBaseName = func.DatabaseName\n      WHERE FunctionType = 'R'\n      ORDER BY func.FunctionName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.functionsvxPredicate));\n  }\n\n  getForeignServers(connection: ISQLEConnection): Observable<any[]> {\n    const queryStr: string = `\n      SELECT TableName, TableKind FROM DBC.TABLESVX\n      WHERE DATABASENAME = 'TD_SERVER_DB' AND\n      TABLEKIND = 'K' AND\n      TableName <> 'coprocesor';\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            return {\n              name: row.TableName,\n              kind: row.TableKind,\n            };\n          });\n        }),\n      );\n  }\n\n  getForeignSchemas(connection: ISQLEConnection, foreignServer: string): Observable<any[]> {\n    const queryStr: string = `\n      HELP FOREIGN SERVER ${foreignServer};\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: { Schema: string }) => {\n            return {\n              name: row.Schema,\n              kind: 'NONE',\n            };\n          });\n        }),\n      );\n  }\n\n  getForeignTables(connection: ISQLEConnection, foreignServer: string, schema: string): Observable<any[]> {\n    const queryStr: string = `\n      HELP FOREIGN DATABASE \"${schema}\"@${foreignServer};\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: { Table: string }) => {\n            return {\n              name: row.Table,\n              kind: 'NONE',\n            };\n          });\n        }),\n      );\n  }\n\n  getForeignColumns(\n    connection: ISQLEConnection,\n    foreignServer: string,\n    schema: string,\n    table: string,\n  ): Observable<any[]> {\n    const queryStr: string = `\n      HELP FOREIGN TABLE \"${schema}\".\"${table}\"@${foreignServer};\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: { Column: string; Type: string }) => {\n            return {\n              name: row.Column,\n              type: row.Type,\n            };\n          });\n        }),\n      );\n  }\n\n  getDatabases(connection: ISQLEConnection): Observable<any[]> {\n    const queryStr: string =\n      'SELECT databasename, PermSpace, SpoolSpace, TempSpace, CommentString, DBKind FROM dbc.databasesVX ORDER BY databasename;';\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            return {\n              name: row.DatabaseName || row.schemaname,\n              type: row.DBKind === 'U' ? 'user' : 'database',\n              permSpace: row.PermSpace,\n              spoolSpace: row.SpoolSpace,\n              tempSpace: row.TempSpace,\n              comment: row.CommentString,\n            };\n          });\n        }),\n      );\n  }\n\n  getDatabaseObjects(connection: ISQLEConnection, databaseId: string): Observable<any[]> {\n    const queryStr: string = `SELECT DataBaseName, TableName, TableKind, CommentString FROM dbc.tablesvx\n       WHERE TableKind in ('T', 'O', 'V') AND DataBaseName = '${databaseId}' ORDER BY TableName ASC;`;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            const type: string = row.TableKind || row.tablekind;\n            return {\n              kind: row.TableKind || row.tablekind,\n              type: type === 'V' ? 'view' : 'table',\n              name: row.TableName || row.tablename,\n              database: row.DataBaseName || row.databasename,\n              comment: row.CommentString,\n            };\n          });\n        }),\n      );\n  }\n\n  getTableColumns(type: string, connection: ISQLEConnection, databaseId: string, tableId: string): Observable<any> {\n    if (type === 'table') {\n      return this._queryService.getTableInfo(connection, databaseId, tableId).pipe(\n        map((resultSet: any) => {\n          return resultSet.columns.map((column: any) => {\n            return {\n              comment: column.remarks,\n              type: 'column',\n              columnType: column.type,\n              name: column.name,\n              database: resultSet.database,\n              table: resultSet.name,\n            };\n          });\n        }),\n      );\n    } else if (type === 'view') {\n      return this._queryService.getViewInfo(connection, databaseId, tableId).pipe(\n        map((resultSet: any) => {\n          return resultSet.columns.map((column: any) => {\n            return {\n              comment: column.remarks,\n              type: 'column',\n              columnType: column.type,\n              name: column.name,\n              database: resultSet.database,\n              table: resultSet.name,\n            };\n          });\n        }),\n      );\n    }\n  }\n\n  search(\n    connection: ISQLEConnection,\n    searchStr: string,\n    options: {\n      databases: boolean;\n      objects: boolean;\n      columns: boolean;\n    } = {\n      databases: true,\n      objects: true,\n      columns: true,\n    },\n  ): Observable<any[]> {\n    const queries: string[] = [];\n    if (options.databases) {\n      const dbQuery: string = `\n        SELECT\n            DatabaseName as objectName,\n            'database' as objectType,\n            DBKind as kind,\n            CommentString\n        FROM dbc.databasesvx\n        WHERE DatabaseName LIKE '%${searchStr}%'\n        AND DataBaseName NOT IN ('${sysDatabases.join(\"', '\")}')\n      `;\n      queries.push(dbQuery);\n    }\n    if (options.objects) {\n      const objectQuery: string = `\n        SELECT\n            DataBaseName || '~|~' || TableName as objectName,\n            'object' as objectType,\n            TableKind as kind,\n            CommentString\n        FROM dbc.tablesvx\n        WHERE TableKind in ('T', 'O', 'V')\n        AND TableName LIKE '%${searchStr}%'\n        AND DataBaseName NOT IN ('${sysDatabases.join(\"', '\")}')\n      `;\n      queries.push(objectQuery);\n    }\n    if (options.objects) {\n      const columnQuery: string = `\n        SELECT\n            DataBaseName || '~|~' || TableName || '~|~' || ColumnName as objectName,\n            'column' as objectType,\n            ColumnType as kind,\n            CommentString\n        FROM dbc.columnsVX\n        WHERE columnname LIKE '%${searchStr}%'\n        AND DataBaseName NOT IN ('${sysDatabases.join(\"', '\")}')\n      `;\n      queries.push(columnQuery);\n    }\n    const unionJoin: string = queries.join('UNION');\n    const queryStr: string = `\n      WITH quick_search AS (\n          ${unionJoin}\n      )\n      SELECT * FROM quick_search\n      ORDER BY 1\n      SAMPLE 100;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            let kind: string = row.kind;\n            // map to proper type/kind\n            if (row.objectType === 'column') {\n              kind = 'column';\n            } else if (row.objectType === 'database') {\n              kind = kind === 'D' ? 'database' : 'user';\n            } else {\n              kind = kind === 'V' ? 'view' : 'table';\n            }\n            const newParent: string[] = [];\n            // split name and parents..\n            const nameSplit: string[] = row.objectName.split('~|~');\n            for (let index: number = 0; index < nameSplit.length - 1; index++) {\n              newParent.push('\"' + nameSplit[index] + '\"');\n            }\n            return {\n              parent: newParent.join('.'),\n              name: nameSplit[nameSplit.length - 1],\n              kind,\n              type: row.objectType,\n              comment: row.CommentString,\n            };\n          });\n        }),\n      );\n  }\n}\n\nexport function VANTAGE_DICTIONARY_PROVIDER_FACTORY(\n  parent: VantageDictionaryService,\n  queryService: VantageQueryService,\n): VantageDictionaryService {\n  return parent || new VantageDictionaryService(queryService);\n}\n\nexport const VANTAGE_DICTIONARY_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageDictionaryService,\n  deps: [[new Optional(), new SkipSelf(), VantageDictionaryService], VantageQueryService],\n  useFactory: VANTAGE_DICTIONARY_PROVIDER_FACTORY,\n};\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { HttpParams } from '@angular/common/http';\n\nimport { MatDialogRef } from '@angular/material/dialog';\n\nimport { TdLoadingService } from '@covalent/core/loading';\n\nimport { ISystem, VantageSystemService } from '@td-vantage/ui-platform/system';\nimport { VantageConnectionService } from '../connection.service';\nimport { ISQLEConnection } from '../query.service';\n\nimport { Observable, Subject, of } from 'rxjs';\nimport { retry, map, tap, catchError } from 'rxjs/operators';\n\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'vui-sqle-credentials-dialog',\n  templateUrl: './credentials-dialog.component.html',\n  styleUrls: ['./credentials-dialog.component.scss'],\n})\nexport class VantageCredentialsDialogComponent implements OnInit, OnDestroy {\n  // listens to times we try to connect regardless\n  private _connectionAttempt$: Subject<void> = new Subject<void>();\n  connectionAttempt$: Observable<void> = this._connectionAttempt$.asObservable();\n\n  basicAuthEnabled: boolean = false;\n  systems$: Observable<ISystem[]>;\n\n  system: ISystem;\n  connectionType: boolean = false;\n  username: string;\n  password: string;\n\n  errorMsg: string;\n\n  constructor(\n    private _dialogRef: MatDialogRef<VantageCredentialsDialogComponent>,\n    private _connectionService: VantageConnectionService,\n    private _systemService: VantageSystemService,\n    private _loadingService: TdLoadingService,\n    private _translate: TranslateService,\n  ) {}\n\n  ngOnInit(): void {\n    // prepopulate connection type\n    this.connectionType = this.basicAuthEnabled;\n    // prep systems observable\n    let queryParams: HttpParams = new HttpParams();\n    queryParams = queryParams.append('systemType', 'TERADATA');\n    this.systems$ = this._systemService.query(queryParams).pipe(\n      retry(2),\n      catchError(() => {\n        this.errorMsg = this._translate.instant('ERROR_RETRIEVE_DATA');\n        return of({ data: [] });\n      }),\n      map((resp: { data: ISystem[] }) => resp.data),\n      tap((systems: ISystem[]) => {\n        if (systems && systems.length) {\n          // select first system by default if no system was prepopulated\n          if (!this.system) {\n            this.system = systems[0];\n          }\n          // if there is only one system and basic auth disabled, we try to connect to it automagically\n          if (systems.length === 1 && !this.basicAuthEnabled) {\n            this.connect();\n          }\n        }\n      }),\n    );\n  }\n\n  ngOnDestroy(): void {\n    // finallize subject\n    this._connectionAttempt$.complete();\n  }\n\n  compareSystemWith(a: ISystem, b: ISystem): boolean {\n    return a && b && a.nickname === b.nickname;\n  }\n\n  async connect(): Promise<void> {\n    try {\n      this.errorMsg = undefined;\n      // block users from closing the dialog while connecting\n      this._dialogRef.disableClose = true;\n      this._loadingService.register('system.connect');\n      const connection: ISQLEConnection = this.connectionType\n        ? { system: this.system, creds: btoa(this.username + ':' + this.password) }\n        : { system: this.system };\n\n      if (this._connectionService.exists(connection)) {\n        await this._connectionService.setAsCurrent(connection).toPromise();\n      } else {\n        await this._connectionService.addAndSetAsCurrent(connection).toPromise();\n      }\n\n      this._dialogRef.close(connection);\n    } catch (error) {\n      this.errorMsg = error.message;\n    } finally {\n      this._connectionAttempt$.next();\n      // allow users to close dialog again\n      this._dialogRef.disableClose = false;\n      this._loadingService.resolve('system.connect');\n    }\n  }\n\n  cancel(): void {\n    this._dialogRef.close();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport { CovalentLoadingModule } from '@covalent/core/loading';\nimport { CovalentMessageModule } from '@covalent/core/message';\n\nimport { VantageSystemModule } from '@td-vantage/ui-platform/system';\n\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { VANTAGE_CONNECTION_PROVIDER } from './connection.service';\nimport { VANTAGE_DICTIONARY_PROVIDER } from './dictionary.service';\nimport { VANTAGE_QUERY_PROVIDER } from './query.service';\nimport { VANTAGE_SPOOLED_QUERY_PROVIDER } from './spooled-query.service';\n\nimport { VantageCredentialsDialogComponent } from './credentials-dialog/credentials-dialog.component';\n\n@NgModule({\n  declarations: [VantageCredentialsDialogComponent],\n  exports: [VantageCredentialsDialogComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    MatCardModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatRadioModule,\n    MatIconModule,\n    CovalentLoadingModule,\n    CovalentMessageModule,\n    VantageSystemModule,\n    TranslateModule,\n  ],\n  providers: [\n    VANTAGE_CONNECTION_PROVIDER,\n    VANTAGE_DICTIONARY_PROVIDER,\n    VANTAGE_QUERY_PROVIDER,\n    VANTAGE_SPOOLED_QUERY_PROVIDER,\n  ],\n})\nexport class VantageSQLEModule {}\n"],"names":[],"mappings":"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"}