{"version":3,"file":"td-vantage-ui-platform-testing-cypress.js","sources":["ng://@td-vantage/ui-platform/testing/cypress/cypress.ts"],"sourcesContent":["/// <reference types=\"cypress\" />\n\nconst BASE_URL: string = Cypress.config('baseUrl'); // ex: http://localhost:4200\nconst LOGIN_URL: string = Cypress.env('loginUrl'); // ex: https://vantage.url.io/auth\n\nexport interface ILoginCredentials {\n  username: string;\n  password: string;\n}\n\n// inspired by https://vrockai.github.io/blog/2017/10/28/cypress-keycloak-intregration/\nexport function login({ username, password }: ILoginCredentials): void {\n  cy.request({\n    url: LOGIN_URL,\n  }).then((response: any) => {\n    const loginPageHtml: HTMLElement = document.createElement('html');\n    loginPageHtml.innerHTML = response.body;\n    const loginForm: HTMLFormElement = loginPageHtml.querySelector('#kc-form-login');\n    if (loginForm) {\n      cy.request({\n        form: true,\n        method: 'POST',\n        url: loginForm.action,\n        followRedirect: false,\n        body: {\n          username,\n          password,\n        },\n      }).then(() => {\n        _redirectToHome();\n      });\n    } else {\n      _redirectToHome();\n    }\n  });\n}\n\nexport function logout(): void {\n  cy.request('/api/user/logout');\n}\n\nfunction _redirectToHome(): void {\n  cy.visit(BASE_URL);\n  cy.url().should('not.include', LOGIN_URL);\n  cy.url().should('include', BASE_URL);\n}\n\nexport const SSO_COOKIES: string[] = ['USER_SSO_ID', 'XSRF-TOKEN'];\nexport function whiteListSSOCookies(): void {\n  Cypress.Cookies.defaults({ whitelist: SSO_COOKIES });\n}\n\nexport function waitForAngular(): Cypress.Chainable {\n  cy.get('[ng-version]').should('exist');\n  return cy.window().then((win: Window) => {\n    return new Cypress.Promise(\n      (resolve: (thenableOrResult?: {} | PromiseLike<{}>) => void, reject: (error?: any) => void) => {\n        const testabilities: any = win['getAllAngularTestabilities']();\n        if (!testabilities) {\n          return reject(new Error('No testabilities. Is Angular loaded?'));\n        }\n        let count: number = testabilities.length;\n        testabilities.forEach((testability: any) =>\n          testability.whenStable(() => {\n            count--;\n            if (count !== 0) {\n              return;\n            }\n            resolve();\n          }),\n        );\n      },\n    );\n  });\n}\n"],"names":[],"mappings":";;;;;;;;IAEM,QAAQ,GAAW,OAAO,CAAC,MAAM,CAAC,SAAS,CAAC;;;IAC5C,SAAS,GAAW,OAAO,CAAC,GAAG,CAAC,UAAU,CAAC;;;;AAEjD,gCAGC;;;IAFC,qCAAiB;;IACjB,qCAAiB;;;;;;;AAInB,SAAgB,KAAK,CAAC,EAAyC;QAAvC,sBAAQ,EAAE,sBAAQ;IACxC,EAAE,CAAC,OAAO,CAAC;QACT,GAAG,EAAE,SAAS;KACf,CAAC,CAAC,IAAI;;;;IAAC,UAAC,QAAa;;YACd,aAAa,GAAgB,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC;QACjE,aAAa,CAAC,SAAS,GAAG,QAAQ,CAAC,IAAI,CAAC;;YAClC,SAAS,GAAoB,aAAa,CAAC,aAAa,CAAC,gBAAgB,CAAC;QAChF,IAAI,SAAS,EAAE;YACb,EAAE,CAAC,OAAO,CAAC;gBACT,IAAI,EAAE,IAAI;gBACV,MAAM,EAAE,MAAM;gBACd,GAAG,EAAE,SAAS,CAAC,MAAM;gBACrB,cAAc,EAAE,KAAK;gBACrB,IAAI,EAAE;oBACJ,QAAQ,UAAA;oBACR,QAAQ,UAAA;iBACT;aACF,CAAC,CAAC,IAAI;;;YAAC;gBACN,eAAe,EAAE,CAAC;aACnB,EAAC,CAAC;SACJ;aAAM;YACL,eAAe,EAAE,CAAC;SACnB;KACF,EAAC,CAAC;CACJ;;;;AAED,SAAgB,MAAM;IACpB,EAAE,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;CAChC;;;;AAED,SAAS,eAAe;IACtB,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IACnB,EAAE,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;IAC1C,EAAE,CAAC,GAAG,EAAE,CAAC,MAAM,CAAC,SAAS,EAAE,QAAQ,CAAC,CAAC;CACtC;;AAED,IAAa,WAAW,GAAa,CAAC,aAAa,EAAE,YAAY,CAAC;;;;AAClE,SAAgB,mBAAmB;IACjC,OAAO,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,SAAS,EAAE,WAAW,EAAE,CAAC,CAAC;CACtD;;;;AAED,SAAgB,cAAc;IAC5B,EAAE,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACvC,OAAO,EAAE,CAAC,MAAM,EAAE,CAAC,IAAI;;;;IAAC,UAAC,GAAW;QAClC,OAAO,IAAI,OAAO,CAAC,OAAO;;;;;QACxB,UAAC,OAA0D,EAAE,MAA6B;;gBAClF,aAAa,GAAQ,GAAG,CAAC,4BAA4B,CAAC,EAAE;YAC9D,IAAI,CAAC,aAAa,EAAE;gBAClB,OAAO,MAAM,CAAC,IAAI,KAAK,CAAC,sCAAsC,CAAC,CAAC,CAAC;aAClE;;gBACG,KAAK,GAAW,aAAa,CAAC,MAAM;YACxC,aAAa,CAAC,OAAO;;;;YAAC,UAAC,WAAgB;gBACrC,OAAA,WAAW,CAAC,UAAU;;;gBAAC;oBACrB,KAAK,EAAE,CAAC;oBACR,IAAI,KAAK,KAAK,CAAC,EAAE;wBACf,OAAO;qBACR;oBACD,OAAO,EAAE,CAAC;iBACX,EAAC;aAAA,EACH,CAAC;SACH,EACF,CAAC;KACH,EAAC,CAAC;CACJ;;;;;;;;;;;;;;"}