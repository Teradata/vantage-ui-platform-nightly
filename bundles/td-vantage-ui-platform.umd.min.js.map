{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@td-vantage/ui-platform/audit/audit.service.ts","ng://@td-vantage/ui-platform/audit/audit.module.ts","ng://@td-vantage/ui-platform/notification/smtp/smtp.service.ts","ng://@td-vantage/ui-platform/notification/notification.module.ts","ng://@td-vantage/ui-platform/system/system.service.ts","ng://@td-vantage/ui-platform/system/system.module.ts","ng://@td-vantage/ui-platform/user/ldap/ldap.service.ts","ng://@td-vantage/ui-platform/user/user/user.service.ts","ng://@td-vantage/ui-platform/user/group/group.service.ts","ng://@td-vantage/ui-platform/user/user.module.ts","ng://@td-vantage/ui-platform/sqle/query.service.ts","ng://@td-vantage/ui-platform/sqle/dictionary.service.ts","ng://@td-vantage/ui-platform/sqle/connection.service.ts","ng://@td-vantage/ui-platform/sqle/sqle.module.ts","ng://@td-vantage/ui-platform/utilities/user-feedback/error/error.service.ts","ng://@td-vantage/ui-platform/utilities/user-feedback/toast/toast.service.ts","ng://@td-vantage/ui-platform/utilities/user-feedback/user-feedback.module.ts","ng://@td-vantage/ui-platform/utilities/theme/theme.service.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__generator","thisArg","body","f","y","t","g","_","label","sent","trys","ops","next","verb","throw","return","Symbol","iterator","this","n","v","op","TypeError","call","done","value","pop","push","e","step","VantageAuditService","prototype","query","params","response","pipe","map","res","total","headers","get","data","create","id","health","catchError","error","of","TdGET","path","options","observe","TdQueryParams","TdResponse","HttpParams","Observable","TdPOST","TdBody","TdParam","TdHttp","baseUrl","baseHeaders","HttpHeaders","Accept","VANTAGE_AUDIT_PROVIDER_FACTORY","parent","VANTAGE_AUDIT_PROVIDER","provide","deps","Optional","SkipSelf","useFactory","VantageAuditModule","NgModule","args","imports","CommonModule","providers","VantageSMTPService","delete","TdPUT","TdDELETE","VANTAGE_SMTP_PROVIDER_FACTORY","VANTAGE_SMTP_PROVIDER","VantageNotificationModule","Teradata","Aster","Presto","VANTAGE_SYSTEMS_TYPES","SystemType","VantageSystemService","system","update","test","VANTAGE_SYSTEM_PROVIDER_FACTORY","VANTAGE_SYSTEM_PROVIDER","VantageSystemModule","VantageLDAPService","status","TdPATCH","VANTAGE_LDAP_PROVIDER_FACTORY","VANTAGE_LDAP_PROVIDER","VantageUserService","queryParams","VANTAGE_USER_PROVIDER_FACTORY","VANTAGE_USER_PROVIDER","VantageGroupService","VANTAGE_GROUP_PROVIDER_FACTORY","VANTAGE_GROUP_PROVIDER","VantageUserModule","VantageQueryService","_httpClient","querySystem","connection","payload","append","creds","set","logMech","system_attributes","attributes","log_mech","clientId","post","nickname","resultSet","getTableInfo","databaseName","tableName","getViewInfo","viewName","getQuery","requestId","getQueries","sessionId","getQueryResult","queryId","deleteQuery","createSession","autoCommit","transactionMode","charSet","deleteSession","Injectable","HttpClient","VANTAGE_QUERY_PROVIDER_FACTORY","httpClient","VANTAGE_QUERY_PROVIDER","sysDatabases","VantageDictionaryService","_queryService","getViewHelp","database","view","_this","queryStr","columns","column","comment","remarks","type","columnType","name","table","switchMap","viewInfo","count","ddlStatement","results","forEach","row","cnt","columnName","getTableHelp","info","getDatabaseFunction","funcName","join","getDatabaseFunctions","sqlHelp","index","indexOf","substr","split","filter","func","getAnalyticalFunctions","objectname","getAnalyticalFunction","analyticalFunction","functionName","shortDescription","longDescription","usageSyntax","inputColumns","outputColumns","stringArray","undefined","resultSetPredicate","TableName","requestText","RequestText","CommentString","kind","TableKind","getStoredProcedures","getExternalStoredProcedures","getMacros","functionsvxPredicate","DatabaseName","SpecificName","paramNumber","NumParameters","paramDataTypes","ParameterDataTypes","commentString","getTableOperators","getTableFunctions","getForeignServers","getForeignSchemas","foreignServer","Schema","getForeignTables","schema","Table","getForeignColumns","Column","Type","getDatabases","schemaname","DBKind","permSpace","PermSpace","spoolSpace","SpoolSpace","tempSpace","TempSpace","getDatabaseObjects","databaseId","tablekind","tablename","DataBaseName","databasename","getTableColumns","tableId","search","searchStr","databases","objects","queries","dbQuery","objectQuery","columnQuery","objectType","newParent","nameSplit","objectName","VANTAGE_DICTIONARY_PROVIDER_FACTORY","queryService","VANTAGE_DICTIONARY_PROVIDER","VantageConnectionService","JSON","parse","sessionStorage","getItem","disconnect","removeItem","connect","_arguments","generator","timeout","retry","toPromise","_a","store","P","Promise","resolve","reject","fulfilled","rejected","result","then","apply","setItem","stringify","VANTAGE_CONNECTION_PROVIDER_FACTORY","VANTAGE_CONNECTION_PROVIDER","VantageSQLEModule","VantageError","VantageErrorService","_dialogService","_translate","open","config","title","instant","message","disableClose","closeButton","toString","openAlert","TdDialogService","TranslateService","VANTAGE_ERROR_PROVIDER_FACTORY","dialogService","translate","VANTAGE_ERROR_PROVIDER","VantageToastService","_snackBarService","_media","time","duration","horizontalPosition","MatSnackBar","TdMediaService","VANTAGE_TOAST_PROVIDER_FACTORY","snackBar","media","VANTAGE_TOAST_PROVIDER","VantageUserFeedbackModule","MatSnackBarModule","CovalentDialogsModule","CovalentMediaModule","THEME_LOCAL_STORAGE_KEY","DARK","LIGHT","VantageThemeService","_document","rendererFactory","_activeThemeSubject","BehaviorSubject","localStorage","activeTheme$","asObservable","_renderer2","createRenderer","fromEvent","window","event","subscribe","applyTheme","getValue","theme","activeTheme","VantageTheme","applyLightTheme","applyDarkTheme","removeClass","querySelector","addClass","providedIn","Inject","DOCUMENT","RendererFactory2","None"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import { Optional, SkipSelf, Provider } from '@angular/core';\nimport { HttpParams, HttpHeaders, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nimport { TdHttp, TdGET, TdPOST, TdParam, TdBody, TdResponse, TdQueryParams } from '@covalent/http';\n\nexport interface IAuditLog {\n  action?: string;\n  component?: string;\n  correlation_id?: string;\n  details?: string;\n  id?: number;\n  logtime?: any;\n  message?: string;\n  result?: boolean;\n  username?: string;\n}\n\n@TdHttp({\n  baseUrl: '/api/audit',\n  baseHeaders: new HttpHeaders({ Accept: 'application/json' }),\n})\nexport class VantageAuditService {\n  @TdGET({\n    path: '/audit/messages',\n    options: {\n      observe: 'response',\n    },\n  })\n  query(\n    @TdQueryParams() params?: HttpParams,\n    @TdResponse() response?: Observable<HttpResponse<any>>,\n  ): Observable<{ total: number; data: IAuditLog[] }> {\n    return response.pipe(\n      map((res: HttpResponse<any>) => {\n        return {\n          total: +res.headers.get('X-Total'),\n          data: <IAuditLog[]>res.body,\n        };\n      }),\n    );\n  }\n\n  @TdPOST({\n    path: '/audit/messages',\n  })\n  create(@TdBody() body: IAuditLog, @TdResponse() response?: Observable<IAuditLog>): Observable<IAuditLog> {\n    return response;\n  }\n\n  @TdGET({\n    path: '/audit/messages/:id',\n  })\n  get(@TdParam('id') id: number | string, @TdResponse() response?: Observable<IAuditLog>): Observable<IAuditLog> {\n    return response;\n  }\n\n  @TdGET({\n    path: '/health',\n  })\n  health(@TdResponse() response?: Observable<HttpResponse<any>>): Observable<boolean> {\n    return response.pipe(\n      catchError((error: HttpErrorResponse) => {\n        return of(false);\n      }),\n      map((res: HttpResponse<any>) => {\n        return !!res;\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_AUDIT_PROVIDER_FACTORY(parent: VantageAuditService): VantageAuditService {\n  return parent || new VantageAuditService();\n}\n\nexport const VANTAGE_AUDIT_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageAuditService,\n  deps: [[new Optional(), new SkipSelf(), VantageAuditService]],\n  useFactory: VANTAGE_AUDIT_PROVIDER_FACTORY,\n};\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VANTAGE_AUDIT_PROVIDER } from './audit.service';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [VANTAGE_AUDIT_PROVIDER],\n})\nexport class VantageAuditModule {}\n","import { Provider, Optional, SkipSelf } from '@angular/core';\nimport { HttpHeaders, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nimport { TdHttp, TdGET, TdPUT, TdDELETE, TdBody, TdResponse } from '@covalent/http';\n\nexport interface ISMTPConfig {\n  server?: string;\n  port?: number;\n  reply_address?: string;\n  smtp_username?: string;\n  smtp_password?: string;\n  use_ssl?: boolean;\n  anon_logon?: boolean;\n  server_timeout?: number;\n}\n\n@TdHttp({\n  baseUrl: '/api/notification',\n  baseHeaders: new HttpHeaders({ Accept: 'application/json' }),\n})\nexport class VantageSMTPService {\n  @TdPUT({\n    path: '/smtp-config',\n  })\n  create(@TdBody() body: ISMTPConfig, @TdResponse() response?: Observable<ISMTPConfig>): Observable<ISMTPConfig> {\n    return response;\n  }\n\n  @TdGET({\n    path: '/smtp-config',\n  })\n  query(@TdResponse() response?: Observable<ISMTPConfig>): Observable<ISMTPConfig> {\n    return response;\n  }\n\n  @TdDELETE({\n    path: '/smtp-config',\n  })\n  delete(@TdResponse() response?: Observable<void>): Observable<void> {\n    return response;\n  }\n\n  @TdGET({\n    path: '/health',\n  })\n  health(@TdResponse() response?: Observable<HttpResponse<any>>): Observable<boolean> {\n    return response.pipe(\n      catchError((error: HttpErrorResponse) => {\n        return of(false);\n      }),\n      map((res: HttpResponse<any>) => {\n        return !!res;\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_SMTP_PROVIDER_FACTORY(parent: VantageSMTPService): VantageSMTPService {\n  return parent || new VantageSMTPService();\n}\n\nexport const VANTAGE_SMTP_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageSMTPService,\n  deps: [[new Optional(), new SkipSelf(), VantageSMTPService]],\n  useFactory: VANTAGE_SMTP_PROVIDER_FACTORY,\n};\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VANTAGE_SMTP_PROVIDER } from './smtp/smtp.service';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [VANTAGE_SMTP_PROVIDER],\n})\nexport class VantageNotificationModule {}\n","import { Optional, SkipSelf, Provider } from '@angular/core';\nimport { HttpParams, HttpHeaders, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nimport { TdHttp, TdGET, TdPUT, TdPOST, TdDELETE, TdParam, TdBody, TdResponse, TdQueryParams } from '@covalent/http';\n\n/*\n * These interfaces are duplicated in the system and the query service.\n * However, within the system service, SystemType includes Aster & Presto.\n * Whereas in the query service, they are excluded.\n * TODO: DRY this up\n */\nexport enum SystemType {\n  Teradata = 'TERADATA',\n  Aster = 'ASTER',\n  Presto = 'PRESTO',\n}\n\nexport const VANTAGE_SYSTEMS_TYPES: SystemType[] = [SystemType.Teradata, SystemType.Aster, SystemType.Presto];\n\nexport interface ISystemAttributes {\n  attributes?: any;\n}\n\nexport interface IAbstractSystem {\n  host?: string;\n  port?: number;\n  system_type?: SystemType;\n  catalog?: string;\n  schema?: string;\n}\n\nexport interface ISystem extends IAbstractSystem {\n  attributes?: string;\n  data_center?: string;\n  environment?: string;\n  id?: string;\n  nickname?: string;\n  platform_id?: number;\n  system_attributes?: ISystemAttributes;\n  version?: string;\n}\n\nexport interface ITestSystem extends IAbstractSystem {\n  account?: string;\n  default_char_set?: string;\n  default_database?: string;\n  log_mech?: string;\n  password?: string;\n  username?: string;\n}\n\n@TdHttp({\n  baseUrl: '/api/system',\n  baseHeaders: new HttpHeaders({ Accept: 'application/json' }),\n})\nexport class VantageSystemService {\n  @TdGET({\n    path: '/health',\n  })\n  health(@TdResponse() response?: Observable<HttpResponse<any>>): Observable<boolean> {\n    return response.pipe(\n      catchError((error: HttpErrorResponse) => {\n        return of(false);\n      }),\n      map((res: HttpResponse<any>) => {\n        return !!res;\n      }),\n    );\n  }\n\n  @TdGET({\n    path: '/systems',\n    options: {\n      observe: 'response',\n    },\n  })\n  query(\n    @TdQueryParams() params?: HttpParams,\n    @TdResponse() response?: Observable<HttpResponse<any>>,\n  ): Observable<{ total: number; data: ISystem[] }> {\n    return response.pipe(\n      map((res: HttpResponse<any>) => {\n        return {\n          total: +res.headers.get('X-Total'),\n          data: <ISystem[]>res.body,\n        };\n      }),\n    );\n  }\n\n  @TdGET({\n    path: '/systems/:id',\n  })\n  get(@TdParam('id') id: string | number, @TdResponse() response?: Observable<ISystem>): Observable<ISystem> {\n    return response;\n  }\n\n  @TdPOST({\n    path: '/systems',\n  })\n  create(@TdBody() system: ISystem, @TdResponse() response?: Observable<ISystem>): Observable<ISystem> {\n    return response;\n  }\n\n  @TdPUT({\n    path: '/systems/:id',\n  })\n  update(\n    @TdParam('id') id: string,\n    @TdBody() system: ISystem,\n    @TdResponse() response?: Observable<ISystem>,\n  ): Observable<ISystem> {\n    return response;\n  }\n\n  @TdDELETE({\n    path: '/systems/:id',\n  })\n  delete(@TdParam('id') id: string, @TdResponse() response?: Observable<void>): Observable<void> {\n    return response;\n  }\n\n  @TdPOST({\n    path: '/testsystem',\n  })\n  test(@TdBody() system: ITestSystem, @TdResponse() response?: Observable<HttpResponse<any>>): Observable<boolean> {\n    return response.pipe(\n      map((res: HttpResponse<any>) => {\n        return true;\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_SYSTEM_PROVIDER_FACTORY(parent: VantageSystemService): VantageSystemService {\n  return parent || new VantageSystemService();\n}\n\nexport const VANTAGE_SYSTEM_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageSystemService,\n  deps: [[new Optional(), new SkipSelf(), VantageSystemService]],\n  useFactory: VANTAGE_SYSTEM_PROVIDER_FACTORY,\n};\n","import { NgModule, Type, InjectionToken } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VANTAGE_SYSTEM_PROVIDER } from './system.service';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [VANTAGE_SYSTEM_PROVIDER],\n})\nexport class VantageSystemModule {}\n","import { Provider, Optional, SkipSelf } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { TdHttp, TdGET, TdPUT, TdPOST, TdPATCH, TdDELETE, TdParam, TdBody, TdResponse } from '@covalent/http';\n\nexport enum LDAPEncription {\n  None = 'NONE',\n}\n\nexport interface ILDAPConfig {\n  allowed_groups?: string[];\n  base_dn?: string;\n  config_id?: number;\n  connectionUrl?: string;\n  email_field?: string;\n  encryption?: LDAPEncription;\n  group_id_field?: string;\n  groups_base_dn?: string;\n  id_field?: string;\n  member_field?: string;\n  member_of_field?: string;\n  name_field?: string;\n  port?: number;\n  search_pass?: string;\n  search_user?: string;\n  server?: string;\n  url?: string;\n}\n\n@TdHttp({\n  baseUrl: '/api/user/ldap/config',\n  baseHeaders: new HttpHeaders({ Accept: 'application/json' }),\n})\nexport class VantageLDAPService {\n  @TdGET({\n    path: '/',\n  })\n  query(@TdResponse() response?: Observable<ILDAPConfig[]>): Observable<ILDAPConfig[]> {\n    return response;\n  }\n\n  @TdPOST({\n    path: '/',\n  })\n  create(@TdBody() body: ILDAPConfig, @TdResponse() response?: Observable<ILDAPConfig>): Observable<ILDAPConfig> {\n    return response;\n  }\n\n  @TdPATCH({\n    path: '/:id',\n  })\n  update(\n    @TdParam('id') id: string | number,\n    @TdBody() body: ILDAPConfig,\n    @TdResponse() response?: Observable<ILDAPConfig>,\n  ): Observable<ILDAPConfig> {\n    return response;\n  }\n\n  @TdDELETE({\n    path: '/:id',\n  })\n  delete(@TdParam('id') id: string | number, @TdResponse() response?: Observable<void>): Observable<void> {\n    return response;\n  }\n\n  @TdPOST({\n    path: '/verify',\n    options: {\n      observe: 'response',\n    },\n  })\n  test(@TdBody() body: ILDAPConfig, @TdResponse() response?: Observable<boolean>): Observable<boolean> {\n    return response.pipe(\n      map((res: any) => {\n        return res.status === 200;\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_LDAP_PROVIDER_FACTORY(parent: VantageLDAPService): VantageLDAPService {\n  return parent || new VantageLDAPService();\n}\n\nexport const VANTAGE_LDAP_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageLDAPService,\n  deps: [[new Optional(), new SkipSelf(), VantageLDAPService]],\n  useFactory: VANTAGE_LDAP_PROVIDER_FACTORY,\n};\n","import { Provider, SkipSelf, Optional } from '@angular/core';\nimport { HttpHeaders, HttpResponse, HttpParams } from '@angular/common/http';\nimport { TdHttp, TdGET, TdResponse, TdParam, TdQueryParams } from '@covalent/http';\nimport { Observable, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nexport interface IUser {\n  username?: string;\n  password?: string;\n  email?: string;\n  local?: boolean;\n  admin?: boolean;\n  groups?: string[];\n  display_name?: string;\n  access_token?: string;\n  expires_at?: number;\n}\n\n@TdHttp({\n  baseUrl: '/api/user',\n  baseHeaders: new HttpHeaders({\n    Accept: 'application/json',\n  }),\n})\nexport class VantageUserService {\n  /**\n   * get all users\n   */\n  @TdGET({\n    path: '/users',\n    options: {\n      observe: 'response',\n    },\n  })\n  query(\n    @TdQueryParams() queryParams?: HttpParams,\n    @TdResponse() response?: Observable<HttpResponse<any>>,\n  ): Observable<{ total: number; data: IUser[] }> {\n    return response.pipe(\n      catchError((error: Response) => {\n        return of(error);\n      }),\n      map((res: HttpResponse<any>) => {\n        return {\n          total: +res.headers.get('X-Total'),\n          data: <IUser[]>res.body,\n        };\n      }),\n    );\n  }\n\n  /**\n   * gets a single users information\n   */\n  @TdGET({\n    path: '/users/:username',\n    options: {\n      observe: 'response',\n    },\n  })\n  get(@TdParam('username') id: string, @TdResponse() response?: Observable<HttpResponse<any>>): Observable<IUser> {\n    return response.pipe(\n      catchError((error: Response) => {\n        return of(error);\n      }),\n      map((res: HttpResponse<IUser>) => {\n        return res.body;\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_USER_PROVIDER_FACTORY(parent: VantageUserService): VantageUserService {\n  return parent || new VantageUserService();\n}\n\nexport const VANTAGE_USER_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageUserService,\n  deps: [[new Optional(), new SkipSelf(), VantageUserService]],\n  useFactory: VANTAGE_USER_PROVIDER_FACTORY,\n};\n","import { Provider, SkipSelf, Optional } from '@angular/core';\nimport { HttpHeaders, HttpResponse, HttpParams } from '@angular/common/http';\nimport { TdHttp, TdGET, TdResponse, TdQueryParams } from '@covalent/http';\nimport { Observable, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nexport interface IGroup {\n  name?: string;\n  description?: string;\n  id?: string;\n  display_name?: string;\n  users?: string[];\n}\n\n@TdHttp({\n  baseUrl: '/api/user',\n  baseHeaders: new HttpHeaders({\n    Accept: 'application/json',\n  }),\n})\nexport class VantageGroupService {\n  /**\n   * get groups in paginated form via query string\n   */\n  @TdGET({\n    path: '/groups',\n    options: {\n      observe: 'response',\n    },\n  })\n  query(\n    @TdQueryParams() queryParams?: HttpParams,\n    @TdResponse() response?: Observable<HttpResponse<any>>,\n  ): Observable<{ total: number; data: IGroup[] }> {\n    return response.pipe(\n      catchError((error: Response) => {\n        return of(error);\n      }),\n      map((res: HttpResponse<any>) => {\n        return {\n          total: +res.headers.get('X-Total'),\n          data: <IGroup[]>res.body,\n        };\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_GROUP_PROVIDER_FACTORY(parent: VantageGroupService): VantageGroupService {\n  return parent || new VantageGroupService();\n}\n\nexport const VANTAGE_GROUP_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageGroupService,\n  deps: [[new Optional(), new SkipSelf(), VantageGroupService]],\n  useFactory: VANTAGE_GROUP_PROVIDER_FACTORY,\n};\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VANTAGE_LDAP_PROVIDER } from './ldap/ldap.service';\nimport { VANTAGE_USER_PROVIDER } from './user/user.service';\nimport { VANTAGE_GROUP_PROVIDER } from './group/group.service';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [VANTAGE_LDAP_PROVIDER, VANTAGE_USER_PROVIDER, VANTAGE_GROUP_PROVIDER],\n})\nexport class VantageUserModule {}\n","import { Injectable, Provider, Optional, SkipSelf } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\n/*\n * These interfaces are duplicated in the system and the query service.\n * However, within the system service, SystemType includes Aster & Presto.\n * Whereas in the query service, they are excluded.\n * TODO: DRY this up\n */\nenum SystemType {\n  Teradata = 'TERADATA',\n  // TODO: remove the following 2\n  Aster = 'ASTER',\n  Presto = 'PRESTO',\n}\ninterface ISystemAttributes {\n  attributes?: any;\n}\ninterface IAbstractSystem {\n  host?: string;\n  port?: number;\n  system_type?: SystemType;\n  catalog?: string;\n  schema?: string;\n}\ninterface ISystem extends IAbstractSystem {\n  attributes?: string;\n  data_center?: string;\n  environment?: string;\n  id?: string;\n  nickname?: string;\n  platform_id?: number;\n  system_attributes?: ISystemAttributes;\n  version?: string;\n}\n\nexport interface IQueryPayload {\n  query: string;\n  session?: string;\n  logMech?: string;\n  rowOffset?: number;\n  rowLimit?: number;\n  format?: string; // (default)-object, array, or csv\n  includeColumns?: boolean;\n  includeColumnsTypes?: boolean;\n  spooledResultSet?: boolean;\n  clientId?: string;\n}\n\nexport interface IQueryResultSet {\n  queueDuration: number;\n  queryDuration: number;\n  results: IQueryResultSetResult[];\n}\n\nexport interface IQueryResultSetResult {\n  data: { [name: string]: string }[];\n  resultSet: boolean;\n  rowCount: number;\n  rowLimitExceeded: boolean;\n  columns?: { [name: string]: string }[];\n}\n\nexport interface IQueryInfo {\n  success?: boolean;\n  logTime?: string;\n  error?: any;\n  resultSet?: IQueryResultSet;\n}\n\nexport interface ISQLEConnection {\n  system: ISystem;\n  creds?: string;\n}\n\n@Injectable()\nexport class VantageQueryService {\n  constructor(private _httpClient: HttpClient) {}\n\n  querySystem(connection: ISQLEConnection, payload: IQueryPayload): Observable<IQueryResultSet> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n      payload.logMech = connection.system.system_attributes.attributes.log_mech || 'DEFAULT';\n    } else {\n      payload.logMech = 'JWT';\n    }\n    payload.clientId = 'VANTAGE.EDITOR';\n    const request: Observable<object> = this._httpClient.post(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries',\n      payload,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getTableInfo(connection: ISQLEConnection, databaseName: string, tableName: string): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n\n    const request: Observable<object> = this._httpClient.get(\n      `/api/query/systems/${connection.system.nickname}/databases/${databaseName}/tables/${tableName}`,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getViewInfo(connection: ISQLEConnection, databaseName: string, viewName: string): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n\n    const request: Observable<object> = this._httpClient.get(\n      `/api/query/systems/${connection.system.nickname}/databases/${databaseName}/views/${viewName}`,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getQuery(connection: ISQLEConnection, requestId: string): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._httpClient.get(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries/' + requestId,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: any) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getQueries(connection: ISQLEConnection, sessionId: string): Observable<IQueryResultSet> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._httpClient.get(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries?session=' + sessionId,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getQueryResult(connection: ISQLEConnection, queryId: string): Observable<IQueryResultSet> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._httpClient.get(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries/' + queryId + '/results',\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  deleteQuery(connection: ISQLEConnection, queryId: string): Observable<IQueryResultSet> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._httpClient.delete(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries/' + queryId,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  createSession(connection: ISQLEConnection): Observable<any> {\n    const payload: any = {\n      autoCommit: 'true',\n      transactionMode: 'TERA',\n      charSet: 'UTF8',\n    };\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n      payload.logMech = connection.system.system_attributes.attributes.log_mech || 'DEFAULT';\n    } else {\n      payload.logMech = 'JWT';\n    }\n    const request: Observable<object> = this._httpClient.post(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/sessions',\n      payload,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: any) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  deleteSession(connection: ISQLEConnection, sessionId: string): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._httpClient.delete(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/sessions/' + sessionId,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: any) => {\n        return resultSet;\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_QUERY_PROVIDER_FACTORY(\n  parent: VantageQueryService,\n  httpClient: HttpClient,\n): VantageQueryService {\n  return parent || new VantageQueryService(httpClient);\n}\n\nexport const VANTAGE_QUERY_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageQueryService,\n  deps: [[new Optional(), new SkipSelf(), VantageQueryService], HttpClient],\n  useFactory: VANTAGE_QUERY_PROVIDER_FACTORY,\n};\n","import { Injectable, SkipSelf, Optional, Provider } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nimport { VantageQueryService, IQueryResultSet, ISQLEConnection } from './query.service';\n\nexport const sysDatabases: string[] = [\n  'DBC',\n  'dbcmngr',\n  'SQLJ',\n  'SystemFe',\n  'SysAdmin',\n  'SYSBAR',\n  'SYSJDBC',\n  'SYSLIB',\n  'SYSUDTLIB',\n  'TDMaps',\n  'TD_SERVER_DB',\n  'TD_SYSFNLIB',\n  'TD_SYSXML',\n  'Sys_Calendar',\n];\n\nexport interface IDictionarySystem {\n  hostname?: string;\n  password?: string;\n  port?: number;\n  system_id?: string;\n  last_run?: string;\n  interval_minutes?: number;\n  enabled?: boolean;\n  last_attempt?: string;\n  in_collection?: boolean;\n  username?: string;\n}\n\nexport interface IDictionaryDatabase {\n  parent_name?: string;\n  size_bytes?: number;\n  system_id?: string;\n  name?: string;\n  id?: string;\n  type?: string;\n}\n\nexport interface IDictionaryDatabaseObject {\n  system_id?: string;\n  database_id?: string;\n  id?: string;\n  name?: string;\n  size_bytes?: number;\n  type?: string;\n  create_text?: string;\n}\n\nexport interface IDictionaryTableColumn {\n  system_id?: string;\n  database_id?: string;\n  table_id?: string;\n  id?: string;\n  name?: string;\n}\n\n/**\n * FunctionType\n * A - Aggregate\n * B - Aggregate and statistical\n * C - Contract function\n * D - External stored procedure\n * F - Scalar\n * H - User defined method\n * I - Internal type method\n * L - Table operator\n * R - Table Function\n * S - Statistical\n */\n\n/**\n * TableKind for dbc.tablesvx;\n * A - Aggregate function\n * B - Combined aggregate and ordered analytical function\n * C - Table operator parser contract function\n * D - JAR\n * E - External Stored Procedure\n * F - Standard Function\n * G - Trigger\n * H - Instance or contructor method\n * I - Join Index\n * J - Journal\n * K - Foreign Server Object\n * L - User defined table operator\n * M - Macro\n * N - Hash index\n * O - Table with no primary index and no partitioning\n * P - Stored Procedure\n * Q - Queue table\n * R - Table function\n * S - Ordered Analytical function\n * T - table with a primary index or primary AMP index, partitioning or both. Or a partioned table with NoPI;\n * U - User defined type\n * V - View\n * X - Authorization\n * Y - GLOP set\n * Z - UIF - User Installed File\n * 1 - A DATASET schema object created by CREATE SCHEMA\n * 2 - Functon alias object\n */\n\n/**\n * dbc.externalSPs\n * dbc.sessionInfovx\n */\n\n@Injectable()\nexport class VantageDictionaryService {\n  constructor(private _queryService: VantageQueryService) {}\n\n  getViewHelp(connection: ISQLEConnection, database: string, view: string): Observable<any> {\n    const queryStr: string = `\n      LOCK ROW FOR ACCESS\n      SELECT CAST(COUNT(*) AS BIGINT) as cnt\n      FROM ${database}.${view};\n      SHOW VIEW ${database}.${view};\n    `;\n\n    return this._queryService.getViewInfo(connection, database, view).pipe(\n      map((resultSet: any) => {\n        return resultSet.columns.map((column: any) => {\n          return {\n            comment: column.remarks,\n            type: 'column',\n            columnType: column.type,\n            name: column.name,\n            database: resultSet.database,\n            table: resultSet.name,\n          };\n        });\n      }),\n      switchMap((viewInfo: any) => {\n        return this._queryService\n          .querySystem(connection, {\n            query: queryStr,\n          })\n          .pipe(\n            map((resultSet: IQueryResultSet) => {\n              let ddlStatement: string = '';\n              resultSet.results[1].data.forEach((row: any) => {\n                ddlStatement += row['Request Text'];\n              });\n              let count: string;\n              resultSet.results[0].data.forEach((row: any) => {\n                count = row.cnt;\n              });\n\n              const columns: any[] = viewInfo.map((row: any) => {\n                return {\n                  columnName: row.name,\n                  type: row.columnType,\n                };\n              });\n\n              return {\n                database,\n                view,\n                columns,\n                count,\n                ddlStatement,\n              };\n            }),\n          );\n      }),\n    );\n  }\n\n  getTableHelp(connection: ISQLEConnection, database: string, table: string): Observable<any> {\n    const queryStr: string = `\n      LOCK ROW FOR ACCESS\n      SELECT CAST(COUNT(*) AS BIGINT) as cnt\n      FROM ${database}.${table};\n      SHOW TABLE ${database}.${table};\n    `;\n    return this._queryService.getTableInfo(connection, database, table).pipe(\n      map((resultSet: any) => {\n        return resultSet.columns.map((column: any) => {\n          return {\n            comment: column.remarks,\n            type: 'column',\n            columnType: column.type,\n            name: column.name,\n            database: resultSet.database,\n            table: resultSet.name,\n          };\n        });\n      }),\n      switchMap((info: any) => {\n        return this._queryService\n          .querySystem(connection, {\n            query: queryStr,\n          })\n          .pipe(\n            map((resultSet: IQueryResultSet) => {\n              let ddlStatement: string = '';\n              resultSet.results[1].data.forEach((row: any) => {\n                ddlStatement += row['Request Text'];\n              });\n              let count: string;\n              resultSet.results[0].data.forEach((row: any) => {\n                count = row.cnt;\n              });\n              const columns: any[] = info.map((row: any) => {\n                return {\n                  columnName: row.name,\n                  type: row.columnType,\n                };\n              });\n              return {\n                database,\n                table,\n                columns,\n                count,\n                ddlStatement,\n              };\n            }),\n          );\n      }),\n    );\n  }\n\n  getDatabaseFunction(connection: ISQLEConnection, funcName: string): Observable<any> {\n    const queryStr: string = `\n      HELP 'SQL ${funcName}';\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          const stringArray: string[] = resultSet.results[0].data.map((row: any) => {\n            return row['On-Line Help'];\n          });\n          return stringArray.join(' ');\n        }),\n      );\n  }\n\n  getDatabaseFunctions(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      HELP 'SQL';\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          const stringArray: string[] = resultSet.results[0].data.map((row: any) => {\n            return row['On-Line Help'];\n          });\n          let sqlHelp: string = stringArray.join(' ');\n          const index: number = sqlHelp.indexOf('FUNCTIONS') + 12;\n          sqlHelp = sqlHelp.substr(index, sqlHelp.length);\n          return sqlHelp\n            .split(' ')\n            .filter((func: string) => {\n              return func;\n            })\n            .map((func: string) => {\n              return {\n                name: func,\n              };\n            });\n        }),\n      );\n  }\n\n  getAnalyticalFunctions(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      HELP FOREIGN SCHEMA \"public\"@coprocessor;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            return {\n              name: row.objectname,\n            };\n          });\n        }),\n      );\n  }\n\n  getAnalyticalFunction(connection: ISQLEConnection, analyticalFunction: string): Observable<any> {\n    const queryStr: string = `\n      HELP FOREIGN FUNCTION \"public\".\"${analyticalFunction}\"@coprocessor;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          let functionName: string = '';\n          let shortDescription: string = '';\n          let longDescription: string = '';\n          let usageSyntax: string = '';\n          let inputColumns: string = '';\n          let outputColumns: string = '';\n          const functionOwner: string = '';\n          const creationTime: string = '';\n          const functionVersion: string = '';\n          const interfacesImplemented: string = '';\n          const stringArray: string[] = resultSet.results[0].data.map((row: any) => {\n            return row['Function Help'];\n          });\n          for (let index: number = 0; index < stringArray.length; index++) {\n            const value: string = stringArray[index];\n            if (value.indexOf('Function Name:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                functionName += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Short Description:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                shortDescription += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Long Description:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                longDescription += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Usage Syntax:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                usageSyntax += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Input Columns:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                inputColumns += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Output Columns:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                outputColumns += stringArray[index] + '\\n';\n              }\n            } else {\n              // Function Owner:\n              // Creation Time:\n              // Function Version:\n              // Interfaces Implemented:\n              if (stringArray.indexOf('') > -1) {\n                index = stringArray.indexOf('');\n                stringArray[index] = undefined;\n              }\n            }\n          }\n          return {\n            functionName,\n            shortDescription,\n            longDescription,\n            usageSyntax,\n            inputColumns,\n            outputColumns,\n          };\n        }),\n      );\n  }\n\n  resultSetPredicate(resultSet: IQueryResultSet): any {\n    return resultSet.results[0].data.map((row: any) => {\n      return {\n        name: row.TableName,\n        requestText: row.RequestText,\n        comment: row.CommentString,\n        kind: row.TableKind,\n      };\n    });\n  }\n\n  getStoredProcedures(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT DataBaseName, TableName, TableKind, RequestText, CommentString FROM dbc.tablesvx\n      WHERE TableKind = 'P'\n      ORDER BY TableName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.resultSetPredicate));\n  }\n\n  getExternalStoredProcedures(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT DataBaseName, TableName, TableKind, RequestText, CommentString FROM dbc.tablesvx\n      WHERE TableKind = 'E'\n      ORDER BY TableName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.resultSetPredicate));\n  }\n\n  getMacros(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT DataBaseName, TableName, TableKind, RequestText, CommentString FROM dbc.tablesvx\n      WHERE TableKind = 'M'\n      ORDER BY TableName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.resultSetPredicate));\n  }\n\n  functionsvxPredicate(resultSet: IQueryResultSet): any {\n    return resultSet.results[0].data.map((row: any) => {\n      return {\n        database: row.DatabaseName,\n        name: row.SpecificName,\n        paramNumber: row.NumParameters,\n        paramDataTypes: row.ParameterDataTypes,\n        requestText: row.RequestText,\n        commentString: row.CommentString,\n        kind: row.TableKind,\n      };\n    });\n  }\n\n  getTableOperators(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT func.DatabaseName, func.FunctionName, func.SpecificName, func.NumParameters,\n      func.ParameterDataTypes, tbl.RequestText, tbl.CommentString, tbl.TableKind\n      FROM dbc.functionsvx as func\n      INNER JOIN dbc.tablesvx as tbl\n      ON tbl.TableName = func.SpecificName\n      AND tbl.DataBaseName = func.DatabaseName\n      WHERE FunctionType = 'L'\n      ORDER BY func.FunctionName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.functionsvxPredicate));\n  }\n\n  getTableFunctions(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT func.DatabaseName, func.FunctionName, func.SpecificName, func.NumParameters,\n      func.ParameterDataTypes, tbl.RequestText, tbl.CommentString, tbl.TableKind\n      FROM dbc.functionsvx as func\n      INNER JOIN dbc.tablesvx as tbl\n      ON tbl.TableName = func.SpecificName\n      AND tbl.DataBaseName = func.DatabaseName\n      WHERE FunctionType = 'R'\n      ORDER BY func.FunctionName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.functionsvxPredicate));\n  }\n\n  getForeignServers(connection: ISQLEConnection): Observable<any[]> {\n    const queryStr: string = `\n      SELECT TableName, TableKind FROM DBC.TABLESVX\n      WHERE DATABASENAME = 'TD_SERVER_DB' AND\n      TABLEKIND = 'K' AND\n      TableName <> 'coprocesor';\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            return {\n              name: row.TableName,\n              kind: row.TableKind,\n            };\n          });\n        }),\n      );\n  }\n\n  getForeignSchemas(connection: ISQLEConnection, foreignServer: string): Observable<any[]> {\n    const queryStr: string = `\n      HELP FOREIGN SERVER ${foreignServer};\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: { Schema: string }) => {\n            return {\n              name: row.Schema,\n              kind: 'NONE',\n            };\n          });\n        }),\n      );\n  }\n\n  getForeignTables(connection: ISQLEConnection, foreignServer: string, schema: string): Observable<any[]> {\n    const queryStr: string = `\n      HELP FOREIGN DATABASE \"${schema}\"@${foreignServer};\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: { Table: string }) => {\n            return {\n              name: row.Table,\n              kind: 'NONE',\n            };\n          });\n        }),\n      );\n  }\n\n  getForeignColumns(\n    connection: ISQLEConnection,\n    foreignServer: string,\n    schema: string,\n    table: string,\n  ): Observable<any[]> {\n    const queryStr: string = `\n      HELP FOREIGN TABLE \"${schema}\".\"${table}\"@${foreignServer};\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: { Column: string; Type: string }) => {\n            return {\n              name: row.Column,\n              type: row.Type,\n            };\n          });\n        }),\n      );\n  }\n\n  getDatabases(connection: ISQLEConnection): Observable<any[]> {\n    const queryStr: string =\n      'SELECT databasename, PermSpace, SpoolSpace, TempSpace, CommentString, DBKind FROM dbc.databasesVX ORDER BY databasename;';\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            return {\n              name: row.DatabaseName || row.schemaname,\n              type: row.DBKind === 'U' ? 'user' : 'database',\n              permSpace: row.PermSpace,\n              spoolSpace: row.SpoolSpace,\n              tempSpace: row.TempSpace,\n              comment: row.CommentString,\n            };\n          });\n        }),\n      );\n  }\n\n  getDatabaseObjects(connection: ISQLEConnection, databaseId: string): Observable<any[]> {\n    const queryStr: string = `SELECT DataBaseName, TableName, TableKind, CommentString FROM dbc.tablesvx\n       WHERE TableKind in ('T', 'O', 'V') AND DataBaseName = '${databaseId}' ORDER BY TableName ASC;`;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            const type: string = row.TableKind || row.tablekind;\n            return {\n              kind: row.TableKind || row.tablekind,\n              type: type === 'V' ? 'view' : 'table',\n              name: row.TableName || row.tablename,\n              database: row.DataBaseName || row.databasename,\n              comment: row.CommentString,\n            };\n          });\n        }),\n      );\n  }\n\n  getTableColumns(type: string, connection: ISQLEConnection, databaseId: string, tableId: string): Observable<any> {\n    if (type === 'table') {\n      return this._queryService.getTableInfo(connection, databaseId, tableId).pipe(\n        map((resultSet: any) => {\n          return resultSet.columns.map((column: any) => {\n            return {\n              comment: column.remarks,\n              type: 'column',\n              columnType: column.type,\n              name: column.name,\n              database: resultSet.database,\n              table: resultSet.name,\n            };\n          });\n        }),\n      );\n    } else if (type === 'view') {\n      return this._queryService.getViewInfo(connection, databaseId, tableId).pipe(\n        map((resultSet: any) => {\n          return resultSet.columns.map((column: any) => {\n            return {\n              comment: column.remarks,\n              type: 'column',\n              columnType: column.type,\n              name: column.name,\n              database: resultSet.database,\n              table: resultSet.name,\n            };\n          });\n        }),\n      );\n    }\n  }\n\n  search(\n    connection: ISQLEConnection,\n    searchStr: string,\n    options: {\n      databases: boolean;\n      objects: boolean;\n      columns: boolean;\n    } = {\n      databases: true,\n      objects: true,\n      columns: true,\n    },\n  ): Observable<any[]> {\n    const queries: string[] = [];\n    if (options.databases) {\n      const dbQuery: string = `\n        SELECT\n            DatabaseName as objectName,\n            'database' as objectType,\n            DBKind as kind,\n            CommentString\n        FROM dbc.databasesvx\n        WHERE DatabaseName LIKE '%${searchStr}%'\n        AND DataBaseName NOT IN ('${sysDatabases.join(\"', '\")}')\n      `;\n      queries.push(dbQuery);\n    }\n    if (options.objects) {\n      const objectQuery: string = `\n        SELECT\n            DataBaseName || '~|~' || TableName as objectName,\n            'object' as objectType,\n            TableKind as kind,\n            CommentString\n        FROM dbc.tablesvx\n        WHERE TableKind in ('T', 'O', 'V')\n        AND TableName LIKE '%${searchStr}%'\n        AND DataBaseName NOT IN ('${sysDatabases.join(\"', '\")}')\n      `;\n      queries.push(objectQuery);\n    }\n    if (options.objects) {\n      const columnQuery: string = `\n        SELECT\n            DataBaseName || '~|~' || TableName || '~|~' || ColumnName as objectName,\n            'column' as objectType,\n            ColumnType as kind,\n            CommentString\n        FROM dbc.columnsVX\n        WHERE columnname LIKE '%${searchStr}%'\n        AND DataBaseName NOT IN ('${sysDatabases.join(\"', '\")}')\n      `;\n      queries.push(columnQuery);\n    }\n    const unionJoin: string = queries.join('UNION');\n    const queryStr: string = `\n      WITH quick_search AS (\n          ${unionJoin}\n      )\n      SELECT * FROM quick_search\n      ORDER BY 1\n      SAMPLE 100;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            let kind: string = row.kind;\n            // map to proper type/kind\n            if (row.objectType === 'column') {\n              kind = 'column';\n            } else if (row.objectType === 'database') {\n              kind = kind === 'D' ? 'database' : 'user';\n            } else {\n              kind = kind === 'V' ? 'view' : 'table';\n            }\n            const newParent: string[] = [];\n            // split name and parents..\n            const nameSplit: string[] = row.objectName.split('~|~');\n            for (let index: number = 0; index < nameSplit.length - 1; index++) {\n              newParent.push('\"' + nameSplit[index] + '\"');\n            }\n            return {\n              parent: newParent.join('.'),\n              name: nameSplit[nameSplit.length - 1],\n              kind,\n              type: row.objectType,\n              comment: row.CommentString,\n            };\n          });\n        }),\n      );\n  }\n}\n\nexport function VANTAGE_DICTIONARY_PROVIDER_FACTORY(\n  parent: VantageDictionaryService,\n  queryService: VantageQueryService,\n): VantageDictionaryService {\n  return parent || new VantageDictionaryService(queryService);\n}\n\nexport const VANTAGE_DICTIONARY_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageDictionaryService,\n  deps: [[new Optional(), new SkipSelf(), VantageDictionaryService], VantageQueryService],\n  useFactory: VANTAGE_DICTIONARY_PROVIDER_FACTORY,\n};\n","import { Injectable, Optional, SkipSelf, Provider } from '@angular/core';\nimport { retry, timeout } from 'rxjs/operators';\nimport { ISQLEConnection, VantageQueryService } from './query.service';\n\nconst CONNECTION_SESSION_KEY: string = 'vantage.editor.connection';\n\n@Injectable()\nexport class VantageConnectionService {\n  constructor(private _queryService: VantageQueryService) {}\n\n  public get current(): ISQLEConnection {\n    return JSON.parse(sessionStorage.getItem(CONNECTION_SESSION_KEY));\n  }\n\n  public disconnect(): void {\n    sessionStorage.removeItem(CONNECTION_SESSION_KEY);\n  }\n\n  public async connect(connection: ISQLEConnection): Promise<void> {\n    // clear connection before starting a new one\n    this.disconnect();\n    // test connection with SELECT 1\n    await this._queryService\n      .querySystem(connection, { query: 'SELECT 1;' })\n      .pipe(timeout(7000), retry(1))\n      .toPromise();\n    // if successful, save\n    this.store(connection);\n  }\n\n  private store({ system, creds }: ISQLEConnection): void {\n    sessionStorage.setItem(CONNECTION_SESSION_KEY, JSON.stringify({ system, creds }));\n  }\n}\n\nexport function VANTAGE_CONNECTION_PROVIDER_FACTORY(\n  parent: VantageConnectionService,\n  queryService: VantageQueryService,\n): VantageConnectionService {\n  return parent || new VantageConnectionService(queryService);\n}\n\nexport const VANTAGE_CONNECTION_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageConnectionService,\n  deps: [[new Optional(), new SkipSelf(), VantageConnectionService], VantageQueryService],\n  useFactory: VANTAGE_CONNECTION_PROVIDER_FACTORY,\n};\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VANTAGE_CONNECTION_PROVIDER } from './connection.service';\nimport { VANTAGE_DICTIONARY_PROVIDER } from './dictionary.service';\nimport { VANTAGE_QUERY_PROVIDER } from './query.service';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [VANTAGE_CONNECTION_PROVIDER, VANTAGE_DICTIONARY_PROVIDER, VANTAGE_QUERY_PROVIDER],\n})\nexport class VantageSQLEModule {}\n","import { Injectable, Provider, SkipSelf, Optional } from '@angular/core';\n\nimport { MatDialogRef } from '@angular/material/dialog';\n\nimport { TdDialogService, IAlertConfig, TdAlertDialogComponent } from '@covalent/core/dialogs';\n\nimport { TranslateService } from '@ngx-translate/core';\n\nexport class VantageError {\n  message: string;\n  error: number;\n}\n\n@Injectable()\nexport class VantageErrorService {\n  constructor(private _dialogService: TdDialogService, private _translate: TranslateService) {}\n\n  open(error: VantageError): MatDialogRef<TdAlertDialogComponent> {\n    if (error) {\n      const config: IAlertConfig = {\n        title: this._translate.instant('THERE_WAS_A_PROBLEM'),\n        message: error.message,\n        disableClose: true,\n        closeButton: this._translate.instant('CLOSE'),\n      };\n      if (error.error) {\n        config.message += ` (${error.error.toString()})`;\n      }\n      if (config.message || config.title) {\n        return this._dialogService.openAlert(config);\n      }\n    }\n  }\n}\n\nexport function VANTAGE_ERROR_PROVIDER_FACTORY(\n  parent: VantageErrorService,\n  dialogService: TdDialogService,\n  translate: TranslateService,\n): VantageErrorService {\n  return parent || new VantageErrorService(dialogService, translate);\n}\n\nexport const VANTAGE_ERROR_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageErrorService,\n  deps: [[new Optional(), new SkipSelf(), VantageErrorService], TdDialogService, TranslateService],\n  useFactory: VANTAGE_ERROR_PROVIDER_FACTORY,\n};\n","import { Injectable, Provider, Optional, SkipSelf } from '@angular/core';\n\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\nimport { TdMediaService } from '@covalent/core/media';\n\n@Injectable()\nexport class VantageToastService {\n  constructor(private _snackBarService: MatSnackBar, private _media: TdMediaService) {}\n\n  open(message: string, time: number = 3000): void {\n    if (message) {\n      this._snackBarService.open(message, undefined, {\n        duration: time,\n        horizontalPosition: this._media && this._media.query('gt-sm') ? 'end' : 'center',\n      });\n    }\n  }\n}\n\nexport function VANTAGE_TOAST_PROVIDER_FACTORY(\n  parent: VantageToastService,\n  snackBar: MatSnackBar,\n  media: TdMediaService,\n): VantageToastService {\n  return parent || new VantageToastService(snackBar, media);\n}\n\nexport const VANTAGE_TOAST_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageToastService,\n  deps: [[new Optional(), new SkipSelf(), VantageToastService], MatSnackBar, [new Optional(), TdMediaService]],\n  useFactory: VANTAGE_TOAST_PROVIDER_FACTORY,\n};\n","import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\n\nimport { CovalentDialogsModule } from '@covalent/core/dialogs';\nimport { CovalentMediaModule } from '@covalent/core/media';\n\nimport { VANTAGE_ERROR_PROVIDER } from './error/error.service';\nimport { VANTAGE_TOAST_PROVIDER } from './toast/toast.service';\n\n@NgModule({\n  imports: [CommonModule, MatSnackBarModule, CovalentDialogsModule, CovalentMediaModule],\n  providers: [VANTAGE_ERROR_PROVIDER, VANTAGE_TOAST_PROVIDER],\n})\nexport class VantageUserFeedbackModule {}\n","import { Injectable, Renderer2, Inject, RendererFactory2 } from '@angular/core';\nimport { fromEvent, BehaviorSubject, Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n\nconst THEME_LOCAL_STORAGE_KEY: string = 'vantage.theme';\n\nexport enum VantageTheme {\n  DARK = 'dark-theme',\n  LIGHT = 'light-theme',\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class VantageThemeService {\n  private _renderer2: Renderer2;\n\n  private readonly _activeThemeSubject: BehaviorSubject<VantageTheme> = new BehaviorSubject<VantageTheme>(\n    <VantageTheme>localStorage.getItem(THEME_LOCAL_STORAGE_KEY),\n  );\n  readonly activeTheme$: Observable<VantageTheme> = this._activeThemeSubject.asObservable();\n\n  constructor(@Inject(DOCUMENT) private _document: any, private rendererFactory: RendererFactory2) {\n    this._renderer2 = rendererFactory.createRenderer(undefined, undefined);\n    fromEvent(window, 'storage')\n      .pipe(filter((event: StorageEvent) => event.key === THEME_LOCAL_STORAGE_KEY))\n      .subscribe((event: StorageEvent) => this.applyTheme(<VantageTheme>event.newValue));\n  }\n\n  private get activeTheme(): VantageTheme {\n    return this._activeThemeSubject.getValue();\n  }\n\n  private set activeTheme(theme: VantageTheme) {\n    this._activeThemeSubject.next(theme);\n  }\n\n  public get darkThemeIsActive(): boolean {\n    return this.activeTheme === VantageTheme.DARK;\n  }\n  public get lightThemeIsActive(): boolean {\n    return this.activeTheme === VantageTheme.LIGHT;\n  }\n\n  public applyLightTheme(): void {\n    this.applyTheme(VantageTheme.LIGHT);\n  }\n  public applyDarkTheme(): void {\n    this.applyTheme(VantageTheme.DARK);\n  }\n\n  private applyTheme(theme: VantageTheme): void {\n    this._renderer2.removeClass(\n      this._document.querySelector('html'),\n      theme === VantageTheme.DARK ? VantageTheme.LIGHT : VantageTheme.DARK,\n    );\n    localStorage.setItem(THEME_LOCAL_STORAGE_KEY, theme);\n    this._renderer2.addClass(this._document.querySelector('html'), theme);\n    this.activeTheme = <VantageTheme>localStorage.getItem(THEME_LOCAL_STORAGE_KEY);\n  }\n}\n"]}