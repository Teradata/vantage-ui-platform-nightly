{"version":3,"sources":["ng://@td-vantage/ui-platform/sqle/query.service.ts","ng://@td-vantage/ui-platform/sqle/dictionary.service.ts","ng://@td-vantage/ui-platform/sqle/connection.service.ts","ng://@td-vantage/ui-platform/sqle/sqle.module.ts"],"names":["VantageQueryService","_httpClient","this","prototype","querySystem","connection","payload","headers","HttpHeaders","append","creds","set","logMech","system","system_attributes","attributes","log_mech","clientId","post","nickname","pipe","catchError","error","map","resultSet","getTableInfo","databaseName","tableName","get","getViewInfo","viewName","getQuery","requestId","getQueries","sessionId","getQueryResult","queryId","deleteQuery","delete","createSession","autoCommit","transactionMode","charSet","deleteSession","Injectable","HttpClient","VANTAGE_QUERY_PROVIDER_FACTORY","parent","httpClient","VANTAGE_QUERY_PROVIDER","provide","deps","Optional","SkipSelf","useFactory","sysDatabases","VantageDictionaryService","_queryService","getViewHelp","database","view","_this","queryStr","columns","column","comment","remarks","type","columnType","name","table","switchMap","viewInfo","query","count","ddlStatement","results","data","forEach","row","cnt","columnName","getTableHelp","info","getDatabaseFunction","funcName","join","getDatabaseFunctions","sqlHelp","index","indexOf","substr","length","split","filter","func","getAnalyticalFunctions","objectname","getAnalyticalFunction","analyticalFunction","functionName","shortDescription","longDescription","usageSyntax","inputColumns","outputColumns","stringArray","value","undefined","resultSetPredicate","TableName","requestText","RequestText","CommentString","kind","TableKind","getStoredProcedures","getExternalStoredProcedures","getMacros","functionsvxPredicate","DatabaseName","SpecificName","paramNumber","NumParameters","paramDataTypes","ParameterDataTypes","commentString","getTableOperators","getTableFunctions","getForeignServers","getForeignSchemas","foreignServer","Schema","getForeignTables","schema","Table","getForeignColumns","Column","Type","getDatabases","schemaname","DBKind","permSpace","PermSpace","spoolSpace","SpoolSpace","tempSpace","TempSpace","getDatabaseObjects","databaseId","tablekind","tablename","DataBaseName","databasename","getTableColumns","tableId","search","searchStr","options","databases","objects","queries","dbQuery","push","objectQuery","columnQuery","objectType","newParent","nameSplit","objectName","VANTAGE_DICTIONARY_PROVIDER_FACTORY","queryService","VANTAGE_DICTIONARY_PROVIDER","VantageConnectionService","Object","defineProperty","JSON","parse","sessionStorage","getItem","_a","disconnect","removeItem","connect","tap","store","mapTo","setItem","stringify","VANTAGE_CONNECTION_PROVIDER_FACTORY","VANTAGE_CONNECTION_PROVIDER","VantageSQLEModule","NgModule","args","imports","CommonModule","providers"],"mappings":"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","sourcesContent":["import { Injectable, Provider, Optional, SkipSelf } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { ISystem } from '@td-vantage/ui-platform/system';\n\nexport interface IQueryPayload {\n  query: string;\n  session?: string;\n  logMech?: string;\n  rowOffset?: number;\n  rowLimit?: number;\n  format?: string; // (default)-object, array, or csv\n  includeColumns?: boolean;\n  includeColumnsTypes?: boolean;\n  spooledResultSet?: boolean;\n  clientId?: string;\n}\n\nexport interface IQueryResultSet {\n  queueDuration: number;\n  queryDuration: number;\n  results: IQueryResultSetResult[];\n}\n\nexport interface IQueryResultSetResult {\n  data: { [name: string]: string }[];\n  resultSet: boolean;\n  rowCount: number;\n  rowLimitExceeded: boolean;\n  columns?: { [name: string]: string }[];\n}\n\nexport interface IQueryInfo {\n  success?: boolean;\n  logTime?: string;\n  error?: any;\n  resultSet?: IQueryResultSet;\n}\n\nexport interface ISQLEConnection {\n  system: ISystem;\n  creds?: string;\n}\n\n@Injectable()\nexport class VantageQueryService {\n  constructor(private _httpClient: HttpClient) {}\n\n  querySystem(connection: ISQLEConnection, payload: IQueryPayload): Observable<IQueryResultSet> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n      payload.logMech = connection.system.system_attributes.attributes.log_mech || 'DEFAULT';\n    } else {\n      payload.logMech = 'JWT';\n    }\n    payload.clientId = 'VANTAGE.EDITOR';\n    const request: Observable<object> = this._httpClient.post(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries',\n      payload,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getTableInfo(connection: ISQLEConnection, databaseName: string, tableName: string): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n\n    const request: Observable<object> = this._httpClient.get(\n      `/api/query/systems/${connection.system.nickname}/databases/${databaseName}/tables/${tableName}`,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getViewInfo(connection: ISQLEConnection, databaseName: string, viewName: string): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n\n    const request: Observable<object> = this._httpClient.get(\n      `/api/query/systems/${connection.system.nickname}/databases/${databaseName}/views/${viewName}`,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getQuery(connection: ISQLEConnection, requestId: string): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._httpClient.get(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries/' + requestId,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: any) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getQueries(connection: ISQLEConnection, sessionId: string): Observable<IQueryResultSet> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._httpClient.get(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries?session=' + sessionId,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getQueryResult(connection: ISQLEConnection, queryId: string): Observable<IQueryResultSet> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._httpClient.get(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries/' + queryId + '/results',\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  deleteQuery(connection: ISQLEConnection, queryId: string): Observable<IQueryResultSet> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._httpClient.delete(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries/' + queryId,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  createSession(connection: ISQLEConnection): Observable<any> {\n    const payload: any = {\n      autoCommit: 'true',\n      transactionMode: 'TERA',\n      charSet: 'UTF8',\n    };\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n      payload.logMech = connection.system.system_attributes.attributes.log_mech || 'DEFAULT';\n    } else {\n      payload.logMech = 'JWT';\n    }\n    const request: Observable<object> = this._httpClient.post(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/sessions',\n      payload,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: any) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  deleteSession(connection: ISQLEConnection, sessionId: string): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._httpClient.delete(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/sessions/' + sessionId,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: any) => {\n        return resultSet;\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_QUERY_PROVIDER_FACTORY(\n  parent: VantageQueryService,\n  httpClient: HttpClient,\n): VantageQueryService {\n  return parent || new VantageQueryService(httpClient);\n}\n\nexport const VANTAGE_QUERY_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageQueryService,\n  deps: [[new Optional(), new SkipSelf(), VantageQueryService], HttpClient],\n  useFactory: VANTAGE_QUERY_PROVIDER_FACTORY,\n};\n","import { Injectable, SkipSelf, Optional, Provider } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nimport { VantageQueryService, IQueryResultSet, ISQLEConnection } from './query.service';\n\nexport const sysDatabases: string[] = [\n  'DBC',\n  'dbcmngr',\n  'SQLJ',\n  'SystemFe',\n  'SysAdmin',\n  'SYSBAR',\n  'SYSJDBC',\n  'SYSLIB',\n  'SYSUDTLIB',\n  'TDMaps',\n  'TD_SERVER_DB',\n  'TD_SYSFNLIB',\n  'TD_SYSXML',\n  'Sys_Calendar',\n];\n\nexport interface IDictionarySystem {\n  hostname?: string;\n  password?: string;\n  port?: number;\n  system_id?: string;\n  last_run?: string;\n  interval_minutes?: number;\n  enabled?: boolean;\n  last_attempt?: string;\n  in_collection?: boolean;\n  username?: string;\n}\n\nexport interface IDictionaryDatabase {\n  parent_name?: string;\n  size_bytes?: number;\n  system_id?: string;\n  name?: string;\n  id?: string;\n  type?: string;\n}\n\nexport interface IDictionaryDatabaseObject {\n  system_id?: string;\n  database_id?: string;\n  id?: string;\n  name?: string;\n  size_bytes?: number;\n  type?: string;\n  create_text?: string;\n}\n\nexport interface IDictionaryTableColumn {\n  system_id?: string;\n  database_id?: string;\n  table_id?: string;\n  id?: string;\n  name?: string;\n}\n\n/**\n * FunctionType\n * A - Aggregate\n * B - Aggregate and statistical\n * C - Contract function\n * D - External stored procedure\n * F - Scalar\n * H - User defined method\n * I - Internal type method\n * L - Table operator\n * R - Table Function\n * S - Statistical\n */\n\n/**\n * TableKind for dbc.tablesvx;\n * A - Aggregate function\n * B - Combined aggregate and ordered analytical function\n * C - Table operator parser contract function\n * D - JAR\n * E - External Stored Procedure\n * F - Standard Function\n * G - Trigger\n * H - Instance or contructor method\n * I - Join Index\n * J - Journal\n * K - Foreign Server Object\n * L - User defined table operator\n * M - Macro\n * N - Hash index\n * O - Table with no primary index and no partitioning\n * P - Stored Procedure\n * Q - Queue table\n * R - Table function\n * S - Ordered Analytical function\n * T - table with a primary index or primary AMP index, partitioning or both. Or a partioned table with NoPI;\n * U - User defined type\n * V - View\n * X - Authorization\n * Y - GLOP set\n * Z - UIF - User Installed File\n * 1 - A DATASET schema object created by CREATE SCHEMA\n * 2 - Functon alias object\n */\n\n/**\n * dbc.externalSPs\n * dbc.sessionInfovx\n */\n\n@Injectable()\nexport class VantageDictionaryService {\n  constructor(private _queryService: VantageQueryService) {}\n\n  getViewHelp(connection: ISQLEConnection, database: string, view: string): Observable<any> {\n    const queryStr: string = `\n      LOCK ROW FOR ACCESS\n      SELECT CAST(COUNT(*) AS BIGINT) as cnt\n      FROM ${database}.${view};\n      SHOW VIEW ${database}.${view};\n    `;\n\n    return this._queryService.getViewInfo(connection, database, view).pipe(\n      map((resultSet: any) => {\n        return resultSet.columns.map((column: any) => {\n          return {\n            comment: column.remarks,\n            type: 'column',\n            columnType: column.type,\n            name: column.name,\n            database: resultSet.database,\n            table: resultSet.name,\n          };\n        });\n      }),\n      switchMap((viewInfo: any) => {\n        return this._queryService\n          .querySystem(connection, {\n            query: queryStr,\n          })\n          .pipe(\n            map((resultSet: IQueryResultSet) => {\n              let ddlStatement: string = '';\n              resultSet.results[1].data.forEach((row: any) => {\n                ddlStatement += row['Request Text'];\n              });\n              let count: string;\n              resultSet.results[0].data.forEach((row: any) => {\n                count = row.cnt;\n              });\n\n              const columns: any[] = viewInfo.map((row: any) => {\n                return {\n                  columnName: row.name,\n                  type: row.columnType,\n                };\n              });\n\n              return {\n                database,\n                view,\n                columns,\n                count,\n                ddlStatement,\n              };\n            }),\n          );\n      }),\n    );\n  }\n\n  getTableHelp(connection: ISQLEConnection, database: string, table: string): Observable<any> {\n    const queryStr: string = `\n      LOCK ROW FOR ACCESS\n      SELECT CAST(COUNT(*) AS BIGINT) as cnt\n      FROM ${database}.${table};\n      SHOW TABLE ${database}.${table};\n    `;\n    return this._queryService.getTableInfo(connection, database, table).pipe(\n      map((resultSet: any) => {\n        return resultSet.columns.map((column: any) => {\n          return {\n            comment: column.remarks,\n            type: 'column',\n            columnType: column.type,\n            name: column.name,\n            database: resultSet.database,\n            table: resultSet.name,\n          };\n        });\n      }),\n      switchMap((info: any) => {\n        return this._queryService\n          .querySystem(connection, {\n            query: queryStr,\n          })\n          .pipe(\n            map((resultSet: IQueryResultSet) => {\n              let ddlStatement: string = '';\n              resultSet.results[1].data.forEach((row: any) => {\n                ddlStatement += row['Request Text'];\n              });\n              let count: string;\n              resultSet.results[0].data.forEach((row: any) => {\n                count = row.cnt;\n              });\n              const columns: any[] = info.map((row: any) => {\n                return {\n                  columnName: row.name,\n                  type: row.columnType,\n                };\n              });\n              return {\n                database,\n                table,\n                columns,\n                count,\n                ddlStatement,\n              };\n            }),\n          );\n      }),\n    );\n  }\n\n  getDatabaseFunction(connection: ISQLEConnection, funcName: string): Observable<any> {\n    const queryStr: string = `\n      HELP 'SQL ${funcName}';\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          const stringArray: string[] = resultSet.results[0].data.map((row: any) => {\n            return row['On-Line Help'];\n          });\n          return stringArray.join(' ');\n        }),\n      );\n  }\n\n  getDatabaseFunctions(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      HELP 'SQL';\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          const stringArray: string[] = resultSet.results[0].data.map((row: any) => {\n            return row['On-Line Help'];\n          });\n          let sqlHelp: string = stringArray.join(' ');\n          const index: number = sqlHelp.indexOf('FUNCTIONS') + 12;\n          sqlHelp = sqlHelp.substr(index, sqlHelp.length);\n          return sqlHelp\n            .split(' ')\n            .filter((func: string) => {\n              return func;\n            })\n            .map((func: string) => {\n              return {\n                name: func,\n              };\n            });\n        }),\n      );\n  }\n\n  getAnalyticalFunctions(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      HELP FOREIGN SCHEMA \"public\"@coprocessor;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            return {\n              name: row.objectname,\n            };\n          });\n        }),\n      );\n  }\n\n  getAnalyticalFunction(connection: ISQLEConnection, analyticalFunction: string): Observable<any> {\n    const queryStr: string = `\n      HELP FOREIGN FUNCTION \"public\".\"${analyticalFunction}\"@coprocessor;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          let functionName: string = '';\n          let shortDescription: string = '';\n          let longDescription: string = '';\n          let usageSyntax: string = '';\n          let inputColumns: string = '';\n          let outputColumns: string = '';\n          const functionOwner: string = '';\n          const creationTime: string = '';\n          const functionVersion: string = '';\n          const interfacesImplemented: string = '';\n          const stringArray: string[] = resultSet.results[0].data.map((row: any) => {\n            return row['Function Help'];\n          });\n          for (let index: number = 0; index < stringArray.length; index++) {\n            const value: string = stringArray[index];\n            if (value.indexOf('Function Name:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                functionName += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Short Description:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                shortDescription += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Long Description:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                longDescription += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Usage Syntax:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                usageSyntax += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Input Columns:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                inputColumns += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Output Columns:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                outputColumns += stringArray[index] + '\\n';\n              }\n            } else {\n              // Function Owner:\n              // Creation Time:\n              // Function Version:\n              // Interfaces Implemented:\n              if (stringArray.indexOf('') > -1) {\n                index = stringArray.indexOf('');\n                stringArray[index] = undefined;\n              }\n            }\n          }\n          return {\n            functionName,\n            shortDescription,\n            longDescription,\n            usageSyntax,\n            inputColumns,\n            outputColumns,\n          };\n        }),\n      );\n  }\n\n  resultSetPredicate(resultSet: IQueryResultSet): any {\n    return resultSet.results[0].data.map((row: any) => {\n      return {\n        name: row.TableName,\n        requestText: row.RequestText,\n        comment: row.CommentString,\n        kind: row.TableKind,\n      };\n    });\n  }\n\n  getStoredProcedures(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT DataBaseName, TableName, TableKind, RequestText, CommentString FROM dbc.tablesvx\n      WHERE TableKind = 'P'\n      ORDER BY TableName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.resultSetPredicate));\n  }\n\n  getExternalStoredProcedures(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT DataBaseName, TableName, TableKind, RequestText, CommentString FROM dbc.tablesvx\n      WHERE TableKind = 'E'\n      ORDER BY TableName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.resultSetPredicate));\n  }\n\n  getMacros(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT DataBaseName, TableName, TableKind, RequestText, CommentString FROM dbc.tablesvx\n      WHERE TableKind = 'M'\n      ORDER BY TableName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.resultSetPredicate));\n  }\n\n  functionsvxPredicate(resultSet: IQueryResultSet): any {\n    return resultSet.results[0].data.map((row: any) => {\n      return {\n        database: row.DatabaseName,\n        name: row.SpecificName,\n        paramNumber: row.NumParameters,\n        paramDataTypes: row.ParameterDataTypes,\n        requestText: row.RequestText,\n        commentString: row.CommentString,\n        kind: row.TableKind,\n      };\n    });\n  }\n\n  getTableOperators(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT func.DatabaseName, func.FunctionName, func.SpecificName, func.NumParameters,\n      func.ParameterDataTypes, tbl.RequestText, tbl.CommentString, tbl.TableKind\n      FROM dbc.functionsvx as func\n      INNER JOIN dbc.tablesvx as tbl\n      ON tbl.TableName = func.SpecificName\n      AND tbl.DataBaseName = func.DatabaseName\n      WHERE FunctionType = 'L'\n      ORDER BY func.FunctionName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.functionsvxPredicate));\n  }\n\n  getTableFunctions(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT func.DatabaseName, func.FunctionName, func.SpecificName, func.NumParameters,\n      func.ParameterDataTypes, tbl.RequestText, tbl.CommentString, tbl.TableKind\n      FROM dbc.functionsvx as func\n      INNER JOIN dbc.tablesvx as tbl\n      ON tbl.TableName = func.SpecificName\n      AND tbl.DataBaseName = func.DatabaseName\n      WHERE FunctionType = 'R'\n      ORDER BY func.FunctionName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.functionsvxPredicate));\n  }\n\n  getForeignServers(connection: ISQLEConnection): Observable<any[]> {\n    const queryStr: string = `\n      SELECT TableName, TableKind FROM DBC.TABLESVX\n      WHERE DATABASENAME = 'TD_SERVER_DB' AND\n      TABLEKIND = 'K' AND\n      TableName <> 'coprocesor';\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            return {\n              name: row.TableName,\n              kind: row.TableKind,\n            };\n          });\n        }),\n      );\n  }\n\n  getForeignSchemas(connection: ISQLEConnection, foreignServer: string): Observable<any[]> {\n    const queryStr: string = `\n      HELP FOREIGN SERVER ${foreignServer};\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: { Schema: string }) => {\n            return {\n              name: row.Schema,\n              kind: 'NONE',\n            };\n          });\n        }),\n      );\n  }\n\n  getForeignTables(connection: ISQLEConnection, foreignServer: string, schema: string): Observable<any[]> {\n    const queryStr: string = `\n      HELP FOREIGN DATABASE \"${schema}\"@${foreignServer};\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: { Table: string }) => {\n            return {\n              name: row.Table,\n              kind: 'NONE',\n            };\n          });\n        }),\n      );\n  }\n\n  getForeignColumns(\n    connection: ISQLEConnection,\n    foreignServer: string,\n    schema: string,\n    table: string,\n  ): Observable<any[]> {\n    const queryStr: string = `\n      HELP FOREIGN TABLE \"${schema}\".\"${table}\"@${foreignServer};\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: { Column: string; Type: string }) => {\n            return {\n              name: row.Column,\n              type: row.Type,\n            };\n          });\n        }),\n      );\n  }\n\n  getDatabases(connection: ISQLEConnection): Observable<any[]> {\n    const queryStr: string =\n      'SELECT databasename, PermSpace, SpoolSpace, TempSpace, CommentString, DBKind FROM dbc.databasesVX ORDER BY databasename;';\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            return {\n              name: row.DatabaseName || row.schemaname,\n              type: row.DBKind === 'U' ? 'user' : 'database',\n              permSpace: row.PermSpace,\n              spoolSpace: row.SpoolSpace,\n              tempSpace: row.TempSpace,\n              comment: row.CommentString,\n            };\n          });\n        }),\n      );\n  }\n\n  getDatabaseObjects(connection: ISQLEConnection, databaseId: string): Observable<any[]> {\n    const queryStr: string = `SELECT DataBaseName, TableName, TableKind, CommentString FROM dbc.tablesvx\n       WHERE TableKind in ('T', 'O', 'V') AND DataBaseName = '${databaseId}' ORDER BY TableName ASC;`;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            const type: string = row.TableKind || row.tablekind;\n            return {\n              kind: row.TableKind || row.tablekind,\n              type: type === 'V' ? 'view' : 'table',\n              name: row.TableName || row.tablename,\n              database: row.DataBaseName || row.databasename,\n              comment: row.CommentString,\n            };\n          });\n        }),\n      );\n  }\n\n  getTableColumns(type: string, connection: ISQLEConnection, databaseId: string, tableId: string): Observable<any> {\n    if (type === 'table') {\n      return this._queryService.getTableInfo(connection, databaseId, tableId).pipe(\n        map((resultSet: any) => {\n          return resultSet.columns.map((column: any) => {\n            return {\n              comment: column.remarks,\n              type: 'column',\n              columnType: column.type,\n              name: column.name,\n              database: resultSet.database,\n              table: resultSet.name,\n            };\n          });\n        }),\n      );\n    } else if (type === 'view') {\n      return this._queryService.getViewInfo(connection, databaseId, tableId).pipe(\n        map((resultSet: any) => {\n          return resultSet.columns.map((column: any) => {\n            return {\n              comment: column.remarks,\n              type: 'column',\n              columnType: column.type,\n              name: column.name,\n              database: resultSet.database,\n              table: resultSet.name,\n            };\n          });\n        }),\n      );\n    }\n  }\n\n  search(\n    connection: ISQLEConnection,\n    searchStr: string,\n    options: {\n      databases: boolean;\n      objects: boolean;\n      columns: boolean;\n    } = {\n      databases: true,\n      objects: true,\n      columns: true,\n    },\n  ): Observable<any[]> {\n    const queries: string[] = [];\n    if (options.databases) {\n      const dbQuery: string = `\n        SELECT\n            DatabaseName as objectName,\n            'database' as objectType,\n            DBKind as kind,\n            CommentString\n        FROM dbc.databasesvx\n        WHERE DatabaseName LIKE '%${searchStr}%'\n        AND DataBaseName NOT IN ('${sysDatabases.join(\"', '\")}')\n      `;\n      queries.push(dbQuery);\n    }\n    if (options.objects) {\n      const objectQuery: string = `\n        SELECT\n            DataBaseName || '~|~' || TableName as objectName,\n            'object' as objectType,\n            TableKind as kind,\n            CommentString\n        FROM dbc.tablesvx\n        WHERE TableKind in ('T', 'O', 'V')\n        AND TableName LIKE '%${searchStr}%'\n        AND DataBaseName NOT IN ('${sysDatabases.join(\"', '\")}')\n      `;\n      queries.push(objectQuery);\n    }\n    if (options.objects) {\n      const columnQuery: string = `\n        SELECT\n            DataBaseName || '~|~' || TableName || '~|~' || ColumnName as objectName,\n            'column' as objectType,\n            ColumnType as kind,\n            CommentString\n        FROM dbc.columnsVX\n        WHERE columnname LIKE '%${searchStr}%'\n        AND DataBaseName NOT IN ('${sysDatabases.join(\"', '\")}')\n      `;\n      queries.push(columnQuery);\n    }\n    const unionJoin: string = queries.join('UNION');\n    const queryStr: string = `\n      WITH quick_search AS (\n          ${unionJoin}\n      )\n      SELECT * FROM quick_search\n      ORDER BY 1\n      SAMPLE 100;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            let kind: string = row.kind;\n            // map to proper type/kind\n            if (row.objectType === 'column') {\n              kind = 'column';\n            } else if (row.objectType === 'database') {\n              kind = kind === 'D' ? 'database' : 'user';\n            } else {\n              kind = kind === 'V' ? 'view' : 'table';\n            }\n            const newParent: string[] = [];\n            // split name and parents..\n            const nameSplit: string[] = row.objectName.split('~|~');\n            for (let index: number = 0; index < nameSplit.length - 1; index++) {\n              newParent.push('\"' + nameSplit[index] + '\"');\n            }\n            return {\n              parent: newParent.join('.'),\n              name: nameSplit[nameSplit.length - 1],\n              kind,\n              type: row.objectType,\n              comment: row.CommentString,\n            };\n          });\n        }),\n      );\n  }\n}\n\nexport function VANTAGE_DICTIONARY_PROVIDER_FACTORY(\n  parent: VantageDictionaryService,\n  queryService: VantageQueryService,\n): VantageDictionaryService {\n  return parent || new VantageDictionaryService(queryService);\n}\n\nexport const VANTAGE_DICTIONARY_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageDictionaryService,\n  deps: [[new Optional(), new SkipSelf(), VantageDictionaryService], VantageQueryService],\n  useFactory: VANTAGE_DICTIONARY_PROVIDER_FACTORY,\n};\n","import { Injectable, Optional, SkipSelf, Provider } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap, mapTo } from 'rxjs/operators';\nimport { VantageQueryService, ISQLEConnection } from './query.service';\n\nconst CONNECTION_SESSION_KEY: string = 'vantage.editor.connection';\n\n@Injectable()\nexport class VantageConnectionService {\n  constructor(private _queryService: VantageQueryService) {}\n\n  public get current(): ISQLEConnection {\n    try {\n      return JSON.parse(sessionStorage.getItem(CONNECTION_SESSION_KEY));\n    } catch {\n      return undefined;\n    }\n  }\n\n  public disconnect(): void {\n    sessionStorage.removeItem(CONNECTION_SESSION_KEY);\n  }\n\n  public connect(connection: ISQLEConnection): Observable<ISQLEConnection> {\n    // clear connection before starting a new one\n    this.disconnect();\n    // test connection with SELECT 1\n    return this._queryService.querySystem(connection, { query: 'SELECT 1;' }).pipe(\n      tap(() => this.store(connection)), // if successful, save\n      mapTo(connection),\n    );\n  }\n\n  private store({ system, creds }: ISQLEConnection): void {\n    sessionStorage.setItem(CONNECTION_SESSION_KEY, JSON.stringify({ system, creds }));\n  }\n}\n\nexport function VANTAGE_CONNECTION_PROVIDER_FACTORY(\n  parent: VantageConnectionService,\n  queryService: VantageQueryService,\n): VantageConnectionService {\n  return parent || new VantageConnectionService(queryService);\n}\n\nexport const VANTAGE_CONNECTION_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageConnectionService,\n  deps: [[new Optional(), new SkipSelf(), VantageConnectionService], VantageQueryService],\n  useFactory: VANTAGE_CONNECTION_PROVIDER_FACTORY,\n};\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VANTAGE_CONNECTION_PROVIDER } from './connection.service';\nimport { VANTAGE_DICTIONARY_PROVIDER } from './dictionary.service';\nimport { VANTAGE_QUERY_PROVIDER } from './query.service';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [VANTAGE_CONNECTION_PROVIDER, VANTAGE_DICTIONARY_PROVIDER, VANTAGE_QUERY_PROVIDER],\n})\nexport class VantageSQLEModule {}\n"]}