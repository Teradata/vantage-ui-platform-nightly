{"version":3,"file":"td-vantage-ui-platform-sqle.umd.js","sources":["ng://@td-vantage/ui-platform/sqle/query.service.ts","ng://@td-vantage/ui-platform/sqle/dictionary.service.ts","ng://@td-vantage/ui-platform/sqle/connection.service.ts","ng://@td-vantage/ui-platform/sqle/sqle.module.ts"],"sourcesContent":["import { Injectable, Provider, Optional, SkipSelf } from '@angular/core';\nimport { HttpClient, HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { ISystem } from '@td-vantage/ui-platform/system';\n\nexport interface IQueryPayload {\n  query: string;\n  session?: string;\n  logMech?: string;\n  rowOffset?: number;\n  rowLimit?: number;\n  format?: string; // (default)-object, array, or csv\n  includeColumns?: boolean;\n  includeColumnsTypes?: boolean;\n  spooledResultSet?: boolean;\n  clientId?: string;\n}\n\nexport interface IQueryResultSet {\n  queueDuration: number;\n  queryDuration: number;\n  results: IQueryResultSetResult[];\n}\n\nexport interface IQueryResultSetResult {\n  data: { [name: string]: string }[];\n  resultSet: boolean;\n  rowCount: number;\n  rowLimitExceeded: boolean;\n  columns?: { [name: string]: string }[];\n}\n\nexport interface IQueryInfo {\n  success?: boolean;\n  logTime?: string;\n  error?: any;\n  resultSet?: IQueryResultSet;\n}\n\nexport interface ISQLEConnection {\n  system: ISystem;\n  creds?: string;\n}\n\n@Injectable()\nexport class VantageQueryService {\n  constructor(private _httpClient: HttpClient) {}\n\n  querySystem(connection: ISQLEConnection, payload: IQueryPayload): Observable<IQueryResultSet> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n      payload.logMech = connection.system.system_attributes.attributes.log_mech || 'DEFAULT';\n    } else {\n      payload.logMech = 'JWT';\n    }\n    payload.clientId = 'VANTAGE.EDITOR';\n    const request: Observable<object> = this._httpClient.post(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries',\n      payload,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getTableInfo(connection: ISQLEConnection, databaseName: string, tableName: string): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n\n    const request: Observable<object> = this._httpClient.get(\n      `/api/query/systems/${connection.system.nickname}/databases/${databaseName}/tables/${tableName}`,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getViewInfo(connection: ISQLEConnection, databaseName: string, viewName: string): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n\n    const request: Observable<object> = this._httpClient.get(\n      `/api/query/systems/${connection.system.nickname}/databases/${databaseName}/views/${viewName}`,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getQuery(connection: ISQLEConnection, requestId: string): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._httpClient.get(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries/' + requestId,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: any) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getQueries(connection: ISQLEConnection, sessionId: string): Observable<IQueryResultSet> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._httpClient.get(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries?session=' + sessionId,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getQueryResult(connection: ISQLEConnection, queryId: string): Observable<IQueryResultSet> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._httpClient.get(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries/' + queryId + '/results',\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  deleteQuery(connection: ISQLEConnection, queryId: string): Observable<IQueryResultSet> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._httpClient.delete(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries/' + queryId,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  createSession(connection: ISQLEConnection): Observable<any> {\n    const payload: any = {\n      autoCommit: 'true',\n      transactionMode: 'TERA',\n      charSet: 'UTF8',\n    };\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n      payload.logMech = connection.system.system_attributes.attributes.log_mech || 'DEFAULT';\n    } else {\n      payload.logMech = 'JWT';\n    }\n    const request: Observable<object> = this._httpClient.post(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/sessions',\n      payload,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: any) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  deleteSession(connection: ISQLEConnection, sessionId: string): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._httpClient.delete(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/sessions/' + sessionId,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: any) => {\n        return resultSet;\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_QUERY_PROVIDER_FACTORY(\n  parent: VantageQueryService,\n  httpClient: HttpClient,\n): VantageQueryService {\n  return parent || new VantageQueryService(httpClient);\n}\n\nexport const VANTAGE_QUERY_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageQueryService,\n  deps: [[new Optional(), new SkipSelf(), VantageQueryService], HttpClient],\n  useFactory: VANTAGE_QUERY_PROVIDER_FACTORY,\n};\n","import { Injectable, SkipSelf, Optional, Provider } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nimport { VantageQueryService, IQueryResultSet, ISQLEConnection } from './query.service';\n\nexport const sysDatabases: string[] = [\n  'DBC',\n  'dbcmngr',\n  'SQLJ',\n  'SystemFe',\n  'SysAdmin',\n  'SYSBAR',\n  'SYSJDBC',\n  'SYSLIB',\n  'SYSUDTLIB',\n  'TDMaps',\n  'TD_SERVER_DB',\n  'TD_SYSFNLIB',\n  'TD_SYSXML',\n  'Sys_Calendar',\n];\n\nexport interface IDictionarySystem {\n  hostname?: string;\n  password?: string;\n  port?: number;\n  system_id?: string;\n  last_run?: string;\n  interval_minutes?: number;\n  enabled?: boolean;\n  last_attempt?: string;\n  in_collection?: boolean;\n  username?: string;\n}\n\nexport interface IDictionaryDatabase {\n  parent_name?: string;\n  size_bytes?: number;\n  system_id?: string;\n  name?: string;\n  id?: string;\n  type?: string;\n}\n\nexport interface IDictionaryDatabaseObject {\n  system_id?: string;\n  database_id?: string;\n  id?: string;\n  name?: string;\n  size_bytes?: number;\n  type?: string;\n  create_text?: string;\n}\n\nexport interface IDictionaryTableColumn {\n  system_id?: string;\n  database_id?: string;\n  table_id?: string;\n  id?: string;\n  name?: string;\n}\n\n/**\n * FunctionType\n * A - Aggregate\n * B - Aggregate and statistical\n * C - Contract function\n * D - External stored procedure\n * F - Scalar\n * H - User defined method\n * I - Internal type method\n * L - Table operator\n * R - Table Function\n * S - Statistical\n */\n\n/**\n * TableKind for dbc.tablesvx;\n * A - Aggregate function\n * B - Combined aggregate and ordered analytical function\n * C - Table operator parser contract function\n * D - JAR\n * E - External Stored Procedure\n * F - Standard Function\n * G - Trigger\n * H - Instance or contructor method\n * I - Join Index\n * J - Journal\n * K - Foreign Server Object\n * L - User defined table operator\n * M - Macro\n * N - Hash index\n * O - Table with no primary index and no partitioning\n * P - Stored Procedure\n * Q - Queue table\n * R - Table function\n * S - Ordered Analytical function\n * T - table with a primary index or primary AMP index, partitioning or both. Or a partioned table with NoPI;\n * U - User defined type\n * V - View\n * X - Authorization\n * Y - GLOP set\n * Z - UIF - User Installed File\n * 1 - A DATASET schema object created by CREATE SCHEMA\n * 2 - Functon alias object\n */\n\n/**\n * dbc.externalSPs\n * dbc.sessionInfovx\n */\n\n@Injectable()\nexport class VantageDictionaryService {\n  constructor(private _queryService: VantageQueryService) {}\n\n  getViewHelp(connection: ISQLEConnection, database: string, view: string): Observable<any> {\n    const queryStr: string = `\n      LOCK ROW FOR ACCESS\n      SELECT CAST(COUNT(*) AS BIGINT) as cnt\n      FROM ${database}.${view};\n      SHOW VIEW ${database}.${view};\n    `;\n\n    return this._queryService.getViewInfo(connection, database, view).pipe(\n      map((resultSet: any) => {\n        return resultSet.columns.map((column: any) => {\n          return {\n            comment: column.remarks,\n            type: 'column',\n            columnType: column.type,\n            name: column.name,\n            database: resultSet.database,\n            table: resultSet.name,\n          };\n        });\n      }),\n      switchMap((viewInfo: any) => {\n        return this._queryService\n          .querySystem(connection, {\n            query: queryStr,\n          })\n          .pipe(\n            map((resultSet: IQueryResultSet) => {\n              let ddlStatement: string = '';\n              resultSet.results[1].data.forEach((row: any) => {\n                ddlStatement += row['Request Text'];\n              });\n              let count: string;\n              resultSet.results[0].data.forEach((row: any) => {\n                count = row.cnt;\n              });\n\n              const columns: any[] = viewInfo.map((row: any) => {\n                return {\n                  columnName: row.name,\n                  type: row.columnType,\n                };\n              });\n\n              return {\n                database,\n                view,\n                columns,\n                count,\n                ddlStatement,\n              };\n            }),\n          );\n      }),\n    );\n  }\n\n  getTableHelp(connection: ISQLEConnection, database: string, table: string): Observable<any> {\n    const queryStr: string = `\n      LOCK ROW FOR ACCESS\n      SELECT CAST(COUNT(*) AS BIGINT) as cnt\n      FROM ${database}.${table};\n      SHOW TABLE ${database}.${table};\n    `;\n    return this._queryService.getTableInfo(connection, database, table).pipe(\n      map((resultSet: any) => {\n        return resultSet.columns.map((column: any) => {\n          return {\n            comment: column.remarks,\n            type: 'column',\n            columnType: column.type,\n            name: column.name,\n            database: resultSet.database,\n            table: resultSet.name,\n          };\n        });\n      }),\n      switchMap((info: any) => {\n        return this._queryService\n          .querySystem(connection, {\n            query: queryStr,\n          })\n          .pipe(\n            map((resultSet: IQueryResultSet) => {\n              let ddlStatement: string = '';\n              resultSet.results[1].data.forEach((row: any) => {\n                ddlStatement += row['Request Text'];\n              });\n              let count: string;\n              resultSet.results[0].data.forEach((row: any) => {\n                count = row.cnt;\n              });\n              const columns: any[] = info.map((row: any) => {\n                return {\n                  columnName: row.name,\n                  type: row.columnType,\n                };\n              });\n              return {\n                database,\n                table,\n                columns,\n                count,\n                ddlStatement,\n              };\n            }),\n          );\n      }),\n    );\n  }\n\n  getDatabaseFunction(connection: ISQLEConnection, funcName: string): Observable<any> {\n    const queryStr: string = `\n      HELP 'SQL ${funcName}';\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          const stringArray: string[] = resultSet.results[0].data.map((row: any) => {\n            return row['On-Line Help'];\n          });\n          return stringArray.join(' ');\n        }),\n      );\n  }\n\n  getDatabaseFunctions(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      HELP 'SQL';\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          const stringArray: string[] = resultSet.results[0].data.map((row: any) => {\n            return row['On-Line Help'];\n          });\n          let sqlHelp: string = stringArray.join(' ');\n          const index: number = sqlHelp.indexOf('FUNCTIONS') + 12;\n          sqlHelp = sqlHelp.substr(index, sqlHelp.length);\n          return sqlHelp\n            .split(' ')\n            .filter((func: string) => {\n              return func;\n            })\n            .map((func: string) => {\n              return {\n                name: func,\n              };\n            });\n        }),\n      );\n  }\n\n  getAnalyticalFunctions(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      HELP FOREIGN SCHEMA \"public\"@coprocessor;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            return {\n              name: row.objectname,\n            };\n          });\n        }),\n      );\n  }\n\n  getAnalyticalFunction(connection: ISQLEConnection, analyticalFunction: string): Observable<any> {\n    const queryStr: string = `\n      HELP FOREIGN FUNCTION \"public\".\"${analyticalFunction}\"@coprocessor;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          let functionName: string = '';\n          let shortDescription: string = '';\n          let longDescription: string = '';\n          let usageSyntax: string = '';\n          let inputColumns: string = '';\n          let outputColumns: string = '';\n          const functionOwner: string = '';\n          const creationTime: string = '';\n          const functionVersion: string = '';\n          const interfacesImplemented: string = '';\n          const stringArray: string[] = resultSet.results[0].data.map((row: any) => {\n            return row['Function Help'];\n          });\n          for (let index: number = 0; index < stringArray.length; index++) {\n            const value: string = stringArray[index];\n            if (value.indexOf('Function Name:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                functionName += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Short Description:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                shortDescription += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Long Description:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                longDescription += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Usage Syntax:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                usageSyntax += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Input Columns:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                inputColumns += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Output Columns:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                outputColumns += stringArray[index] + '\\n';\n              }\n            } else {\n              // Function Owner:\n              // Creation Time:\n              // Function Version:\n              // Interfaces Implemented:\n              if (stringArray.indexOf('') > -1) {\n                index = stringArray.indexOf('');\n                stringArray[index] = undefined;\n              }\n            }\n          }\n          return {\n            functionName,\n            shortDescription,\n            longDescription,\n            usageSyntax,\n            inputColumns,\n            outputColumns,\n          };\n        }),\n      );\n  }\n\n  resultSetPredicate(resultSet: IQueryResultSet): any {\n    return resultSet.results[0].data.map((row: any) => {\n      return {\n        name: row.TableName,\n        requestText: row.RequestText,\n        comment: row.CommentString,\n        kind: row.TableKind,\n      };\n    });\n  }\n\n  getStoredProcedures(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT DataBaseName, TableName, TableKind, RequestText, CommentString FROM dbc.tablesvx\n      WHERE TableKind = 'P'\n      ORDER BY TableName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.resultSetPredicate));\n  }\n\n  getExternalStoredProcedures(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT DataBaseName, TableName, TableKind, RequestText, CommentString FROM dbc.tablesvx\n      WHERE TableKind = 'E'\n      ORDER BY TableName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.resultSetPredicate));\n  }\n\n  getMacros(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT DataBaseName, TableName, TableKind, RequestText, CommentString FROM dbc.tablesvx\n      WHERE TableKind = 'M'\n      ORDER BY TableName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.resultSetPredicate));\n  }\n\n  functionsvxPredicate(resultSet: IQueryResultSet): any {\n    return resultSet.results[0].data.map((row: any) => {\n      return {\n        database: row.DatabaseName,\n        name: row.SpecificName,\n        paramNumber: row.NumParameters,\n        paramDataTypes: row.ParameterDataTypes,\n        requestText: row.RequestText,\n        commentString: row.CommentString,\n        kind: row.TableKind,\n      };\n    });\n  }\n\n  getTableOperators(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT func.DatabaseName, func.FunctionName, func.SpecificName, func.NumParameters,\n      func.ParameterDataTypes, tbl.RequestText, tbl.CommentString, tbl.TableKind\n      FROM dbc.functionsvx as func\n      INNER JOIN dbc.tablesvx as tbl\n      ON tbl.TableName = func.SpecificName\n      AND tbl.DataBaseName = func.DatabaseName\n      WHERE FunctionType = 'L'\n      ORDER BY func.FunctionName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.functionsvxPredicate));\n  }\n\n  getTableFunctions(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT func.DatabaseName, func.FunctionName, func.SpecificName, func.NumParameters,\n      func.ParameterDataTypes, tbl.RequestText, tbl.CommentString, tbl.TableKind\n      FROM dbc.functionsvx as func\n      INNER JOIN dbc.tablesvx as tbl\n      ON tbl.TableName = func.SpecificName\n      AND tbl.DataBaseName = func.DatabaseName\n      WHERE FunctionType = 'R'\n      ORDER BY func.FunctionName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.functionsvxPredicate));\n  }\n\n  getForeignServers(connection: ISQLEConnection): Observable<any[]> {\n    const queryStr: string = `\n      SELECT TableName, TableKind FROM DBC.TABLESVX\n      WHERE DATABASENAME = 'TD_SERVER_DB' AND\n      TABLEKIND = 'K' AND\n      TableName <> 'coprocesor';\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            return {\n              name: row.TableName,\n              kind: row.TableKind,\n            };\n          });\n        }),\n      );\n  }\n\n  getForeignSchemas(connection: ISQLEConnection, foreignServer: string): Observable<any[]> {\n    const queryStr: string = `\n      HELP FOREIGN SERVER ${foreignServer};\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: { Schema: string }) => {\n            return {\n              name: row.Schema,\n              kind: 'NONE',\n            };\n          });\n        }),\n      );\n  }\n\n  getForeignTables(connection: ISQLEConnection, foreignServer: string, schema: string): Observable<any[]> {\n    const queryStr: string = `\n      HELP FOREIGN DATABASE \"${schema}\"@${foreignServer};\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: { Table: string }) => {\n            return {\n              name: row.Table,\n              kind: 'NONE',\n            };\n          });\n        }),\n      );\n  }\n\n  getForeignColumns(\n    connection: ISQLEConnection,\n    foreignServer: string,\n    schema: string,\n    table: string,\n  ): Observable<any[]> {\n    const queryStr: string = `\n      HELP FOREIGN TABLE \"${schema}\".\"${table}\"@${foreignServer};\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: { Column: string; Type: string }) => {\n            return {\n              name: row.Column,\n              type: row.Type,\n            };\n          });\n        }),\n      );\n  }\n\n  getDatabases(connection: ISQLEConnection): Observable<any[]> {\n    const queryStr: string =\n      'SELECT databasename, PermSpace, SpoolSpace, TempSpace, CommentString, DBKind FROM dbc.databasesVX ORDER BY databasename;';\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            return {\n              name: row.DatabaseName || row.schemaname,\n              type: row.DBKind === 'U' ? 'user' : 'database',\n              permSpace: row.PermSpace,\n              spoolSpace: row.SpoolSpace,\n              tempSpace: row.TempSpace,\n              comment: row.CommentString,\n            };\n          });\n        }),\n      );\n  }\n\n  getDatabaseObjects(connection: ISQLEConnection, databaseId: string): Observable<any[]> {\n    const queryStr: string = `SELECT DataBaseName, TableName, TableKind, CommentString FROM dbc.tablesvx\n       WHERE TableKind in ('T', 'O', 'V') AND DataBaseName = '${databaseId}' ORDER BY TableName ASC;`;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            const type: string = row.TableKind || row.tablekind;\n            return {\n              kind: row.TableKind || row.tablekind,\n              type: type === 'V' ? 'view' : 'table',\n              name: row.TableName || row.tablename,\n              database: row.DataBaseName || row.databasename,\n              comment: row.CommentString,\n            };\n          });\n        }),\n      );\n  }\n\n  getTableColumns(type: string, connection: ISQLEConnection, databaseId: string, tableId: string): Observable<any> {\n    if (type === 'table') {\n      return this._queryService.getTableInfo(connection, databaseId, tableId).pipe(\n        map((resultSet: any) => {\n          return resultSet.columns.map((column: any) => {\n            return {\n              comment: column.remarks,\n              type: 'column',\n              columnType: column.type,\n              name: column.name,\n              database: resultSet.database,\n              table: resultSet.name,\n            };\n          });\n        }),\n      );\n    } else if (type === 'view') {\n      return this._queryService.getViewInfo(connection, databaseId, tableId).pipe(\n        map((resultSet: any) => {\n          return resultSet.columns.map((column: any) => {\n            return {\n              comment: column.remarks,\n              type: 'column',\n              columnType: column.type,\n              name: column.name,\n              database: resultSet.database,\n              table: resultSet.name,\n            };\n          });\n        }),\n      );\n    }\n  }\n\n  search(\n    connection: ISQLEConnection,\n    searchStr: string,\n    options: {\n      databases: boolean;\n      objects: boolean;\n      columns: boolean;\n    } = {\n      databases: true,\n      objects: true,\n      columns: true,\n    },\n  ): Observable<any[]> {\n    const queries: string[] = [];\n    if (options.databases) {\n      const dbQuery: string = `\n        SELECT\n            DatabaseName as objectName,\n            'database' as objectType,\n            DBKind as kind,\n            CommentString\n        FROM dbc.databasesvx\n        WHERE DatabaseName LIKE '%${searchStr}%'\n        AND DataBaseName NOT IN ('${sysDatabases.join(\"', '\")}')\n      `;\n      queries.push(dbQuery);\n    }\n    if (options.objects) {\n      const objectQuery: string = `\n        SELECT\n            DataBaseName || '~|~' || TableName as objectName,\n            'object' as objectType,\n            TableKind as kind,\n            CommentString\n        FROM dbc.tablesvx\n        WHERE TableKind in ('T', 'O', 'V')\n        AND TableName LIKE '%${searchStr}%'\n        AND DataBaseName NOT IN ('${sysDatabases.join(\"', '\")}')\n      `;\n      queries.push(objectQuery);\n    }\n    if (options.objects) {\n      const columnQuery: string = `\n        SELECT\n            DataBaseName || '~|~' || TableName || '~|~' || ColumnName as objectName,\n            'column' as objectType,\n            ColumnType as kind,\n            CommentString\n        FROM dbc.columnsVX\n        WHERE columnname LIKE '%${searchStr}%'\n        AND DataBaseName NOT IN ('${sysDatabases.join(\"', '\")}')\n      `;\n      queries.push(columnQuery);\n    }\n    const unionJoin: string = queries.join('UNION');\n    const queryStr: string = `\n      WITH quick_search AS (\n          ${unionJoin}\n      )\n      SELECT * FROM quick_search\n      ORDER BY 1\n      SAMPLE 100;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            let kind: string = row.kind;\n            // map to proper type/kind\n            if (row.objectType === 'column') {\n              kind = 'column';\n            } else if (row.objectType === 'database') {\n              kind = kind === 'D' ? 'database' : 'user';\n            } else {\n              kind = kind === 'V' ? 'view' : 'table';\n            }\n            const newParent: string[] = [];\n            // split name and parents..\n            const nameSplit: string[] = row.objectName.split('~|~');\n            for (let index: number = 0; index < nameSplit.length - 1; index++) {\n              newParent.push('\"' + nameSplit[index] + '\"');\n            }\n            return {\n              parent: newParent.join('.'),\n              name: nameSplit[nameSplit.length - 1],\n              kind,\n              type: row.objectType,\n              comment: row.CommentString,\n            };\n          });\n        }),\n      );\n  }\n}\n\nexport function VANTAGE_DICTIONARY_PROVIDER_FACTORY(\n  parent: VantageDictionaryService,\n  queryService: VantageQueryService,\n): VantageDictionaryService {\n  return parent || new VantageDictionaryService(queryService);\n}\n\nexport const VANTAGE_DICTIONARY_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageDictionaryService,\n  deps: [[new Optional(), new SkipSelf(), VantageDictionaryService], VantageQueryService],\n  useFactory: VANTAGE_DICTIONARY_PROVIDER_FACTORY,\n};\n","import { Injectable, Optional, SkipSelf, Provider } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap, mapTo } from 'rxjs/operators';\nimport { VantageQueryService, ISQLEConnection } from './query.service';\n\nconst CONNECTION_SESSION_KEY: string = 'vantage.editor.connection';\n\n@Injectable()\nexport class VantageConnectionService {\n  constructor(private _queryService: VantageQueryService) {}\n\n  public get current(): ISQLEConnection {\n    try {\n      return JSON.parse(sessionStorage.getItem(CONNECTION_SESSION_KEY));\n    } catch {\n      return undefined;\n    }\n  }\n\n  public disconnect(): void {\n    sessionStorage.removeItem(CONNECTION_SESSION_KEY);\n  }\n\n  public connect(connection: ISQLEConnection): Observable<ISQLEConnection> {\n    // clear connection before starting a new one\n    this.disconnect();\n    // test connection with SELECT 1\n    return this._queryService.querySystem(connection, { query: 'SELECT 1;' }).pipe(\n      tap(() => this.store(connection)), // if successful, save\n      mapTo(connection),\n    );\n  }\n\n  private store({ system, creds }: ISQLEConnection): void {\n    sessionStorage.setItem(CONNECTION_SESSION_KEY, JSON.stringify({ system, creds }));\n  }\n}\n\nexport function VANTAGE_CONNECTION_PROVIDER_FACTORY(\n  parent: VantageConnectionService,\n  queryService: VantageQueryService,\n): VantageConnectionService {\n  return parent || new VantageConnectionService(queryService);\n}\n\nexport const VANTAGE_CONNECTION_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageConnectionService,\n  deps: [[new Optional(), new SkipSelf(), VantageConnectionService], VantageQueryService],\n  useFactory: VANTAGE_CONNECTION_PROVIDER_FACTORY,\n};\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VANTAGE_CONNECTION_PROVIDER } from './connection.service';\nimport { VANTAGE_DICTIONARY_PROVIDER } from './dictionary.service';\nimport { VANTAGE_QUERY_PROVIDER } from './query.service';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [VANTAGE_CONNECTION_PROVIDER, VANTAGE_DICTIONARY_PROVIDER, VANTAGE_QUERY_PROVIDER],\n})\nexport class VantageSQLEModule {}\n"],"names":["HttpHeaders","catchError","map","Injectable","HttpClient","Optional","SkipSelf","switchMap","tap","mapTo","NgModule","CommonModule"],"mappings":"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"}