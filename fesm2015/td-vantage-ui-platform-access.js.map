{"version":3,"file":"td-vantage-ui-platform-access.js","sources":["ng://@td-vantage/ui-platform/access/guards/block-root-access.guard.ts","ng://@td-vantage/ui-platform/access/guards/block-user-access.guard.ts","ng://@td-vantage/ui-platform/access/access.module.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { VantageSessionService, VantageAuthenticationGuard } from '@td-vantage/ui-platform/auth';\n\n/**\n * Guard that checks if the user is root (`admin` flag `true`)\n * to block access into a particular route.\n * If `admin` flag is `true`, then we redirect to `/`\n */\n@Injectable()\nexport class VantageBlockRootAccessGuard implements CanActivate {\n  constructor(private _authGuard: VantageAuthenticationGuard, private _sessionService: VantageSessionService) {}\n\n  canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    // pipe through the VantageAuthentication guard to be able to chain guards\n    return this._authGuard.canActivate(next, state).pipe(\n      map(() => {\n        if (this._sessionService.user.admin) {\n          location.replace('/');\n          return false;\n        }\n        return true;\n      }),\n    );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { CanActivate, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Observable, of } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { VantageSessionService, VantageAuthenticationGuard } from '@td-vantage/ui-platform/auth';\n\n/**\n * Guard that checks if the user is a normal user (`admin` flag `false`)\n * to block access into a particular route.\n * If `admin` flag is `false`, then we redirect to `/`\n */\n@Injectable()\nexport class VantageBlockUserAccessGuard implements CanActivate {\n  constructor(private _authGuard: VantageAuthenticationGuard, private _sessionService: VantageSessionService) {}\n\n  canActivate(next: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<boolean> {\n    // pipe through the VantageAuthentication guard to be able to chain guards\n    return this._authGuard.canActivate(next, state).pipe(\n      map(() => {\n        if (!this._sessionService.user.admin) {\n          location.replace('/');\n          return false;\n        }\n        return true;\n      }),\n    );\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VantageBlockRootAccessGuard } from './guards/block-root-access.guard';\nimport { VantageBlockUserAccessGuard } from './guards/block-user-access.guard';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  providers: [\n    VantageBlockRootAccessGuard,\n    VantageBlockUserAccessGuard,\n  ],\n})\nexport class VantageAccessModule {\n\n}\n"],"names":[],"mappings":";;;;;;;;;AAAA;;;;;AAaA,MAAa,2BAA2B;;;;;IACtC,YAAoB,UAAsC,EAAU,eAAsC;QAAtF,eAAU,GAAV,UAAU,CAA4B;QAAU,oBAAe,GAAf,eAAe,CAAuB;KAAI;;;;;;IAE9G,WAAW,CAAC,IAA4B,EAAE,KAA0B;;QAElE,OAAO,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,IAAI,CAClD,GAAG;;;QAAC;YACF,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,EAAE;gBACnC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBACtB,OAAO,KAAK,CAAC;aACd;YACD,OAAO,IAAI,CAAC;SACb,EAAC,CACH,CAAC;KACH;;;YAfF,UAAU;;;;YAPqB,0BAA0B;YAAjD,qBAAqB;;;;;;;ACL9B;;;;;AAaA,MAAa,2BAA2B;;;;;IACtC,YAAoB,UAAsC,EAAU,eAAsC;QAAtF,eAAU,GAAV,UAAU,CAA4B;QAAU,oBAAe,GAAf,eAAe,CAAuB;KAAI;;;;;;IAE9G,WAAW,CAAC,IAA4B,EAAE,KAA0B;;QAElE,OAAO,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,IAAI,CAClD,GAAG;;;QAAC;YACF,IAAI,CAAC,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,KAAK,EAAE;gBACpC,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBACtB,OAAO,KAAK,CAAC;aACd;YACD,OAAO,IAAI,CAAC;SACb,EAAC,CACH,CAAC;KACH;;;YAfF,UAAU;;;;YAPqB,0BAA0B;YAAjD,qBAAqB;;;;;;;ACL9B,MAea,mBAAmB;;;YAT/B,QAAQ,SAAC;gBACR,OAAO,EAAE;oBACP,YAAY;iBACb;gBACD,SAAS,EAAE;oBACT,2BAA2B;oBAC3B,2BAA2B;iBAC5B;aACF;;;;;"}