{"version":3,"sources":["ng://@td-vantage/ui-platform/theme/theme.service.ts","ng://@td-vantage/ui-platform/theme/theme.module.ts"],"names":["DARK","LIGHT","VantageThemeService","rendererFactory","_document","_this","this","preferDarkMediaQuery","window","matchMedia","initialValue","localStorage","getItem","checkOSPreference","_renderer2","createRenderer","undefined","_activeThemeSubject","BehaviorSubject","activeTheme$","asObservable","darkTheme$","pipe","map","theme","VantageTheme","lightTheme$","applyTheme","mediaObserver","fromEventPattern","addListener","bind","removeListener","event","matches","storageObserver","fromEvent","filter","key","newValue","merge","subscribe","Object","defineProperty","prototype","getValue","next","_activeTheme","activeTheme","applyLightTheme","applyDarkTheme","toggleTheme","mapObject","fallback","value","saveSetting","removeClass","querySelector","addClass","setItem","Injectable","RendererFactory2","Inject","args","DOCUMENT","VANTAGE_THEME_PROVIDER_FACTORY","parent","VANTAGE_THEME_PROVIDER","provide","deps","Optional","SkipSelf","useFactory","VantageThemeModule","NgModule","imports","CommonModule","providers"],"mappings":"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","sourcesContent":["import { Injectable, Renderer2, Inject, RendererFactory2, Provider, Optional, SkipSelf } from '@angular/core';\nimport { fromEvent, BehaviorSubject, Observable, fromEventPattern, merge } from 'rxjs';\nimport { filter, map } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n\nexport const THEME_LOCAL_STORAGE_KEY: string = 'vantage.theme';\n\nexport enum VantageTheme {\n  DARK = 'dark-theme',\n  LIGHT = 'light-theme',\n}\n\nexport interface IVantageThemeMap {\n  [VantageTheme.DARK]?: any;\n  [VantageTheme.LIGHT]?: any;\n}\n\n@Injectable()\nexport class VantageThemeService {\n  private _renderer2: Renderer2;\n\n  private readonly _activeThemeSubject: BehaviorSubject<VantageTheme>;\n  private readonly preferDarkMediaQuery: MediaQueryList = window.matchMedia('(prefers-color-scheme: dark)');\n\n  public activeTheme$: Observable<VantageTheme>;\n  public darkTheme$: Observable<boolean>;\n  public lightTheme$: Observable<boolean>;\n\n  constructor(private rendererFactory: RendererFactory2, @Inject(DOCUMENT) private _document: any) {\n    const initialValue: VantageTheme =\n      <VantageTheme>localStorage.getItem(THEME_LOCAL_STORAGE_KEY) || this.checkOSPreference();\n\n    this._renderer2 = rendererFactory.createRenderer(undefined, undefined);\n    this._activeThemeSubject = new BehaviorSubject<VantageTheme>(initialValue);\n\n    this.activeTheme$ = this._activeThemeSubject.asObservable();\n    this.darkTheme$ = this._activeThemeSubject\n      .asObservable()\n      .pipe(map((theme: VantageTheme) => theme === VantageTheme.DARK));\n    this.lightTheme$ = this._activeThemeSubject\n      .asObservable()\n      .pipe(map((theme: VantageTheme) => theme === VantageTheme.LIGHT));\n\n    // apply initial theme\n    this.applyTheme(initialValue, false);\n\n    // observe media query change events\n    const mediaObserver: Observable<VantageTheme> = fromEventPattern<MediaQueryListEvent>(\n      this.preferDarkMediaQuery.addListener.bind(this.preferDarkMediaQuery),\n      this.preferDarkMediaQuery.removeListener.bind(this.preferDarkMediaQuery),\n    ).pipe(\n      map((event: MediaQueryListEvent) => {\n        return event.matches ? VantageTheme.DARK : VantageTheme.LIGHT;\n      }),\n    );\n\n    // account for storage events in other browser tabs\n    const storageObserver: Observable<VantageTheme> = fromEvent(window, 'storage').pipe(\n      filter((event: StorageEvent) => event.key === THEME_LOCAL_STORAGE_KEY),\n      map((event: StorageEvent) => (event.newValue ? (event.newValue as VantageTheme) : this.checkOSPreference())),\n    );\n\n    // apply theme on storage or media query change\n    merge(storageObserver, mediaObserver).subscribe((theme: VantageTheme) => this.applyTheme(theme));\n  }\n\n  private get _activeTheme(): VantageTheme {\n    return this._activeThemeSubject.getValue();\n  }\n\n  private set _activeTheme(theme: VantageTheme) {\n    this._activeThemeSubject.next(theme);\n  }\n\n  public get darkThemeIsActive(): boolean {\n    return this._activeTheme === VantageTheme.DARK;\n  }\n  public get lightThemeIsActive(): boolean {\n    return this._activeTheme === VantageTheme.LIGHT;\n  }\n\n  public activeTheme(): VantageTheme {\n    return this._activeTheme;\n  }\n\n  public applyLightTheme(): VantageTheme {\n    return this.applyTheme(VantageTheme.LIGHT);\n  }\n\n  public applyDarkTheme(): VantageTheme {\n    return this.applyTheme(VantageTheme.DARK);\n  }\n\n  public toggleTheme(): VantageTheme {\n    return this._activeTheme === VantageTheme.DARK ? this.applyLightTheme() : this.applyDarkTheme();\n  }\n\n  public map(mapObject: IVantageThemeMap, fallback?: any): Observable<any> {\n    return this.activeTheme$.pipe(map((value: VantageTheme) => (value in mapObject ? mapObject[value] : fallback)));\n  }\n\n  private applyTheme(theme: VantageTheme, saveSetting: boolean = true): VantageTheme {\n    this._renderer2.removeClass(\n      this._document.querySelector('html'),\n      theme === VantageTheme.DARK ? VantageTheme.LIGHT : VantageTheme.DARK,\n    );\n    this._renderer2.addClass(this._document.querySelector('html'), theme);\n\n    if (saveSetting) {\n      localStorage.setItem(THEME_LOCAL_STORAGE_KEY, theme);\n    }\n\n    return (this._activeTheme = theme);\n  }\n\n  private checkOSPreference(): VantageTheme {\n    // it should now be light-by-default\n    return this.preferDarkMediaQuery.matches ? VantageTheme.DARK : VantageTheme.LIGHT;\n  }\n}\n\nexport function VANTAGE_THEME_PROVIDER_FACTORY(\n  parent: VantageThemeService,\n  rendererFactory: RendererFactory2,\n  _document: any,\n): VantageThemeService {\n  return parent || new VantageThemeService(rendererFactory, _document);\n}\n\nexport const VANTAGE_THEME_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageThemeService,\n  deps: [[new Optional(), new SkipSelf(), VantageThemeService], [RendererFactory2], [DOCUMENT]],\n  useFactory: VANTAGE_THEME_PROVIDER_FACTORY,\n};\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { VANTAGE_THEME_PROVIDER } from './theme.service';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [VANTAGE_THEME_PROVIDER],\n})\nexport class VantageThemeModule {}\n"]}