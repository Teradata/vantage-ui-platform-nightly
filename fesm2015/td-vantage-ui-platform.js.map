{"version":3,"file":"td-vantage-ui-platform.js","sources":["ng://@td-vantage/ui-platform/audit/audit.service.ts","ng://@td-vantage/ui-platform/audit/audit.module.ts","ng://@td-vantage/ui-platform/notification/smtp/smtp.service.ts","ng://@td-vantage/ui-platform/notification/notification.module.ts","ng://@td-vantage/ui-platform/system/system.service.ts","ng://@td-vantage/ui-platform/system/system.module.ts","ng://@td-vantage/ui-platform/user/ldap/ldap.service.ts","ng://@td-vantage/ui-platform/user/user/user.service.ts","ng://@td-vantage/ui-platform/user/group/group.service.ts","ng://@td-vantage/ui-platform/user/user.module.ts","ng://@td-vantage/ui-platform/utilities/user-feedback/error/error.service.ts","ng://@td-vantage/ui-platform/utilities/user-feedback/toast/toast.service.ts","ng://@td-vantage/ui-platform/utilities/user-feedback/user-feedback.module.ts","ng://@td-vantage/ui-platform/utilities/theme/theme.service.ts"],"sourcesContent":["import { Optional, SkipSelf, Provider } from '@angular/core';\nimport { HttpParams, HttpHeaders, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nimport { TdHttp, TdGET, TdPOST, TdParam, TdBody, TdResponse, TdQueryParams } from '@covalent/http';\n\nexport interface IAuditLog {\n  action?: string;\n  component?: string;\n  correlation_id?: string;\n  details?: string;\n  id?: number;\n  logtime?: any;\n  message?: string;\n  result?: boolean;\n  username?: string;\n}\n\n@TdHttp({\n  baseUrl: '/api/audit',\n  baseHeaders: new HttpHeaders({ Accept: 'application/json' }),\n})\nexport class VantageAuditService {\n  @TdGET({\n    path: '/audit/messages',\n    options: {\n      observe: 'response',\n    },\n  })\n  query(\n    @TdQueryParams() params?: HttpParams,\n    @TdResponse() response?: Observable<HttpResponse<any>>,\n  ): Observable<{ total: number; data: IAuditLog[] }> {\n    return response.pipe(\n      map((res: HttpResponse<any>) => {\n        return {\n          total: +res.headers.get('X-Total'),\n          data: <IAuditLog[]>res.body,\n        };\n      }),\n    );\n  }\n\n  @TdPOST({\n    path: '/audit/messages',\n  })\n  create(@TdBody() body: IAuditLog, @TdResponse() response?: Observable<IAuditLog>): Observable<IAuditLog> {\n    return response;\n  }\n\n  @TdGET({\n    path: '/audit/messages/:id',\n  })\n  get(@TdParam('id') id: number | string, @TdResponse() response?: Observable<IAuditLog>): Observable<IAuditLog> {\n    return response;\n  }\n\n  @TdGET({\n    path: '/health',\n  })\n  health(@TdResponse() response?: Observable<HttpResponse<any>>): Observable<boolean> {\n    return response.pipe(\n      catchError((error: HttpErrorResponse) => {\n        return of(false);\n      }),\n      map((res: HttpResponse<any>) => {\n        return !!res;\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_AUDIT_PROVIDER_FACTORY(parent: VantageAuditService): VantageAuditService {\n  return parent || new VantageAuditService();\n}\n\nexport const VANTAGE_AUDIT_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageAuditService,\n  deps: [[new Optional(), new SkipSelf(), VantageAuditService]],\n  useFactory: VANTAGE_AUDIT_PROVIDER_FACTORY,\n};\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VANTAGE_AUDIT_PROVIDER } from './audit.service';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [VANTAGE_AUDIT_PROVIDER],\n})\nexport class VantageAuditModule {}\n","import { Provider, Optional, SkipSelf } from '@angular/core';\nimport { HttpHeaders, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nimport { TdHttp, TdGET, TdPUT, TdDELETE, TdBody, TdResponse } from '@covalent/http';\n\nexport interface ISMTPConfig {\n  server?: string;\n  port?: number;\n  reply_address?: string;\n  smtp_username?: string;\n  smtp_password?: string;\n  use_ssl?: boolean;\n  anon_logon?: boolean;\n  server_timeout?: number;\n}\n\n@TdHttp({\n  baseUrl: '/api/notification',\n  baseHeaders: new HttpHeaders({ Accept: 'application/json' }),\n})\nexport class VantageSMTPService {\n  @TdPUT({\n    path: '/smtp-config',\n  })\n  create(@TdBody() body: ISMTPConfig, @TdResponse() response?: Observable<ISMTPConfig>): Observable<ISMTPConfig> {\n    return response;\n  }\n\n  @TdGET({\n    path: '/smtp-config',\n  })\n  query(@TdResponse() response?: Observable<ISMTPConfig>): Observable<ISMTPConfig> {\n    return response;\n  }\n\n  @TdDELETE({\n    path: '/smtp-config',\n  })\n  delete(@TdResponse() response?: Observable<void>): Observable<void> {\n    return response;\n  }\n\n  @TdGET({\n    path: '/health',\n  })\n  health(@TdResponse() response?: Observable<HttpResponse<any>>): Observable<boolean> {\n    return response.pipe(\n      catchError((error: HttpErrorResponse) => {\n        return of(false);\n      }),\n      map((res: HttpResponse<any>) => {\n        return !!res;\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_SMTP_PROVIDER_FACTORY(parent: VantageSMTPService): VantageSMTPService {\n  return parent || new VantageSMTPService();\n}\n\nexport const VANTAGE_SMTP_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageSMTPService,\n  deps: [[new Optional(), new SkipSelf(), VantageSMTPService]],\n  useFactory: VANTAGE_SMTP_PROVIDER_FACTORY,\n};\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VANTAGE_SMTP_PROVIDER } from './smtp/smtp.service';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [VANTAGE_SMTP_PROVIDER],\n})\nexport class VantageNotificationModule {}\n","import { Optional, SkipSelf, Provider } from '@angular/core';\nimport { HttpParams, HttpHeaders, HttpResponse, HttpErrorResponse } from '@angular/common/http';\n\nimport { Observable, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nimport { TdHttp, TdGET, TdPUT, TdPOST, TdDELETE, TdParam, TdBody, TdResponse, TdQueryParams } from '@covalent/http';\n\nexport enum SystemType {\n  Teradata = 'TERADATA',\n  Aster = 'ASTER',\n  Presto = 'PRESTO',\n}\n\nexport const VANTAGE_SYSTEMS_TYPES: SystemType[] = [SystemType.Teradata, SystemType.Aster, SystemType.Presto];\n\nexport interface ISystemAttributes {\n  attributes?: any;\n}\n\nexport interface IAbstractSystem {\n  host?: string;\n  port?: number;\n  system_type?: SystemType;\n  catalog?: string;\n  schema?: string;\n}\n\nexport interface ISystem extends IAbstractSystem {\n  attributes?: string;\n  data_center?: string;\n  environment?: string;\n  id?: string;\n  nickname?: string;\n  platform_id?: number;\n  system_attributes?: ISystemAttributes;\n  version?: string;\n}\n\nexport interface ITestSystem extends IAbstractSystem {\n  account?: string;\n  default_char_set?: string;\n  default_database?: string;\n  log_mech?: string;\n  password?: string;\n  username?: string;\n}\n\n@TdHttp({\n  baseUrl: '/api/system',\n  baseHeaders: new HttpHeaders({ Accept: 'application/json' }),\n})\nexport class VantageSystemService {\n  @TdGET({\n    path: '/health',\n  })\n  health(@TdResponse() response?: Observable<HttpResponse<any>>): Observable<boolean> {\n    return response.pipe(\n      catchError((error: HttpErrorResponse) => {\n        return of(false);\n      }),\n      map((res: HttpResponse<any>) => {\n        return !!res;\n      }),\n    );\n  }\n\n  @TdGET({\n    path: '/systems',\n    options: {\n      observe: 'response',\n    },\n  })\n  query(\n    @TdQueryParams() params?: HttpParams,\n    @TdResponse() response?: Observable<HttpResponse<any>>,\n  ): Observable<{ total: number; data: ISystem[] }> {\n    return response.pipe(\n      map((res: HttpResponse<any>) => {\n        return {\n          total: +res.headers.get('X-Total'),\n          data: <ISystem[]>res.body,\n        };\n      }),\n    );\n  }\n\n  @TdGET({\n    path: '/systems/:id',\n  })\n  get(@TdParam('id') id: string | number, @TdResponse() response?: Observable<ISystem>): Observable<ISystem> {\n    return response;\n  }\n\n  @TdPOST({\n    path: '/systems',\n  })\n  create(@TdBody() system: ISystem, @TdResponse() response?: Observable<ISystem>): Observable<ISystem> {\n    return response;\n  }\n\n  @TdPUT({\n    path: '/systems/:id',\n  })\n  update(\n    @TdParam('id') id: string,\n    @TdBody() system: ISystem,\n    @TdResponse() response?: Observable<ISystem>,\n  ): Observable<ISystem> {\n    return response;\n  }\n\n  @TdDELETE({\n    path: '/systems/:id',\n  })\n  delete(@TdParam('id') id: string, @TdResponse() response?: Observable<void>): Observable<void> {\n    return response;\n  }\n\n  @TdPOST({\n    path: '/testsystem',\n  })\n  test(@TdBody() system: ITestSystem, @TdResponse() response?: Observable<HttpResponse<any>>): Observable<boolean> {\n    return response.pipe(\n      map((res: HttpResponse<any>) => {\n        return true;\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_SYSTEM_PROVIDER_FACTORY(parent: VantageSystemService): VantageSystemService {\n  return parent || new VantageSystemService();\n}\n\nexport const VANTAGE_SYSTEM_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageSystemService,\n  deps: [[new Optional(), new SkipSelf(), VantageSystemService]],\n  useFactory: VANTAGE_SYSTEM_PROVIDER_FACTORY,\n};\n","import { NgModule, Type, InjectionToken } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VANTAGE_SYSTEM_PROVIDER } from './system.service';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [VANTAGE_SYSTEM_PROVIDER],\n})\nexport class VantageSystemModule {}\n","import { Provider, Optional, SkipSelf } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport { TdHttp, TdGET, TdPUT, TdPOST, TdPATCH, TdDELETE, TdParam, TdBody, TdResponse } from '@covalent/http';\n\nexport enum LDAPEncription {\n  None = 'NONE',\n}\n\nexport interface ILDAPConfig {\n  allowed_groups?: string[];\n  base_dn?: string;\n  config_id?: number;\n  connectionUrl?: string;\n  email_field?: string;\n  encryption?: LDAPEncription;\n  group_id_field?: string;\n  groups_base_dn?: string;\n  id_field?: string;\n  member_field?: string;\n  member_of_field?: string;\n  name_field?: string;\n  port?: number;\n  search_pass?: string;\n  search_user?: string;\n  server?: string;\n  url?: string;\n}\n\n@TdHttp({\n  baseUrl: '/api/user/ldap/config',\n  baseHeaders: new HttpHeaders({ Accept: 'application/json' }),\n})\nexport class VantageLDAPService {\n  @TdGET({\n    path: '/',\n  })\n  query(@TdResponse() response?: Observable<ILDAPConfig[]>): Observable<ILDAPConfig[]> {\n    return response;\n  }\n\n  @TdPOST({\n    path: '/',\n  })\n  create(@TdBody() body: ILDAPConfig, @TdResponse() response?: Observable<ILDAPConfig>): Observable<ILDAPConfig> {\n    return response;\n  }\n\n  @TdPATCH({\n    path: '/:id',\n  })\n  update(\n    @TdParam('id') id: string | number,\n    @TdBody() body: ILDAPConfig,\n    @TdResponse() response?: Observable<ILDAPConfig>,\n  ): Observable<ILDAPConfig> {\n    return response;\n  }\n\n  @TdDELETE({\n    path: '/:id',\n  })\n  delete(@TdParam('id') id: string | number, @TdResponse() response?: Observable<void>): Observable<void> {\n    return response;\n  }\n\n  @TdPOST({\n    path: '/verify',\n    options: {\n      observe: 'response',\n    },\n  })\n  test(@TdBody() body: ILDAPConfig, @TdResponse() response?: Observable<boolean>): Observable<boolean> {\n    return response.pipe(\n      map((res: any) => {\n        return res.status === 200;\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_LDAP_PROVIDER_FACTORY(parent: VantageLDAPService): VantageLDAPService {\n  return parent || new VantageLDAPService();\n}\n\nexport const VANTAGE_LDAP_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageLDAPService,\n  deps: [[new Optional(), new SkipSelf(), VantageLDAPService]],\n  useFactory: VANTAGE_LDAP_PROVIDER_FACTORY,\n};\n","import { Provider, SkipSelf, Optional } from '@angular/core';\nimport { HttpHeaders, HttpResponse, HttpParams } from '@angular/common/http';\nimport { TdHttp, TdGET, TdResponse, TdParam, TdQueryParams } from '@covalent/http';\nimport { Observable, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nexport interface IUser {\n  username?: string;\n  password?: string;\n  email?: string;\n  local?: boolean;\n  admin?: boolean;\n  groups?: string[];\n  display_name?: string;\n  access_token?: string;\n  expires_at?: number;\n}\n\n@TdHttp({\n  baseUrl: '/api/user',\n  baseHeaders: new HttpHeaders({\n    Accept: 'application/json',\n  }),\n})\nexport class VantageUserService {\n  /**\n   * get all users\n   */\n  @TdGET({\n    path: '/users',\n    options: {\n      observe: 'response',\n    },\n  })\n  query(\n    @TdQueryParams() queryParams?: HttpParams,\n    @TdResponse() response?: Observable<HttpResponse<any>>,\n  ): Observable<{ total: number; data: IUser[] }> {\n    return response.pipe(\n      catchError((error: Response) => {\n        return of(error);\n      }),\n      map((res: HttpResponse<any>) => {\n        return {\n          total: +res.headers.get('X-Total'),\n          data: <IUser[]>res.body,\n        };\n      }),\n    );\n  }\n\n  /**\n   * gets a single users information\n   */\n  @TdGET({\n    path: '/users/:username',\n    options: {\n      observe: 'response',\n    },\n  })\n  get(@TdParam('username') id: string, @TdResponse() response?: Observable<HttpResponse<any>>): Observable<IUser> {\n    return response.pipe(\n      catchError((error: Response) => {\n        return of(error);\n      }),\n      map((res: HttpResponse<IUser>) => {\n        return res.body;\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_USER_PROVIDER_FACTORY(parent: VantageUserService): VantageUserService {\n  return parent || new VantageUserService();\n}\n\nexport const VANTAGE_USER_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageUserService,\n  deps: [[new Optional(), new SkipSelf(), VantageUserService]],\n  useFactory: VANTAGE_USER_PROVIDER_FACTORY,\n};\n","import { Provider, SkipSelf, Optional } from '@angular/core';\nimport { HttpHeaders, HttpResponse, HttpParams } from '@angular/common/http';\nimport { TdHttp, TdGET, TdResponse, TdQueryParams } from '@covalent/http';\nimport { Observable, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nexport interface IGroup {\n  name?: string;\n  description?: string;\n  id?: string;\n  display_name?: string;\n  users?: string[];\n}\n\n@TdHttp({\n  baseUrl: '/api/user',\n  baseHeaders: new HttpHeaders({\n    Accept: 'application/json',\n  }),\n})\nexport class VantageGroupService {\n  /**\n   * get groups in paginated form via query string\n   */\n  @TdGET({\n    path: '/groups',\n    options: {\n      observe: 'response',\n    },\n  })\n  query(\n    @TdQueryParams() queryParams?: HttpParams,\n    @TdResponse() response?: Observable<HttpResponse<any>>,\n  ): Observable<{ total: number; data: IGroup[] }> {\n    return response.pipe(\n      catchError((error: Response) => {\n        return of(error);\n      }),\n      map((res: HttpResponse<any>) => {\n        return {\n          total: +res.headers.get('X-Total'),\n          data: <IGroup[]>res.body,\n        };\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_GROUP_PROVIDER_FACTORY(parent: VantageGroupService): VantageGroupService {\n  return parent || new VantageGroupService();\n}\n\nexport const VANTAGE_GROUP_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageGroupService,\n  deps: [[new Optional(), new SkipSelf(), VantageGroupService]],\n  useFactory: VANTAGE_GROUP_PROVIDER_FACTORY,\n};\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VANTAGE_LDAP_PROVIDER } from './ldap/ldap.service';\nimport { VANTAGE_USER_PROVIDER } from './user/user.service';\nimport { VANTAGE_GROUP_PROVIDER } from './group/group.service';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [VANTAGE_LDAP_PROVIDER, VANTAGE_USER_PROVIDER, VANTAGE_GROUP_PROVIDER],\n})\nexport class VantageUserModule {}\n","import { Injectable, Provider, SkipSelf, Optional } from '@angular/core';\n\nimport { MatDialogRef } from '@angular/material/dialog';\n\nimport { TdDialogService, IAlertConfig, TdAlertDialogComponent } from '@covalent/core/dialogs';\n\nimport { TranslateService } from '@ngx-translate/core';\n\nexport class VantageError {\n  message: string;\n  error: number;\n}\n\n@Injectable()\nexport class VantageErrorService {\n  constructor(private _dialogService: TdDialogService, private _translate: TranslateService) {}\n\n  open(error: VantageError): MatDialogRef<TdAlertDialogComponent> {\n    if (error) {\n      const config: IAlertConfig = {\n        title: this._translate.instant('THERE_WAS_A_PROBLEM'),\n        message: error.message,\n        disableClose: true,\n        closeButton: this._translate.instant('CLOSE'),\n      };\n      if (error.error) {\n        config.message += ` (${error.error.toString()})`;\n      }\n      if (config.message || config.title) {\n        return this._dialogService.openAlert(config);\n      }\n    }\n  }\n}\n\nexport function VANTAGE_ERROR_PROVIDER_FACTORY(\n  parent: VantageErrorService,\n  dialogService: TdDialogService,\n  translate: TranslateService,\n): VantageErrorService {\n  return parent || new VantageErrorService(dialogService, translate);\n}\n\nexport const VANTAGE_ERROR_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageErrorService,\n  deps: [[new Optional(), new SkipSelf(), VantageErrorService], TdDialogService, TranslateService],\n  useFactory: VANTAGE_ERROR_PROVIDER_FACTORY,\n};\n","import { Injectable, Provider, Optional, SkipSelf } from '@angular/core';\n\nimport { MatSnackBar } from '@angular/material/snack-bar';\n\nimport { TdMediaService } from '@covalent/core/media';\n\n@Injectable()\nexport class VantageToastService {\n  constructor(private _snackBarService: MatSnackBar, private _media: TdMediaService) {}\n\n  open(message: string, time: number = 3000): void {\n    if (message) {\n      this._snackBarService.open(message, undefined, {\n        duration: time,\n        horizontalPosition: this._media && this._media.query('gt-sm') ? 'end' : 'center',\n      });\n    }\n  }\n}\n\nexport function VANTAGE_TOAST_PROVIDER_FACTORY(\n  parent: VantageToastService,\n  snackBar: MatSnackBar,\n  media: TdMediaService,\n): VantageToastService {\n  return parent || new VantageToastService(snackBar, media);\n}\n\nexport const VANTAGE_TOAST_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageToastService,\n  deps: [[new Optional(), new SkipSelf(), VantageToastService], MatSnackBar, [new Optional(), TdMediaService]],\n  useFactory: VANTAGE_TOAST_PROVIDER_FACTORY,\n};\n","import { NgModule } from '@angular/core';\n\nimport { CommonModule } from '@angular/common';\n\nimport { MatSnackBarModule } from '@angular/material/snack-bar';\n\nimport { CovalentDialogsModule } from '@covalent/core/dialogs';\nimport { CovalentMediaModule } from '@covalent/core/media';\n\nimport { VANTAGE_ERROR_PROVIDER } from './error/error.service';\nimport { VANTAGE_TOAST_PROVIDER } from './toast/toast.service';\n\n@NgModule({\n  imports: [CommonModule, MatSnackBarModule, CovalentDialogsModule, CovalentMediaModule],\n  providers: [VANTAGE_ERROR_PROVIDER, VANTAGE_TOAST_PROVIDER],\n})\nexport class VantageUserFeedbackModule {}\n","import { Injectable, Renderer2, Inject, RendererFactory2 } from '@angular/core';\nimport { fromEvent, BehaviorSubject, Observable } from 'rxjs';\nimport { filter } from 'rxjs/operators';\nimport { DOCUMENT } from '@angular/common';\n\nconst THEME_LOCAL_STORAGE_KEY: string = 'vantage.theme';\n\nexport enum VantageTheme {\n  DARK = 'dark-theme',\n  LIGHT = 'light-theme',\n}\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class VantageThemeService {\n  private _renderer2: Renderer2;\n\n  private readonly _activeThemeSubject: BehaviorSubject<VantageTheme> = new BehaviorSubject<VantageTheme>(\n    <VantageTheme>localStorage.getItem(THEME_LOCAL_STORAGE_KEY),\n  );\n  readonly activeTheme$: Observable<VantageTheme> = this._activeThemeSubject.asObservable();\n\n  constructor(@Inject(DOCUMENT) private _document: any, private rendererFactory: RendererFactory2) {\n    this._renderer2 = rendererFactory.createRenderer(undefined, undefined);\n    fromEvent(window, 'storage')\n      .pipe(filter((event: StorageEvent) => event.key === THEME_LOCAL_STORAGE_KEY))\n      .subscribe((event: StorageEvent) => this.applyTheme(<VantageTheme>event.newValue));\n  }\n\n  private get activeTheme(): VantageTheme {\n    return this._activeThemeSubject.getValue();\n  }\n\n  private set activeTheme(theme: VantageTheme) {\n    this._activeThemeSubject.next(theme);\n  }\n\n  public get darkThemeIsActive(): boolean {\n    return this.activeTheme === VantageTheme.DARK;\n  }\n  public get lightThemeIsActive(): boolean {\n    return this.activeTheme === VantageTheme.LIGHT;\n  }\n\n  public applyLightTheme(): void {\n    this.applyTheme(VantageTheme.LIGHT);\n  }\n  public applyDarkTheme(): void {\n    this.applyTheme(VantageTheme.DARK);\n  }\n\n  private applyTheme(theme: VantageTheme): void {\n    this._renderer2.removeClass(\n      this._document.querySelector('html'),\n      theme === VantageTheme.DARK ? VantageTheme.LIGHT : VantageTheme.DARK,\n    );\n    localStorage.setItem(THEME_LOCAL_STORAGE_KEY, theme);\n    this._renderer2.addClass(this._document.querySelector('html'), theme);\n    this.activeTheme = <VantageTheme>localStorage.getItem(THEME_LOCAL_STORAGE_KEY);\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAQA,wBAUC;;;IATC,2BAAgB;;IAChB,8BAAmB;;IACnB,mCAAwB;;IACxB,4BAAiB;;IACjB,uBAAY;;IACZ,4BAAc;;IACd,4BAAiB;;IACjB,2BAAiB;;IACjB,6BAAkB;;IAOP,mBAAmB,SAAnB,mBAAmB;;;;;;IAO9B,KAAK,CACc,MAAmB,EACtB,QAAwC;QAEtD,OAAO,QAAQ,CAAC,IAAI,CAClB,GAAG;;;;QAAC,CAAC,GAAsB;YACzB,OAAO;gBACL,KAAK,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC;gBAClC,IAAI,qBAAe,GAAG,CAAC,IAAI,EAAA;aAC5B,CAAC;SACH,EAAC,CACH,CAAC;KACH;;;;;;IAKD,MAAM,CAAW,IAAe,EAAgB,QAAgC;QAC9E,OAAO,QAAQ,CAAC;KACjB;;;;;;IAKD,GAAG,CAAgB,EAAmB,EAAgB,QAAgC;QACpF,OAAO,QAAQ,CAAC;KACjB;;;;;IAKD,MAAM,CAAe,QAAwC;QAC3D,OAAO,QAAQ,CAAC,IAAI,CAClB,UAAU;;;;QAAC,CAAC,KAAwB;YAClC,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC;SAClB,EAAC,EACF,GAAG;;;;QAAC,CAAC,GAAsB;YACzB,OAAO,CAAC,CAAC,GAAG,CAAC;SACd,EAAC,CACH,CAAC;KACH;CACF,CAAA;AAzCC;IANC,KAAK,CAAC;QACL,IAAI,EAAE,iBAAiB;QACvB,OAAO,EAAE;YACP,OAAO,EAAE,UAAU;SACpB;KACF,CAAC;IAEC,WAAA,aAAa,EAAE,CAAA;IACf,WAAA,UAAU,EAAE,CAAA;;qCADa,UAAU;QACX,UAAU;oCAClC,UAAU;gDASZ;AAKD;IAHC,MAAM,CAAC;QACN,IAAI,EAAE,iBAAiB;KACxB,CAAC;IACM,WAAA,MAAM,EAAE,CAAA,EAAmB,WAAA,UAAU,EAAE,CAAA;;6CAAY,UAAU;oCAAc,UAAU;iDAE5F;AAKD;IAHC,KAAK,CAAC;QACL,IAAI,EAAE,qBAAqB;KAC5B,CAAC;IACG,WAAA,OAAO,CAAC,IAAI,CAAC,CAAA,EAAuB,WAAA,UAAU,EAAE,CAAA;;6CAAY,UAAU;oCAAc,UAAU;8CAElG;AAKD;IAHC,KAAK,CAAC;QACL,IAAI,EAAE,SAAS;KAChB,CAAC;IACM,WAAA,UAAU,EAAE,CAAA;;qCAAY,UAAU;oCAAsB,UAAU;iDASzE;AA/CU,mBAAmB;IAJ/B,MAAM,CAAC;QACN,OAAO,EAAE,YAAY;QACrB,WAAW,EAAE,IAAI,WAAW,CAAC,EAAE,MAAM,EAAE,kBAAkB,EAAE,CAAC;KAC7D,CAAC;GACW,mBAAmB,CAgD/B;;;;;AAED,SAAgB,8BAA8B,CAAC,MAA2B;IACxE,OAAO,MAAM,IAAI,IAAI,mBAAmB,EAAE,CAAC;CAC5C;;AAED,MAAa,sBAAsB,GAAa;;IAE9C,OAAO,EAAE,mBAAmB;IAC5B,IAAI,EAAE,CAAC,CAAC,IAAI,QAAQ,EAAE,EAAE,IAAI,QAAQ,EAAE,EAAE,mBAAmB,CAAC,CAAC;IAC7D,UAAU,EAAE,8BAA8B;CAC3C;;;;;;ACnFD,MASa,kBAAkB;;;YAJ9B,QAAQ,SAAC;gBACR,OAAO,EAAE,CAAC,YAAY,CAAC;gBACvB,SAAS,EAAE,CAAC,sBAAsB,CAAC;aACpC;;;;;;;;;;;;;;;;;;;;ACAD,0BASC;;;IARC,6BAAgB;;IAChB,2BAAc;;IACd,oCAAuB;;IACvB,oCAAuB;;IACvB,oCAAuB;;IACvB,8BAAkB;;IAClB,iCAAqB;;IACrB,qCAAwB;;IAOb,kBAAkB,SAAlB,kBAAkB;;;;;;IAI7B,MAAM,CAAW,IAAiB,EAAgB,QAAkC;QAClF,OAAO,QAAQ,CAAC;KACjB;;;;;IAKD,KAAK,CAAe,QAAkC;QACpD,OAAO,QAAQ,CAAC;KACjB;;;;;IAKD,MAAM,CAAe,QAA2B;QAC9C,OAAO,QAAQ,CAAC;KACjB;;;;;IAKD,MAAM,CAAe,QAAwC;QAC3D,OAAO,QAAQ,CAAC,IAAI,CAClB,UAAU;;;;QAAC,CAAC,KAAwB;YAClC,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC;SAClB,EAAC,EACF,GAAG;;;;QAAC,CAAC,GAAsB;YACzB,OAAO,CAAC,CAAC,GAAG,CAAC;SACd,EAAC,CACH,CAAC;KACH;CACF,CAAA;AA/BC;IAHC,KAAK,CAAC;QACL,IAAI,EAAE,cAAc;KACrB,CAAC;IACM,WAAA,MAAM,EAAE,CAAA,EAAqB,WAAA,UAAU,EAAE,CAAA;;6CAAY,UAAU;oCAAgB,UAAU;gDAEhG;AAKD;IAHC,KAAK,CAAC;QACL,IAAI,EAAE,cAAc;KACrB,CAAC;IACK,WAAA,UAAU,EAAE,CAAA;;qCAAY,UAAU;oCAAgB,UAAU;+CAElE;AAKD;IAHC,QAAQ,CAAC;QACR,IAAI,EAAE,cAAc;KACrB,CAAC;IACM,WAAA,UAAU,EAAE,CAAA;;qCAAY,UAAU;oCAAS,UAAU;gDAE5D;AAKD;IAHC,KAAK,CAAC;QACL,IAAI,EAAE,SAAS;KAChB,CAAC;IACM,WAAA,UAAU,EAAE,CAAA;;qCAAY,UAAU;oCAAsB,UAAU;gDASzE;AAlCU,kBAAkB;IAJ9B,MAAM,CAAC;QACN,OAAO,EAAE,mBAAmB;QAC5B,WAAW,EAAE,IAAI,WAAW,CAAC,EAAE,MAAM,EAAE,kBAAkB,EAAE,CAAC;KAC7D,CAAC;GACW,kBAAkB,CAmC9B;;;;;AAED,SAAgB,6BAA6B,CAAC,MAA0B;IACtE,OAAO,MAAM,IAAI,IAAI,kBAAkB,EAAE,CAAC;CAC3C;;AAED,MAAa,qBAAqB,GAAa;;IAE7C,OAAO,EAAE,kBAAkB;IAC3B,IAAI,EAAE,CAAC,CAAC,IAAI,QAAQ,EAAE,EAAE,IAAI,QAAQ,EAAE,EAAE,kBAAkB,CAAC,CAAC;IAC5D,UAAU,EAAE,6BAA6B;CAC1C;;;;;;ACrED,MASa,yBAAyB;;;YAJrC,QAAQ,SAAC;gBACR,OAAO,EAAE,CAAC,YAAY,CAAC;gBACvB,SAAS,EAAE,CAAC,qBAAqB,CAAC;aACnC;;;;;;;;;;;;;;;;;;;ICCC,UAAW,UAAU;IACrB,OAAQ,OAAO;IACf,QAAS,QAAQ;;;AAGnB,MAAa,qBAAqB,GAAiB,CAAC,UAAU,CAAC,QAAQ,EAAE,UAAU,CAAC,KAAK,EAAE,UAAU,CAAC,MAAM,CAAC;;;;AAE7G,gCAEC;;;IADC,uCAAiB;;;;;AAGnB,8BAMC;;;IALC,+BAAc;;IACd,+BAAc;;IACd,sCAAyB;;IACzB,kCAAiB;;IACjB,iCAAgB;;;;;AAGlB,sBASC;;;IARC,6BAAoB;;IACpB,8BAAqB;;IACrB,8BAAqB;;IACrB,qBAAY;;IACZ,2BAAkB;;IAClB,8BAAqB;;IACrB,oCAAsC;;IACtC,0BAAiB;;;;;AAGnB,0BAOC;;;IANC,8BAAiB;;IACjB,uCAA0B;;IAC1B,uCAA0B;;IAC1B,+BAAkB;;IAClB,+BAAkB;;IAClB,+BAAkB;;IAOP,oBAAoB,SAApB,oBAAoB;;;;;IAI/B,MAAM,CAAe,QAAwC;QAC3D,OAAO,QAAQ,CAAC,IAAI,CAClB,UAAU;;;;QAAC,CAAC,KAAwB;YAClC,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC;SAClB,EAAC,EACF,GAAG;;;;QAAC,CAAC,GAAsB;YACzB,OAAO,CAAC,CAAC,GAAG,CAAC;SACd,EAAC,CACH,CAAC;KACH;;;;;;IAQD,KAAK,CACc,MAAmB,EACtB,QAAwC;QAEtD,OAAO,QAAQ,CAAC,IAAI,CAClB,GAAG;;;;QAAC,CAAC,GAAsB;YACzB,OAAO;gBACL,KAAK,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC;gBAClC,IAAI,qBAAa,GAAG,CAAC,IAAI,EAAA;aAC1B,CAAC;SACH,EAAC,CACH,CAAC;KACH;;;;;;IAKD,GAAG,CAAgB,EAAmB,EAAgB,QAA8B;QAClF,OAAO,QAAQ,CAAC;KACjB;;;;;;IAKD,MAAM,CAAW,MAAe,EAAgB,QAA8B;QAC5E,OAAO,QAAQ,CAAC;KACjB;;;;;;;IAKD,MAAM,CACW,EAAU,EACf,MAAe,EACX,QAA8B;QAE5C,OAAO,QAAQ,CAAC;KACjB;;;;;;IAKD,MAAM,CAAgB,EAAU,EAAgB,QAA2B;QACzE,OAAO,QAAQ,CAAC;KACjB;;;;;;IAKD,IAAI,CAAW,MAAmB,EAAgB,QAAwC;QACxF,OAAO,QAAQ,CAAC,IAAI,CAClB,GAAG;;;;QAAC,CAAC,GAAsB;YACzB,OAAO,IAAI,CAAC;SACb,EAAC,CACH,CAAC;KACH;CACF,CAAA;AAzEC;IAHC,KAAK,CAAC;QACL,IAAI,EAAE,SAAS;KAChB,CAAC;IACM,WAAA,UAAU,EAAE,CAAA;;qCAAY,UAAU;oCAAsB,UAAU;kDASzE;AAQD;IANC,KAAK,CAAC;QACL,IAAI,EAAE,UAAU;QAChB,OAAO,EAAE;YACP,OAAO,EAAE,UAAU;SACpB;KACF,CAAC;IAEC,WAAA,aAAa,EAAE,CAAA;IACf,WAAA,UAAU,EAAE,CAAA;;qCADa,UAAU;QACX,UAAU;oCAClC,UAAU;iDASZ;AAKD;IAHC,KAAK,CAAC;QACL,IAAI,EAAE,cAAc;KACrB,CAAC;IACG,WAAA,OAAO,CAAC,IAAI,CAAC,CAAA,EAAuB,WAAA,UAAU,EAAE,CAAA;;6CAAY,UAAU;oCAAY,UAAU;+CAEhG;AAKD;IAHC,MAAM,CAAC;QACN,IAAI,EAAE,UAAU;KACjB,CAAC;IACM,WAAA,MAAM,EAAE,CAAA,EAAmB,WAAA,UAAU,EAAE,CAAA;;6CAAY,UAAU;oCAAY,UAAU;kDAE1F;AAKD;IAHC,KAAK,CAAC;QACL,IAAI,EAAE,cAAc;KACrB,CAAC;IAEC,WAAA,OAAO,CAAC,IAAI,CAAC,CAAA;IACb,WAAA,MAAM,EAAE,CAAA;IACR,WAAA,UAAU,EAAE,CAAA;;qDAAY,UAAU;oCAClC,UAAU;kDAEZ;AAKD;IAHC,QAAQ,CAAC;QACR,IAAI,EAAE,cAAc;KACrB,CAAC;IACM,WAAA,OAAO,CAAC,IAAI,CAAC,CAAA,EAAc,WAAA,UAAU,EAAE,CAAA;;6CAAY,UAAU;oCAAS,UAAU;kDAEvF;AAKD;IAHC,MAAM,CAAC;QACN,IAAI,EAAE,aAAa;KACpB,CAAC;IACI,WAAA,MAAM,EAAE,CAAA,EAAuB,WAAA,UAAU,EAAE,CAAA;;6CAAY,UAAU;oCAAsB,UAAU;gDAMtG;AA5EU,oBAAoB;IAJhC,MAAM,CAAC;QACN,OAAO,EAAE,aAAa;QACtB,WAAW,EAAE,IAAI,WAAW,CAAC,EAAE,MAAM,EAAE,kBAAkB,EAAE,CAAC;KAC7D,CAAC;GACW,oBAAoB,CA6EhC;;;;;AAED,SAAgB,+BAA+B,CAAC,MAA4B;IAC1E,OAAO,MAAM,IAAI,IAAI,oBAAoB,EAAE,CAAC;CAC7C;;AAED,MAAa,uBAAuB,GAAa;;IAE/C,OAAO,EAAE,oBAAoB;IAC7B,IAAI,EAAE,CAAC,CAAC,IAAI,QAAQ,EAAE,EAAE,IAAI,QAAQ,EAAE,EAAE,oBAAoB,CAAC,CAAC;IAC9D,UAAU,EAAE,+BAA+B;CAC5C;;;;;;AC5ID,MASa,mBAAmB;;;YAJ/B,QAAQ,SAAC;gBACR,OAAO,EAAE,CAAC,YAAY,CAAC;gBACvB,SAAS,EAAE,CAAC,uBAAuB,CAAC;aACrC;;;;;;;;;;;;;;;;;;;ICCC,MAAO,MAAM;;;;;AAGf,0BAkBC;;;IAjBC,qCAA0B;;IAC1B,8BAAiB;;IACjB,gCAAmB;;IACnB,oCAAuB;;IACvB,kCAAqB;;IACrB,iCAA4B;;IAC5B,qCAAwB;;IACxB,qCAAwB;;IACxB,+BAAkB;;IAClB,mCAAsB;;IACtB,sCAAyB;;IACzB,iCAAoB;;IACpB,2BAAc;;IACd,kCAAqB;;IACrB,kCAAqB;;IACrB,6BAAgB;;IAChB,0BAAa;;IAOF,kBAAkB,SAAlB,kBAAkB;;;;;IAI7B,KAAK,CAAe,QAAoC;QACtD,OAAO,QAAQ,CAAC;KACjB;;;;;;IAKD,MAAM,CAAW,IAAiB,EAAgB,QAAkC;QAClF,OAAO,QAAQ,CAAC;KACjB;;;;;;;IAKD,MAAM,CACW,EAAmB,EACxB,IAAiB,EACb,QAAkC;QAEhD,OAAO,QAAQ,CAAC;KACjB;;;;;;IAKD,MAAM,CAAgB,EAAmB,EAAgB,QAA2B;QAClF,OAAO,QAAQ,CAAC;KACjB;;;;;;IAQD,IAAI,CAAW,IAAiB,EAAgB,QAA8B;QAC5E,OAAO,QAAQ,CAAC,IAAI,CAClB,GAAG;;;;QAAC,CAAC,GAAQ;YACX,OAAO,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC;SAC3B,EAAC,CACH,CAAC;KACH;CACF,CAAA;AA1CC;IAHC,KAAK,CAAC;QACL,IAAI,EAAE,GAAG;KACV,CAAC;IACK,WAAA,UAAU,EAAE,CAAA;;qCAAY,UAAU;oCAAkB,UAAU;+CAEpE;AAKD;IAHC,MAAM,CAAC;QACN,IAAI,EAAE,GAAG;KACV,CAAC;IACM,WAAA,MAAM,EAAE,CAAA,EAAqB,WAAA,UAAU,EAAE,CAAA;;6CAAY,UAAU;oCAAgB,UAAU;gDAEhG;AAKD;IAHC,OAAO,CAAC;QACP,IAAI,EAAE,MAAM;KACb,CAAC;IAEC,WAAA,OAAO,CAAC,IAAI,CAAC,CAAA;IACb,WAAA,MAAM,EAAE,CAAA;IACR,WAAA,UAAU,EAAE,CAAA;;qDAAY,UAAU;oCAClC,UAAU;gDAEZ;AAKD;IAHC,QAAQ,CAAC;QACR,IAAI,EAAE,MAAM;KACb,CAAC;IACM,WAAA,OAAO,CAAC,IAAI,CAAC,CAAA,EAAuB,WAAA,UAAU,EAAE,CAAA;;6CAAY,UAAU;oCAAS,UAAU;gDAEhG;AAQD;IANC,MAAM,CAAC;QACN,IAAI,EAAE,SAAS;QACf,OAAO,EAAE;YACP,OAAO,EAAE,UAAU;SACpB;KACF,CAAC;IACI,WAAA,MAAM,EAAE,CAAA,EAAqB,WAAA,UAAU,EAAE,CAAA;;6CAAY,UAAU;oCAAY,UAAU;8CAM1F;AA7CU,kBAAkB;IAJ9B,MAAM,CAAC;QACN,OAAO,EAAE,uBAAuB;QAChC,WAAW,EAAE,IAAI,WAAW,CAAC,EAAE,MAAM,EAAE,kBAAkB,EAAE,CAAC;KAC7D,CAAC;GACW,kBAAkB,CA8C9B;;;;;AAED,SAAgB,6BAA6B,CAAC,MAA0B;IACtE,OAAO,MAAM,IAAI,IAAI,kBAAkB,EAAE,CAAC;CAC3C;;AAED,MAAa,qBAAqB,GAAa;;IAE7C,OAAO,EAAE,kBAAkB;IAC3B,IAAI,EAAE,CAAC,CAAC,IAAI,QAAQ,EAAE,EAAE,IAAI,QAAQ,EAAE,EAAE,kBAAkB,CAAC,CAAC;IAC5D,UAAU,EAAE,6BAA6B;CAC1C;;;;;;;;;ACvFD,oBAUC;;;IATC,yBAAkB;;IAClB,yBAAkB;;IAClB,sBAAe;;IACf,sBAAgB;;IAChB,sBAAgB;;IAChB,uBAAkB;;IAClB,6BAAsB;;IACtB,6BAAsB;;IACtB,2BAAoB;;IAST,kBAAkB,SAAlB,kBAAkB;;;;;;;IAU7B,KAAK,CACc,WAAwB,EAC3B,QAAwC;QAEtD,OAAO,QAAQ,CAAC,IAAI,CAClB,UAAU;;;;QAAC,CAAC,KAAe;YACzB,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC;SAClB,EAAC,EACF,GAAG;;;;QAAC,CAAC,GAAsB;YACzB,OAAO;gBACL,KAAK,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC;gBAClC,IAAI,qBAAW,GAAG,CAAC,IAAI,EAAA;aACxB,CAAC;SACH,EAAC,CACH,CAAC;KACH;;;;;;;IAWD,GAAG,CAAsB,EAAU,EAAgB,QAAwC;QACzF,OAAO,QAAQ,CAAC,IAAI,CAClB,UAAU;;;;QAAC,CAAC,KAAe;YACzB,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC;SAClB,EAAC,EACF,GAAG;;;;QAAC,CAAC,GAAwB;YAC3B,OAAO,GAAG,CAAC,IAAI,CAAC;SACjB,EAAC,CACH,CAAC;KACH;CACF,CAAA;AApCC;IANC,KAAK,CAAC;QACL,IAAI,EAAE,QAAQ;QACd,OAAO,EAAE;YACP,OAAO,EAAE,UAAU;SACpB;KACF,CAAC;IAEC,WAAA,aAAa,EAAE,CAAA;IACf,WAAA,UAAU,EAAE,CAAA;;qCADkB,UAAU;QAChB,UAAU;oCAClC,UAAU;+CAYZ;AAWD;IANC,KAAK,CAAC;QACL,IAAI,EAAE,kBAAkB;QACxB,OAAO,EAAE;YACP,OAAO,EAAE,UAAU;SACpB;KACF,CAAC;IACG,WAAA,OAAO,CAAC,UAAU,CAAC,CAAA,EAAc,WAAA,UAAU,EAAE,CAAA;;6CAAY,UAAU;oCAAsB,UAAU;6CASvG;AA7CU,kBAAkB;IAN9B,MAAM,CAAC;QACN,OAAO,EAAE,WAAW;QACpB,WAAW,EAAE,IAAI,WAAW,CAAC;YAC3B,MAAM,EAAE,kBAAkB;SAC3B,CAAC;KACH,CAAC;GACW,kBAAkB,CA8C9B;;;;;AAED,SAAgB,6BAA6B,CAAC,MAA0B;IACtE,OAAO,MAAM,IAAI,IAAI,kBAAkB,EAAE,CAAC;CAC3C;;AAED,MAAa,qBAAqB,GAAa;;IAE7C,OAAO,EAAE,kBAAkB;IAC3B,IAAI,EAAE,CAAC,CAAC,IAAI,QAAQ,EAAE,EAAE,IAAI,QAAQ,EAAE,EAAE,kBAAkB,CAAC,CAAC;IAC5D,UAAU,EAAE,6BAA6B;CAC1C;;;;;;;;;AC3ED,qBAMC;;;IALC,sBAAc;;IACd,6BAAqB;;IACrB,oBAAY;;IACZ,8BAAsB;;IACtB,uBAAiB;;IASN,mBAAmB,SAAnB,mBAAmB;;;;;;;IAU9B,KAAK,CACc,WAAwB,EAC3B,QAAwC;QAEtD,OAAO,QAAQ,CAAC,IAAI,CAClB,UAAU;;;;QAAC,CAAC,KAAe;YACzB,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC;SAClB,EAAC,EACF,GAAG;;;;QAAC,CAAC,GAAsB;YACzB,OAAO;gBACL,KAAK,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC;gBAClC,IAAI,qBAAY,GAAG,CAAC,IAAI,EAAA;aACzB,CAAC;SACH,EAAC,CACH,CAAC;KACH;CACF,CAAA;AAhBC;IANC,KAAK,CAAC;QACL,IAAI,EAAE,SAAS;QACf,OAAO,EAAE;YACP,OAAO,EAAE,UAAU;SACpB;KACF,CAAC;IAEC,WAAA,aAAa,EAAE,CAAA;IACf,WAAA,UAAU,EAAE,CAAA;;qCADkB,UAAU;QAChB,UAAU;oCAClC,UAAU;gDAYZ;AAzBU,mBAAmB;IAN/B,MAAM,CAAC;QACN,OAAO,EAAE,WAAW;QACpB,WAAW,EAAE,IAAI,WAAW,CAAC;YAC3B,MAAM,EAAE,kBAAkB;SAC3B,CAAC;KACH,CAAC;GACW,mBAAmB,CA0B/B;;;;;AAED,SAAgB,8BAA8B,CAAC,MAA2B;IACxE,OAAO,MAAM,IAAI,IAAI,mBAAmB,EAAE,CAAC;CAC5C;;AAED,MAAa,sBAAsB,GAAa;;IAE9C,OAAO,EAAE,mBAAmB;IAC5B,IAAI,EAAE,CAAC,CAAC,IAAI,QAAQ,EAAE,EAAE,IAAI,QAAQ,EAAE,EAAE,mBAAmB,CAAC,CAAC;IAC7D,UAAU,EAAE,8BAA8B;CAC3C;;;;;;ACzDD,MAWa,iBAAiB;;;YAJ7B,QAAQ,SAAC;gBACR,OAAO,EAAE,CAAC,YAAY,CAAC;gBACvB,SAAS,EAAE,CAAC,qBAAqB,EAAE,qBAAqB,EAAE,sBAAsB,CAAC;aAClF;;;;;;;;;;;;;;;;;ACVD,MAQa,YAAY;CAGxB;;;IAFC,+BAAgB;;IAChB,6BAAc;;AAIhB,MAAa,mBAAmB;;;;;IAC9B,YAAoB,cAA+B,EAAU,UAA4B;QAArE,mBAAc,GAAd,cAAc,CAAiB;QAAU,eAAU,GAAV,UAAU,CAAkB;KAAI;;;;;IAE7F,IAAI,CAAC,KAAmB;QACtB,IAAI,KAAK,EAAE;;kBACH,MAAM,GAAiB;gBAC3B,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,qBAAqB,CAAC;gBACrD,OAAO,EAAE,KAAK,CAAC,OAAO;gBACtB,YAAY,EAAE,IAAI;gBAClB,WAAW,EAAE,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC;aAC9C;YACD,IAAI,KAAK,CAAC,KAAK,EAAE;gBACf,MAAM,CAAC,OAAO,IAAI,KAAK,KAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,CAAC;aAClD;YACD,IAAI,MAAM,CAAC,OAAO,IAAI,MAAM,CAAC,KAAK,EAAE;gBAClC,OAAO,IAAI,CAAC,cAAc,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;aAC9C;SACF;KACF;;;YAnBF,UAAU;;;;YATF,eAAe;YAEf,gBAAgB;;;;;;;IASX,6CAAuC;;;;;IAAE,yCAAoC;;;;;;;;AAoB3F,SAAgB,8BAA8B,CAC5C,MAA2B,EAC3B,aAA8B,EAC9B,SAA2B;IAE3B,OAAO,MAAM,IAAI,IAAI,mBAAmB,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;CACpE;;AAED,MAAa,sBAAsB,GAAa;;IAE9C,OAAO,EAAE,mBAAmB;IAC5B,IAAI,EAAE,CAAC,CAAC,IAAI,QAAQ,EAAE,EAAE,IAAI,QAAQ,EAAE,EAAE,mBAAmB,CAAC,EAAE,eAAe,EAAE,gBAAgB,CAAC;IAChG,UAAU,EAAE,8BAA8B;CAC3C;;;;;;AChDD,MAOa,mBAAmB;;;;;IAC9B,YAAoB,gBAA6B,EAAU,MAAsB;QAA7D,qBAAgB,GAAhB,gBAAgB,CAAa;QAAU,WAAM,GAAN,MAAM,CAAgB;KAAI;;;;;;IAErF,IAAI,CAAC,OAAe,EAAE,OAAe,IAAI;QACvC,IAAI,OAAO,EAAE;YACX,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,OAAO,EAAE,SAAS,EAAE;gBAC7C,QAAQ,EAAE,IAAI;gBACd,kBAAkB,EAAE,IAAI,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,KAAK,GAAG,QAAQ;aACjF,CAAC,CAAC;SACJ;KACF;;;YAXF,UAAU;;;;YAJF,WAAW;YAEX,cAAc;;;;;;;IAIT,+CAAqC;;;;;IAAE,qCAA8B;;;;;;;;AAYnF,SAAgB,8BAA8B,CAC5C,MAA2B,EAC3B,QAAqB,EACrB,KAAqB;IAErB,OAAO,MAAM,IAAI,IAAI,mBAAmB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;CAC3D;;AAED,MAAa,sBAAsB,GAAa;;IAE9C,OAAO,EAAE,mBAAmB;IAC5B,IAAI,EAAE,CAAC,CAAC,IAAI,QAAQ,EAAE,EAAE,IAAI,QAAQ,EAAE,EAAE,mBAAmB,CAAC,EAAE,WAAW,EAAE,CAAC,IAAI,QAAQ,EAAE,EAAE,cAAc,CAAC,CAAC;IAC5G,UAAU,EAAE,8BAA8B;CAC3C;;;;;;ACjCD,MAgBa,yBAAyB;;;YAJrC,QAAQ,SAAC;gBACR,OAAO,EAAE,CAAC,YAAY,EAAE,iBAAiB,EAAE,qBAAqB,EAAE,mBAAmB,CAAC;gBACtF,SAAS,EAAE,CAAC,sBAAsB,EAAE,sBAAsB,CAAC;aAC5D;;;;;;;;;;;;;;;;;ACfD;MAKM,uBAAuB,GAAW,eAAe;;;IAGrD,MAAO,YAAY;IACnB,OAAQ,aAAa;;MAMV,mBAAmB;;;;;IAQ9B,YAAsC,SAAc,EAAU,eAAiC;QAAzD,cAAS,GAAT,SAAS,CAAK;QAAU,oBAAe,GAAf,eAAe,CAAkB;QAL9E,wBAAmB,GAAkC,IAAI,eAAe,oBACzE,YAAY,CAAC,OAAO,CAAC,uBAAuB,CAAC,GAC5D,CAAC;QACO,iBAAY,GAA6B,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,CAAC;QAGxF,IAAI,CAAC,UAAU,GAAG,eAAe,CAAC,cAAc,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC;QACvE,SAAS,CAAC,MAAM,EAAE,SAAS,CAAC;aACzB,IAAI,CAAC,MAAM;;;;QAAC,CAAC,KAAmB,KAAK,KAAK,CAAC,GAAG,KAAK,uBAAuB,EAAC,CAAC;aAC5E,SAAS;;;;QAAC,CAAC,KAAmB,KAAK,IAAI,CAAC,UAAU,oBAAe,KAAK,CAAC,QAAQ,GAAC,EAAC,CAAC;KACtF;;;;;IAED,IAAY,WAAW;QACrB,OAAO,IAAI,CAAC,mBAAmB,CAAC,QAAQ,EAAE,CAAC;KAC5C;;;;;;IAED,IAAY,WAAW,CAAC,KAAmB;QACzC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KACtC;;;;IAED,IAAW,iBAAiB;QAC1B,OAAO,IAAI,CAAC,WAAW,KAAK,YAAY,CAAC,IAAI,CAAC;KAC/C;;;;IACD,IAAW,kBAAkB;QAC3B,OAAO,IAAI,CAAC,WAAW,KAAK,YAAY,CAAC,KAAK,CAAC;KAChD;;;;IAEM,eAAe;QACpB,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;KACrC;;;;IACM,cAAc;QACnB,IAAI,CAAC,UAAU,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;KACpC;;;;;;IAEO,UAAU,CAAC,KAAmB;QACpC,IAAI,CAAC,UAAU,CAAC,WAAW,CACzB,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,MAAM,CAAC,EACpC,KAAK,KAAK,YAAY,CAAC,IAAI,GAAG,YAAY,CAAC,KAAK,GAAG,YAAY,CAAC,IAAI,CACrE,CAAC;QACF,YAAY,CAAC,OAAO,CAAC,uBAAuB,EAAE,KAAK,CAAC,CAAC;QACrD,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,aAAa,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,CAAC;QACtE,IAAI,CAAC,WAAW,sBAAiB,YAAY,CAAC,OAAO,CAAC,uBAAuB,CAAC,EAAA,CAAC;KAChF;;;YAhDF,UAAU,SAAC;gBACV,UAAU,EAAE,MAAM;aACnB;;;;4CASc,MAAM,SAAC,QAAQ;YAvBU,gBAAgB;;;;;;;;IAgBtD,yCAA8B;;;;;IAE9B,kDAEE;;IACF,2CAA0F;;;;;IAE9E,wCAAwC;;;;;IAAE,8CAAyC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}