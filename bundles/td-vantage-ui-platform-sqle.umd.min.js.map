{"version":3,"sources":["../../../node_modules/tslib/tslib.es6.js","ng://@td-vantage/ui-platform/sqle/query.service.ts","ng://@td-vantage/ui-platform/sqle/connection.service.ts","ng://@td-vantage/ui-platform/sqle/spooled-query.service.ts","ng://@td-vantage/ui-platform/sqle/dictionary.service.ts","ng://@td-vantage/ui-platform/sqle/credentials-dialog/credentials-dialog.component.ts","ng://@td-vantage/ui-platform/sqle/sqle.module.ts"],"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","__awaiter","thisArg","_arguments","P","generator","Promise","resolve","reject","fulfilled","value","step","next","e","rejected","result","done","then","__generator","body","f","y","g","_","label","sent","trys","ops","verb","throw","return","Symbol","iterator","v","op","TypeError","pop","push","__read","o","m","r","ar","error","VantageQueryService","_http","querySystem","connection","payload","headers","HttpHeaders","append","creds","set","attributes","_a","system","system_attributes","logMech","_b","log_mech","_c","clientId","post","nickname","pipe","catchError","httpStatus","status","map","resultSet","getTableInfo","databaseName","tableName","get","getViewInfo","viewName","getQuery","requestId","getQueries","sessionId","getQueryResult","queryId","deleteQuery","delete","createSession","autoCommit","transactionMode","charSet","deleteSession","Injectable","TdHttpService","VANTAGE_QUERY_PROVIDER_FACTORY","parent","tdHttpService","VANTAGE_QUERY_PROVIDER","provide","deps","Optional","SkipSelf","useFactory","current","JSON","parse","sessionStorage","getItem","VantageConnectionService","_queryService","defineProperty","disconnect","removeItem","connect","opts","_this","query","timeout","retryWhen","errors","mergeMap","index","attempts","throwError","timer","tap","store","mapTo","setItem","stringify","VANTAGE_CONNECTION_PROVIDER_FACTORY","queryService","VANTAGE_CONNECTION_PROVIDER","VantageSpooledQueryService","connectionService","translate","queryStatus","BehaviorSubject","undefined","queryStatus$","asObservable","queryStack","cancelLastQuery","thisQuery","deleteSpooledQuery","getRunningInfo","spooledResultSet","res","id","switchMap","exponentialBackOffInterval","toString","queryState","val","skipWhile","SpooledQueryState","take","detailMessage","message","maxInterval","returnVal","of","expand","iteration","calcInterval","interval","Math","pow","min","subscribe","err","Error","instant","TranslateService","VANTAGE_SPOOLED_QUERY_PROVIDER_FACTORY","VANTAGE_SPOOLED_QUERY_PROVIDER","sysDatabases","VantageDictionaryService","getViewHelp","database","view","queryStr","columns","column","comment","remarks","type","columnType","name","table","viewInfo","count","ddlStatement","results","data","forEach","row","cnt","columnName","getTableHelp","info","getDatabaseFunction","funcName","join","getDatabaseFunctions","sqlHelp","indexOf","substr","split","filter","func","getAnalyticalFunctions","objectname","getAnalyticalFunction","analyticalFunction","functionName","shortDescription","longDescription","usageSyntax","inputColumns","outputColumns","stringArray","resultSetPredicate","TableName","requestText","RequestText","CommentString","kind","TableKind","getStoredProcedures","getExternalStoredProcedures","getMacros","functionsvxPredicate","DatabaseName","SpecificName","paramNumber","NumParameters","paramDataTypes","ParameterDataTypes","commentString","getTableOperators","getTableFunctions","getForeignServers","getForeignSchemas","foreignServer","Schema","getForeignTables","schema","Table","getForeignColumns","Column","Type","getDatabases","schemaname","DBKind","permSpace","PermSpace","spoolSpace","SpoolSpace","tempSpace","TempSpace","getDatabaseObjects","databaseId","tablekind","tablename","DataBaseName","databasename","getTableColumns","tableId","search","searchStr","options","databases","objects","queries","dbQuery","objectQuery","columnQuery","objectType","newParent","nameSplit","objectName","VANTAGE_DICTIONARY_PROVIDER_FACTORY","VANTAGE_DICTIONARY_PROVIDER","VantageCredentialsDialogComponent","_dialogRef","_connectionService","_systemService","_loadingService","_translate","_connectionAttempt$","Subject","connectionAttempt$","basicAuthEnabled","connectionType","ngOnInit","queryParams","HttpParams","systems$","retry","errorMsg","resp","systems","ngOnDestroy","complete","compareSystemWith","a","b","disableClose","register","btoa","username","password","toPromise","close","error_1","cancel","Component","args","selector","template","MatDialogRef","VantageSystemService","TdLoadingService","VantageSQLEModule","NgModule","declarations","exports","imports","CommonModule","FormsModule","MatCardModule","MatButtonModule","MatDialogModule","MatFormFieldModule","MatInputModule","MatSelectModule","MatRadioModule","MatIconModule","CovalentLoadingModule","CovalentMessageModule","VantageSystemModule","TranslateModule","providers"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __createBinding(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (p !== \"default\" && !exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","import { Injectable, Provider, Optional, SkipSelf } from '@angular/core';\nimport { HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { ISystem } from '@td-vantage/ui-platform/system';\nimport { TdHttpService } from '@covalent/http';\n\nexport interface IQueryPayload {\n  query: string;\n  session?: string;\n  logMech?: string;\n  rowOffset?: number;\n  rowLimit?: number;\n  format?: string; // (default)-object, array, or csv\n  includeColumns?: boolean;\n  includeColumnsTypes?: boolean;\n  spooledResultSet?: boolean;\n  clientId?: string;\n}\n\nexport interface IQueryResultSet {\n  queueDuration: number;\n  queryDuration: number;\n  results: IQueryResultSetResult[];\n}\n\nexport interface IQueryResultSetResult {\n  data: { [name: string]: string }[];\n  resultSet: boolean;\n  rowCount: number;\n  rowLimitExceeded: boolean;\n  columns?: { [name: string]: string }[];\n}\n\nexport interface IQueryInfo {\n  success?: boolean;\n  logTime?: string;\n  error?: any;\n  resultSet?: IQueryResultSet;\n}\n\nexport interface ISQLEConnection {\n  system: ISystem;\n  creds?: string;\n}\n\n@Injectable()\nexport class VantageQueryService {\n  constructor(private _http: TdHttpService) {}\n\n  querySystem(connection: ISQLEConnection, payload: IQueryPayload): Observable<IQueryResultSet> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n      const attributes: { [key: string]: string } = connection.system.system_attributes?.attributes;\n      payload.logMech = attributes?.log_mech || attributes?.logMech || 'DEFAULT';\n    } else {\n      payload.logMech = 'JWT';\n    }\n    payload.clientId = 'VANTAGE.EDITOR';\n    const request: Observable<object> = this._http.post(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries',\n      payload,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw Object.assign({}, error.error, { httpStatus: error.status });\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getTableInfo(connection: ISQLEConnection, databaseName: string, tableName: string): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n\n    const request: Observable<object> = this._http.get(\n      `/api/query/systems/${connection.system.nickname}/databases/${databaseName}/tables/${tableName}`,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw Object.assign({}, error.error, { httpStatus: error.status });\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getViewInfo(connection: ISQLEConnection, databaseName: string, viewName: string): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n\n    const request: Observable<object> = this._http.get(\n      `/api/query/systems/${connection.system.nickname}/databases/${databaseName}/views/${viewName}`,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw Object.assign({}, error.error, { httpStatus: error.status });\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getQuery(connection: ISQLEConnection, requestId: string): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._http.get(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries/' + requestId,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw Object.assign({}, error.error, { httpStatus: error.status });\n      }),\n      map((resultSet: any) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getQueries(connection: ISQLEConnection, sessionId: string): Observable<IQueryResultSet> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._http.get(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries?session=' + sessionId,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw Object.assign({}, error.error, { httpStatus: error.status });\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getQueryResult(connection: ISQLEConnection, queryId: string): Observable<IQueryResultSet> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._http.get(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries/' + queryId + '/results',\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw Object.assign({}, error.error, { httpStatus: error.status });\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  deleteQuery(connection: ISQLEConnection, queryId: string): Observable<IQueryResultSet> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._http.delete(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries/' + queryId,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw Object.assign({}, error.error, { httpStatus: error.status });\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  createSession(connection: ISQLEConnection): Observable<any> {\n    const payload: any = {\n      autoCommit: 'true',\n      transactionMode: 'TERA',\n      charSet: 'UTF8',\n    };\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n      const attributes: { [key: string]: string } = connection.system.system_attributes?.attributes;\n      payload.logMech = attributes?.log_mech || attributes?.logMech || 'DEFAULT';\n    } else {\n      payload.logMech = 'JWT';\n    }\n    const request: Observable<object> = this._http.post(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/sessions',\n      payload,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw Object.assign({}, error.error, { httpStatus: error.status });\n      }),\n      map((resultSet: any) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  deleteSession(connection: ISQLEConnection, sessionId: string): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._http.delete(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/sessions/' + sessionId,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw Object.assign({}, error.error, { httpStatus: error.status });\n      }),\n      map((resultSet: any) => {\n        return resultSet;\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_QUERY_PROVIDER_FACTORY(\n  parent: VantageQueryService,\n  tdHttpService: TdHttpService,\n): VantageQueryService {\n  return parent || new VantageQueryService(tdHttpService);\n}\n\nexport const VANTAGE_QUERY_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageQueryService,\n  deps: [[new Optional(), new SkipSelf(), VantageQueryService], TdHttpService],\n  useFactory: VANTAGE_QUERY_PROVIDER_FACTORY,\n};\n","import { Injectable, Optional, SkipSelf, Provider } from '@angular/core';\n\nimport { Observable, throwError, timer } from 'rxjs';\nimport { mergeMap, retryWhen, tap, timeout, mapTo } from 'rxjs/operators';\n\nimport { VantageQueryService, ISQLEConnection } from './query.service';\n\nconst CONNECTION_SESSION_KEY: string = 'vantage.editor.connection';\n\nexport function current(): ISQLEConnection {\n  try {\n    return JSON.parse(sessionStorage.getItem(CONNECTION_SESSION_KEY));\n  } catch {\n    return undefined;\n  }\n}\n\n@Injectable()\nexport class VantageConnectionService {\n  constructor(private _queryService: VantageQueryService) {}\n\n  public get current(): ISQLEConnection {\n    return current();\n  }\n\n  public disconnect(): void {\n    sessionStorage.removeItem(CONNECTION_SESSION_KEY);\n  }\n\n  public connect(\n    connection: ISQLEConnection,\n    opts?: { timeout: number; attempts: number },\n  ): Observable<ISQLEConnection> {\n    // clear connection before starting a new one\n    this.disconnect();\n    // test connection with SELECT 1\n    return this._queryService.querySystem(connection, { query: 'SELECT 1;' }).pipe(\n      // timeout connection if more than 7 seconds\n      timeout(opts?.timeout || 7000),\n      // retry only after a certain number of attempts or if the error is something else than 420\n      retryWhen((errors: Observable<{ httpStatus: number }>) => {\n        return errors.pipe(\n          mergeMap((error: { httpStatus: number }, index: number) => {\n            const retryAttempt: number = index + 1;\n            if (retryAttempt > (opts?.attempts || 2) || error.httpStatus === 420) {\n              return throwError(error);\n            }\n            return timer(0);\n          }),\n        );\n      }),\n      tap(() => this.store(connection)), // if successful, save\n      mapTo(connection),\n    );\n  }\n\n  private store({ system, creds }: ISQLEConnection): void {\n    sessionStorage.setItem(CONNECTION_SESSION_KEY, JSON.stringify({ system, creds }));\n  }\n}\n\nexport function VANTAGE_CONNECTION_PROVIDER_FACTORY(\n  parent: VantageConnectionService,\n  queryService: VantageQueryService,\n): VantageConnectionService {\n  return parent || new VantageConnectionService(queryService);\n}\n\nexport const VANTAGE_CONNECTION_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageConnectionService,\n  deps: [[new Optional(), new SkipSelf(), VantageConnectionService], VantageQueryService],\n  useFactory: VANTAGE_CONNECTION_PROVIDER_FACTORY,\n};\n","import { Injectable, Provider, Optional, SkipSelf } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { TranslateService } from '@ngx-translate/core';\nimport { catchError, expand, map, mapTo, skipWhile, switchMap, take, tap } from 'rxjs/operators';\nimport { BehaviorSubject, Observable, of, throwError, timer } from 'rxjs';\nimport { VantageConnectionService } from './connection.service';\nimport { VantageQueryService, IQueryPayload, IQueryResultSet } from './query.service';\n\ninterface ISpooledQueryError extends HttpErrorResponse {\n  id: string;\n  detailMessage: string;\n}\n\nconst MAX_INTERVAL: number = 10000;\nconst BASE_INTERVAL: number = 2000;\n\nenum SpooledQueryState {\n  QUEUED = 'QUEUED',\n  PENDING = 'PENDING',\n  SUBMITTED = 'SUBMITTED',\n  RESPONDING = 'RESPONDING',\n  SPOOLING = 'SPOOLING',\n  RESULT_SET_READY = 'RESULT_SET_READY',\n}\n\n@Injectable()\nexport class VantageSpooledQueryService {\n  queryStatus: BehaviorSubject<SpooledQueryState> = new BehaviorSubject<SpooledQueryState>(undefined);\n  queryStatus$: Observable<SpooledQueryState> = this.queryStatus.asObservable();\n  queryStack: string[] = [];\n  constructor(\n    private connectionService: VantageConnectionService,\n    private queryService: VantageQueryService,\n    private translate: TranslateService,\n  ) {}\n\n  cancelLastQuery(): void {\n    const thisQuery: string = this.queryStack.pop();\n\n    return this.deleteSpooledQuery(thisQuery);\n  }\n\n  getRunningInfo(): Observable<SpooledQueryState> {\n    return this.queryStatus$;\n  }\n\n  querySystem(payload: IQueryPayload): Observable<IQueryResultSet> {\n    return this.queryService.querySystem(this.connectionService.current, { ...payload, spooledResultSet: true }).pipe(\n      tap((res: any) => this.queryStack.push(res.id)),\n      switchMap((res: any) => this.exponentialBackOffInterval(MAX_INTERVAL, res.id)),\n      switchMap((id: number) =>\n        this.queryService.getQuery(this.connectionService.current, id.toString()).pipe(\n          map((query: any) => query.queryState),\n          tap((val: any) => this.queryStatus.next(val)),\n          map((val: any) => [id, val]),\n        ),\n      ),\n      skipWhile(([id, status]: [string, SpooledQueryState]) => status !== SpooledQueryState.RESULT_SET_READY),\n      take(1),\n      switchMap(([id]: [string, SpooledQueryState]) =>\n        this.queryService.getQueryResult(this.connectionService.current, id).pipe(\n          map((val: IQueryResultSet) => [id, val]),\n          tap(() => this.queryStack.pop()),\n          catchError((res: HttpErrorResponse) => {\n            return throwError({\n              ...res,\n              ...{ id },\n              detailMessage: `Error ${res.error.error}: ${res.error.message}`,\n            } as ISpooledQueryError);\n          }),\n        ),\n      ),\n      map(([id, results]: [string, IQueryResultSet]) => results),\n    );\n  }\n\n  exponentialBackOffInterval(maxInterval: number, returnVal: any): Observable<number> {\n    return of(0).pipe(\n      expand((iteration: number) => timer(this.calcInterval(iteration, maxInterval)).pipe(mapTo(iteration + 1))),\n      mapTo(returnVal),\n    );\n  }\n\n  calcInterval(iteration: number, maxInterval: number): number {\n    const expo: number = 1.4;\n    const interval: number = Math.pow(expo, iteration) * BASE_INTERVAL;\n\n    return Math.min(interval, maxInterval);\n  }\n\n  deleteSpooledQuery(queryId: string): void {\n    this.queryService.deleteQuery(this.connectionService.current, queryId).subscribe(undefined, (err: Error) => {\n      throw new Error(this.translate.instant('SPOOLED_QUERY_COULD_NOT_BE_DELETED', { error: JSON.stringify(err) }));\n    });\n  }\n}\n\nexport function VANTAGE_SPOOLED_QUERY_PROVIDER_FACTORY(\n  parent: VantageSpooledQueryService,\n  connectionService: VantageConnectionService,\n  queryService: VantageQueryService,\n  translate: TranslateService,\n): VantageSpooledQueryService {\n  return parent || new VantageSpooledQueryService(connectionService, queryService, translate);\n}\n\nexport const VANTAGE_SPOOLED_QUERY_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageSpooledQueryService,\n  deps: [\n    [new Optional(), new SkipSelf(), VantageSpooledQueryService],\n    VantageConnectionService,\n    VantageQueryService,\n    TranslateService,\n  ],\n  useFactory: VANTAGE_SPOOLED_QUERY_PROVIDER_FACTORY,\n};\n","import { Injectable, SkipSelf, Optional, Provider } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nimport { VantageQueryService, IQueryResultSet, ISQLEConnection } from './query.service';\n\nexport const sysDatabases: string[] = [\n  'DBC',\n  'dbcmngr',\n  'SQLJ',\n  'SystemFe',\n  'SysAdmin',\n  'SYSBAR',\n  'SYSJDBC',\n  'SYSLIB',\n  'SYSUDTLIB',\n  'TDMaps',\n  'TD_SERVER_DB',\n  'TD_SYSFNLIB',\n  'TD_SYSXML',\n  'Sys_Calendar',\n];\n\nexport interface IDictionarySystem {\n  hostname?: string;\n  password?: string;\n  port?: number;\n  system_id?: string;\n  last_run?: string;\n  interval_minutes?: number;\n  enabled?: boolean;\n  last_attempt?: string;\n  in_collection?: boolean;\n  username?: string;\n}\n\nexport interface IDictionaryDatabase {\n  parent_name?: string;\n  size_bytes?: number;\n  system_id?: string;\n  name?: string;\n  id?: string;\n  type?: string;\n}\n\nexport interface IDictionaryDatabaseObject {\n  system_id?: string;\n  database_id?: string;\n  id?: string;\n  name?: string;\n  size_bytes?: number;\n  type?: string;\n  create_text?: string;\n}\n\nexport interface IDictionaryTableColumn {\n  system_id?: string;\n  database_id?: string;\n  table_id?: string;\n  id?: string;\n  name?: string;\n}\n\n/**\n * FunctionType\n * A - Aggregate\n * B - Aggregate and statistical\n * C - Contract function\n * D - External stored procedure\n * F - Scalar\n * H - User defined method\n * I - Internal type method\n * L - Table operator\n * R - Table Function\n * S - Statistical\n */\n\n/**\n * TableKind for dbc.tablesvx;\n * A - Aggregate function\n * B - Combined aggregate and ordered analytical function\n * C - Table operator parser contract function\n * D - JAR\n * E - External Stored Procedure\n * F - Standard Function\n * G - Trigger\n * H - Instance or contructor method\n * I - Join Index\n * J - Journal\n * K - Foreign Server Object\n * L - User defined table operator\n * M - Macro\n * N - Hash index\n * O - Table with no primary index and no partitioning\n * P - Stored Procedure\n * Q - Queue table\n * R - Table function\n * S - Ordered Analytical function\n * T - table with a primary index or primary AMP index, partitioning or both. Or a partioned table with NoPI;\n * U - User defined type\n * V - View\n * X - Authorization\n * Y - GLOP set\n * Z - UIF - User Installed File\n * 1 - A DATASET schema object created by CREATE SCHEMA\n * 2 - Functon alias object\n */\n\n/**\n * dbc.externalSPs\n * dbc.sessionInfovx\n */\n\n@Injectable()\nexport class VantageDictionaryService {\n  constructor(private _queryService: VantageQueryService) {}\n\n  getViewHelp(connection: ISQLEConnection, database: string, view: string): Observable<any> {\n    const queryStr: string = `\n      LOCK ROW FOR ACCESS\n      SELECT CAST(COUNT(*) AS BIGINT) as cnt\n      FROM ${database}.${view};\n      SHOW VIEW ${database}.${view};\n    `;\n\n    return this._queryService.getViewInfo(connection, database, view).pipe(\n      map((resultSet: any) => {\n        return resultSet.columns.map((column: any) => {\n          return {\n            comment: column.remarks,\n            type: 'column',\n            columnType: column.type,\n            name: column.name,\n            database: resultSet.database,\n            table: resultSet.name,\n          };\n        });\n      }),\n      switchMap((viewInfo: any) => {\n        return this._queryService\n          .querySystem(connection, {\n            query: queryStr,\n          })\n          .pipe(\n            map((resultSet: IQueryResultSet) => {\n              let ddlStatement: string = '';\n              resultSet.results[1].data.forEach((row: any) => {\n                ddlStatement += row['Request Text'];\n              });\n              let count: string;\n              resultSet.results[0].data.forEach((row: any) => {\n                count = row.cnt;\n              });\n\n              const columns: any[] = viewInfo.map((row: any) => {\n                return {\n                  columnName: row.name,\n                  type: row.columnType,\n                };\n              });\n\n              return {\n                database,\n                view,\n                columns,\n                count,\n                ddlStatement,\n              };\n            }),\n          );\n      }),\n    );\n  }\n\n  getTableHelp(connection: ISQLEConnection, database: string, table: string): Observable<any> {\n    const queryStr: string = `\n      LOCK ROW FOR ACCESS\n      SELECT CAST(COUNT(*) AS BIGINT) as cnt\n      FROM ${database}.${table};\n      SHOW TABLE ${database}.${table};\n    `;\n    return this._queryService.getTableInfo(connection, database, table).pipe(\n      map((resultSet: any) => {\n        return resultSet.columns.map((column: any) => {\n          return {\n            comment: column.remarks,\n            type: 'column',\n            columnType: column.type,\n            name: column.name,\n            database: resultSet.database,\n            table: resultSet.name,\n          };\n        });\n      }),\n      switchMap((info: any) => {\n        return this._queryService\n          .querySystem(connection, {\n            query: queryStr,\n          })\n          .pipe(\n            map((resultSet: IQueryResultSet) => {\n              let ddlStatement: string = '';\n              resultSet.results[1].data.forEach((row: any) => {\n                ddlStatement += row['Request Text'];\n              });\n              let count: string;\n              resultSet.results[0].data.forEach((row: any) => {\n                count = row.cnt;\n              });\n              const columns: any[] = info.map((row: any) => {\n                return {\n                  columnName: row.name,\n                  type: row.columnType,\n                };\n              });\n              return {\n                database,\n                table,\n                columns,\n                count,\n                ddlStatement,\n              };\n            }),\n          );\n      }),\n    );\n  }\n\n  getDatabaseFunction(connection: ISQLEConnection, funcName: string): Observable<any> {\n    const queryStr: string = `\n      HELP 'SQL ${funcName}';\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          const stringArray: string[] = resultSet.results[0].data.map((row: any) => {\n            return row['On-Line Help'];\n          });\n          return stringArray.join(' ');\n        }),\n      );\n  }\n\n  getDatabaseFunctions(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      HELP 'SQL';\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          const stringArray: string[] = resultSet.results[0].data.map((row: any) => {\n            return row['On-Line Help'];\n          });\n          let sqlHelp: string = stringArray.join(' ');\n          const index: number = sqlHelp.indexOf('FUNCTIONS') + 12;\n          sqlHelp = sqlHelp.substr(index, sqlHelp.length);\n          return sqlHelp\n            .split(' ')\n            .filter((func: string) => {\n              return func;\n            })\n            .map((func: string) => {\n              return {\n                name: func,\n              };\n            });\n        }),\n      );\n  }\n\n  getAnalyticalFunctions(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      HELP FOREIGN SCHEMA \"public\"@coprocessor;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            return {\n              name: row.objectname,\n            };\n          });\n        }),\n      );\n  }\n\n  getAnalyticalFunction(connection: ISQLEConnection, analyticalFunction: string): Observable<any> {\n    const queryStr: string = `\n      HELP FOREIGN FUNCTION \"public\".\"${analyticalFunction}\"@coprocessor;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          let functionName: string = '';\n          let shortDescription: string = '';\n          let longDescription: string = '';\n          let usageSyntax: string = '';\n          let inputColumns: string = '';\n          let outputColumns: string = '';\n          const functionOwner: string = '';\n          const creationTime: string = '';\n          const functionVersion: string = '';\n          const interfacesImplemented: string = '';\n          const stringArray: string[] = resultSet.results[0].data.map((row: any) => {\n            return row['Function Help'];\n          });\n          for (let index: number = 0; index < stringArray.length; index++) {\n            const value: string = stringArray[index];\n            if (value.indexOf('Function Name:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                functionName += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Short Description:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                shortDescription += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Long Description:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                longDescription += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Usage Syntax:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                usageSyntax += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Input Columns:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                inputColumns += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Output Columns:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                outputColumns += stringArray[index] + '\\n';\n              }\n            } else {\n              // Function Owner:\n              // Creation Time:\n              // Function Version:\n              // Interfaces Implemented:\n              if (stringArray.indexOf('') > -1) {\n                index = stringArray.indexOf('');\n                stringArray[index] = undefined;\n              }\n            }\n          }\n          return {\n            functionName,\n            shortDescription,\n            longDescription,\n            usageSyntax,\n            inputColumns,\n            outputColumns,\n          };\n        }),\n      );\n  }\n\n  resultSetPredicate(resultSet: IQueryResultSet): any {\n    return resultSet.results[0].data.map((row: any) => {\n      return {\n        name: row.TableName,\n        requestText: row.RequestText,\n        comment: row.CommentString,\n        kind: row.TableKind,\n      };\n    });\n  }\n\n  getStoredProcedures(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT DataBaseName, TableName, TableKind, RequestText, CommentString FROM dbc.tablesvx\n      WHERE TableKind = 'P'\n      ORDER BY TableName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.resultSetPredicate));\n  }\n\n  getExternalStoredProcedures(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT DataBaseName, TableName, TableKind, RequestText, CommentString FROM dbc.tablesvx\n      WHERE TableKind = 'E'\n      ORDER BY TableName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.resultSetPredicate));\n  }\n\n  getMacros(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT DataBaseName, TableName, TableKind, RequestText, CommentString FROM dbc.tablesvx\n      WHERE TableKind = 'M'\n      ORDER BY TableName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.resultSetPredicate));\n  }\n\n  functionsvxPredicate(resultSet: IQueryResultSet): any {\n    return resultSet.results[0].data.map((row: any) => {\n      return {\n        database: row.DatabaseName,\n        name: row.SpecificName,\n        paramNumber: row.NumParameters,\n        paramDataTypes: row.ParameterDataTypes,\n        requestText: row.RequestText,\n        commentString: row.CommentString,\n        kind: row.TableKind,\n      };\n    });\n  }\n\n  getTableOperators(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT func.DatabaseName, func.FunctionName, func.SpecificName, func.NumParameters,\n      func.ParameterDataTypes, tbl.RequestText, tbl.CommentString, tbl.TableKind\n      FROM dbc.functionsvx as func\n      INNER JOIN dbc.tablesvx as tbl\n      ON tbl.TableName = func.SpecificName\n      AND tbl.DataBaseName = func.DatabaseName\n      WHERE FunctionType = 'L'\n      ORDER BY func.FunctionName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.functionsvxPredicate));\n  }\n\n  getTableFunctions(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT func.DatabaseName, func.FunctionName, func.SpecificName, func.NumParameters,\n      func.ParameterDataTypes, tbl.RequestText, tbl.CommentString, tbl.TableKind\n      FROM dbc.functionsvx as func\n      INNER JOIN dbc.tablesvx as tbl\n      ON tbl.TableName = func.SpecificName\n      AND tbl.DataBaseName = func.DatabaseName\n      WHERE FunctionType = 'R'\n      ORDER BY func.FunctionName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.functionsvxPredicate));\n  }\n\n  getForeignServers(connection: ISQLEConnection): Observable<any[]> {\n    const queryStr: string = `\n      SELECT TableName, TableKind FROM DBC.TABLESVX\n      WHERE DATABASENAME = 'TD_SERVER_DB' AND\n      TABLEKIND = 'K' AND\n      TableName <> 'coprocesor';\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            return {\n              name: row.TableName,\n              kind: row.TableKind,\n            };\n          });\n        }),\n      );\n  }\n\n  getForeignSchemas(connection: ISQLEConnection, foreignServer: string): Observable<any[]> {\n    const queryStr: string = `\n      HELP FOREIGN SERVER ${foreignServer};\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: { Schema: string }) => {\n            return {\n              name: row.Schema,\n              kind: 'NONE',\n            };\n          });\n        }),\n      );\n  }\n\n  getForeignTables(connection: ISQLEConnection, foreignServer: string, schema: string): Observable<any[]> {\n    const queryStr: string = `\n      HELP FOREIGN DATABASE \"${schema}\"@${foreignServer};\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: { Table: string }) => {\n            return {\n              name: row.Table,\n              kind: 'NONE',\n            };\n          });\n        }),\n      );\n  }\n\n  getForeignColumns(\n    connection: ISQLEConnection,\n    foreignServer: string,\n    schema: string,\n    table: string,\n  ): Observable<any[]> {\n    const queryStr: string = `\n      HELP FOREIGN TABLE \"${schema}\".\"${table}\"@${foreignServer};\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: { Column: string; Type: string }) => {\n            return {\n              name: row.Column,\n              type: row.Type,\n            };\n          });\n        }),\n      );\n  }\n\n  getDatabases(connection: ISQLEConnection): Observable<any[]> {\n    const queryStr: string =\n      'SELECT databasename, PermSpace, SpoolSpace, TempSpace, CommentString, DBKind FROM dbc.databasesVX ORDER BY databasename;';\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            return {\n              name: row.DatabaseName || row.schemaname,\n              type: row.DBKind === 'U' ? 'user' : 'database',\n              permSpace: row.PermSpace,\n              spoolSpace: row.SpoolSpace,\n              tempSpace: row.TempSpace,\n              comment: row.CommentString,\n            };\n          });\n        }),\n      );\n  }\n\n  getDatabaseObjects(connection: ISQLEConnection, databaseId: string): Observable<any[]> {\n    const queryStr: string = `SELECT DataBaseName, TableName, TableKind, CommentString FROM dbc.tablesvx\n       WHERE TableKind in ('T', 'O', 'V') AND DataBaseName = '${databaseId}' ORDER BY TableName ASC;`;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            const type: string = row.TableKind || row.tablekind;\n            return {\n              kind: row.TableKind || row.tablekind,\n              type: type === 'V' ? 'view' : 'table',\n              name: row.TableName || row.tablename,\n              database: row.DataBaseName || row.databasename,\n              comment: row.CommentString,\n            };\n          });\n        }),\n      );\n  }\n\n  getTableColumns(type: string, connection: ISQLEConnection, databaseId: string, tableId: string): Observable<any> {\n    if (type === 'table') {\n      return this._queryService.getTableInfo(connection, databaseId, tableId).pipe(\n        map((resultSet: any) => {\n          return resultSet.columns.map((column: any) => {\n            return {\n              comment: column.remarks,\n              type: 'column',\n              columnType: column.type,\n              name: column.name,\n              database: resultSet.database,\n              table: resultSet.name,\n            };\n          });\n        }),\n      );\n    } else if (type === 'view') {\n      return this._queryService.getViewInfo(connection, databaseId, tableId).pipe(\n        map((resultSet: any) => {\n          return resultSet.columns.map((column: any) => {\n            return {\n              comment: column.remarks,\n              type: 'column',\n              columnType: column.type,\n              name: column.name,\n              database: resultSet.database,\n              table: resultSet.name,\n            };\n          });\n        }),\n      );\n    }\n  }\n\n  search(\n    connection: ISQLEConnection,\n    searchStr: string,\n    options: {\n      databases: boolean;\n      objects: boolean;\n      columns: boolean;\n    } = {\n      databases: true,\n      objects: true,\n      columns: true,\n    },\n  ): Observable<any[]> {\n    const queries: string[] = [];\n    if (options.databases) {\n      const dbQuery: string = `\n        SELECT\n            DatabaseName as objectName,\n            'database' as objectType,\n            DBKind as kind,\n            CommentString\n        FROM dbc.databasesvx\n        WHERE DatabaseName LIKE '%${searchStr}%'\n        AND DataBaseName NOT IN ('${sysDatabases.join(\"', '\")}')\n      `;\n      queries.push(dbQuery);\n    }\n    if (options.objects) {\n      const objectQuery: string = `\n        SELECT\n            DataBaseName || '~|~' || TableName as objectName,\n            'object' as objectType,\n            TableKind as kind,\n            CommentString\n        FROM dbc.tablesvx\n        WHERE TableKind in ('T', 'O', 'V')\n        AND TableName LIKE '%${searchStr}%'\n        AND DataBaseName NOT IN ('${sysDatabases.join(\"', '\")}')\n      `;\n      queries.push(objectQuery);\n    }\n    if (options.objects) {\n      const columnQuery: string = `\n        SELECT\n            DataBaseName || '~|~' || TableName || '~|~' || ColumnName as objectName,\n            'column' as objectType,\n            ColumnType as kind,\n            CommentString\n        FROM dbc.columnsVX\n        WHERE columnname LIKE '%${searchStr}%'\n        AND DataBaseName NOT IN ('${sysDatabases.join(\"', '\")}')\n      `;\n      queries.push(columnQuery);\n    }\n    const unionJoin: string = queries.join('UNION');\n    const queryStr: string = `\n      WITH quick_search AS (\n          ${unionJoin}\n      )\n      SELECT * FROM quick_search\n      ORDER BY 1\n      SAMPLE 100;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            let kind: string = row.kind;\n            // map to proper type/kind\n            if (row.objectType === 'column') {\n              kind = 'column';\n            } else if (row.objectType === 'database') {\n              kind = kind === 'D' ? 'database' : 'user';\n            } else {\n              kind = kind === 'V' ? 'view' : 'table';\n            }\n            const newParent: string[] = [];\n            // split name and parents..\n            const nameSplit: string[] = row.objectName.split('~|~');\n            for (let index: number = 0; index < nameSplit.length - 1; index++) {\n              newParent.push('\"' + nameSplit[index] + '\"');\n            }\n            return {\n              parent: newParent.join('.'),\n              name: nameSplit[nameSplit.length - 1],\n              kind,\n              type: row.objectType,\n              comment: row.CommentString,\n            };\n          });\n        }),\n      );\n  }\n}\n\nexport function VANTAGE_DICTIONARY_PROVIDER_FACTORY(\n  parent: VantageDictionaryService,\n  queryService: VantageQueryService,\n): VantageDictionaryService {\n  return parent || new VantageDictionaryService(queryService);\n}\n\nexport const VANTAGE_DICTIONARY_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageDictionaryService,\n  deps: [[new Optional(), new SkipSelf(), VantageDictionaryService], VantageQueryService],\n  useFactory: VANTAGE_DICTIONARY_PROVIDER_FACTORY,\n};\n","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { HttpParams } from '@angular/common/http';\n\nimport { MatDialogRef } from '@angular/material/dialog';\n\nimport { TdLoadingService } from '@covalent/core/loading';\n\nimport { ISystem, VantageSystemService } from '@td-vantage/ui-platform/system';\nimport { VantageConnectionService } from '../connection.service';\nimport { ISQLEConnection } from '../query.service';\n\nimport { Observable, Subject, of } from 'rxjs';\nimport { retry, map, tap, catchError } from 'rxjs/operators';\n\nimport { TranslateService } from '@ngx-translate/core';\n\n@Component({\n  selector: 'vui-sqle-credentials-dialog',\n  templateUrl: './credentials-dialog.component.html',\n  styleUrls: ['./credentials-dialog.component.scss'],\n})\nexport class VantageCredentialsDialogComponent implements OnInit, OnDestroy {\n  // listens to times we try to connect regardless\n  private _connectionAttempt$: Subject<void> = new Subject<void>();\n  connectionAttempt$: Observable<void> = this._connectionAttempt$.asObservable();\n\n  basicAuthEnabled: boolean = false;\n  systems$: Observable<ISystem[]>;\n\n  system: ISystem;\n  connectionType: boolean = false;\n  username: string;\n  password: string;\n\n  errorMsg: string;\n\n  constructor(\n    private _dialogRef: MatDialogRef<VantageCredentialsDialogComponent>,\n    private _connectionService: VantageConnectionService,\n    private _systemService: VantageSystemService,\n    private _loadingService: TdLoadingService,\n    private _translate: TranslateService,\n  ) {}\n\n  ngOnInit(): void {\n    // prepopulate connection type\n    this.connectionType = this.basicAuthEnabled;\n    // prep systems observable\n    let queryParams: HttpParams = new HttpParams();\n    queryParams = queryParams.append('systemType', 'TERADATA');\n    this.systems$ = this._systemService.query(queryParams).pipe(\n      retry(2),\n      catchError(() => {\n        this.errorMsg = this._translate.instant('ERROR_RETRIEVE_DATA');\n        return of({ data: [] });\n      }),\n      map((resp: { data: ISystem[] }) => resp.data),\n      tap((systems: ISystem[]) => {\n        if (systems && systems.length) {\n          // select first system by default if no system was prepopulated\n          if (!this.system) {\n            this.system = systems[0];\n          }\n          // if there is only one system and basic auth disabled, we try to connect to it automagically\n          if (systems.length === 1 && !this.basicAuthEnabled) {\n            this.connect();\n          }\n        }\n      }),\n    );\n  }\n\n  ngOnDestroy(): void {\n    // finallize subject\n    this._connectionAttempt$.complete();\n  }\n\n  compareSystemWith(a: ISystem, b: ISystem): boolean {\n    return a && b && a.nickname === b.nickname;\n  }\n\n  async connect(): Promise<void> {\n    try {\n      this.errorMsg = undefined;\n      // block users from closing the dialog while connecting\n      this._dialogRef.disableClose = true;\n      this._loadingService.register('system.connect');\n      const connection: ISQLEConnection = this.connectionType\n        ? { system: this.system, creds: btoa(this.username + ':' + this.password) }\n        : { system: this.system };\n      await this._connectionService.connect(connection).toPromise();\n      this._dialogRef.close(connection);\n    } catch (error) {\n      this.errorMsg = error.message;\n    } finally {\n      this._connectionAttempt$.next();\n      // allow users to close dialog again\n      this._dialogRef.disableClose = false;\n      this._loadingService.resolve('system.connect');\n    }\n  }\n\n  cancel(): void {\n    this._dialogRef.close();\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\n\nimport { MatCardModule } from '@angular/material/card';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatDialogModule } from '@angular/material/dialog';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatRadioModule } from '@angular/material/radio';\nimport { MatIconModule } from '@angular/material/icon';\n\nimport { CovalentLoadingModule } from '@covalent/core/loading';\nimport { CovalentMessageModule } from '@covalent/core/message';\n\nimport { VantageSystemModule } from '@td-vantage/ui-platform/system';\n\nimport { TranslateModule } from '@ngx-translate/core';\n\nimport { VANTAGE_CONNECTION_PROVIDER } from './connection.service';\nimport { VANTAGE_DICTIONARY_PROVIDER } from './dictionary.service';\nimport { VANTAGE_QUERY_PROVIDER } from './query.service';\nimport { VANTAGE_SPOOLED_QUERY_PROVIDER } from './spooled-query.service';\n\nimport { VantageCredentialsDialogComponent } from './credentials-dialog/credentials-dialog.component';\n\n@NgModule({\n  declarations: [VantageCredentialsDialogComponent],\n  exports: [VantageCredentialsDialogComponent],\n  imports: [\n    CommonModule,\n    FormsModule,\n    MatCardModule,\n    MatButtonModule,\n    MatDialogModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatRadioModule,\n    MatIconModule,\n    CovalentLoadingModule,\n    CovalentMessageModule,\n    VantageSystemModule,\n    TranslateModule,\n  ],\n  providers: [\n    VANTAGE_CONNECTION_PROVIDER,\n    VANTAGE_DICTIONARY_PROVIDER,\n    VANTAGE_QUERY_PROVIDER,\n    VANTAGE_SPOOLED_QUERY_PROVIDER,\n  ],\n})\nexport class VantageSQLEModule {}\n"]}