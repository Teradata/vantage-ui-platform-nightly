{"version":3,"file":"td-vantage-ui-platform-sqle.js","sources":["ng://@td-vantage/ui-platform/sqle/query.service.ts","ng://@td-vantage/ui-platform/sqle/connection.service.ts","ng://@td-vantage/ui-platform/sqle/spooled-query.service.ts","ng://@td-vantage/ui-platform/sqle/dictionary.service.ts","ng://@td-vantage/ui-platform/sqle/sqle.module.ts"],"sourcesContent":["import { Injectable, Provider, Optional, SkipSelf } from '@angular/core';\nimport { HttpHeaders, HttpErrorResponse } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\nimport { ISystem } from '@td-vantage/ui-platform/system';\nimport { TdHttpService } from '@covalent/http';\n\nexport interface IQueryPayload {\n  query: string;\n  session?: string;\n  logMech?: string;\n  rowOffset?: number;\n  rowLimit?: number;\n  format?: string; // (default)-object, array, or csv\n  includeColumns?: boolean;\n  includeColumnsTypes?: boolean;\n  spooledResultSet?: boolean;\n  clientId?: string;\n}\n\nexport interface IQueryResultSet {\n  queueDuration: number;\n  queryDuration: number;\n  results: IQueryResultSetResult[];\n}\n\nexport interface IQueryResultSetResult {\n  data: { [name: string]: string }[];\n  resultSet: boolean;\n  rowCount: number;\n  rowLimitExceeded: boolean;\n  columns?: { [name: string]: string }[];\n}\n\nexport interface IQueryInfo {\n  success?: boolean;\n  logTime?: string;\n  error?: any;\n  resultSet?: IQueryResultSet;\n}\n\nexport interface ISQLEConnection {\n  system: ISystem;\n  creds?: string;\n}\n\n@Injectable()\nexport class VantageQueryService {\n  constructor(private _http: TdHttpService) {}\n\n  querySystem(connection: ISQLEConnection, payload: IQueryPayload): Observable<IQueryResultSet> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n      payload.logMech = connection.system.system_attributes.attributes.log_mech || 'DEFAULT';\n    } else {\n      payload.logMech = 'JWT';\n    }\n    payload.clientId = 'VANTAGE.EDITOR';\n    const request: Observable<object> = this._http.post(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries',\n      payload,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getTableInfo(connection: ISQLEConnection, databaseName: string, tableName: string): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n\n    const request: Observable<object> = this._http.get(\n      `/api/query/systems/${connection.system.nickname}/databases/${databaseName}/tables/${tableName}`,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getViewInfo(connection: ISQLEConnection, databaseName: string, viewName: string): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n\n    const request: Observable<object> = this._http.get(\n      `/api/query/systems/${connection.system.nickname}/databases/${databaseName}/views/${viewName}`,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getQuery(connection: ISQLEConnection, requestId: string): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._http.get(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries/' + requestId,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: any) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getQueries(connection: ISQLEConnection, sessionId: string): Observable<IQueryResultSet> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._http.get(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries?session=' + sessionId,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  getQueryResult(connection: ISQLEConnection, queryId: string): Observable<IQueryResultSet> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._http.get(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries/' + queryId + '/results',\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  deleteQuery(connection: ISQLEConnection, queryId: string): Observable<IQueryResultSet> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._http.delete(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/queries/' + queryId,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: IQueryResultSet) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  createSession(connection: ISQLEConnection): Observable<any> {\n    const payload: any = {\n      autoCommit: 'true',\n      transactionMode: 'TERA',\n      charSet: 'UTF8',\n    };\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n      payload.logMech = connection.system.system_attributes.attributes.log_mech || 'DEFAULT';\n    } else {\n      payload.logMech = 'JWT';\n    }\n    const request: Observable<object> = this._http.post(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/sessions',\n      payload,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: any) => {\n        return resultSet;\n      }),\n    );\n  }\n\n  deleteSession(connection: ISQLEConnection, sessionId: string): Observable<any> {\n    let headers: HttpHeaders = new HttpHeaders()\n      .append('Accept', 'application/vnd.com.teradata.rest-v1.0+json')\n      .append('Content-Type', 'application/json');\n    if (connection.creds) {\n      headers = headers.set('X-Auth-Credentials', 'Basic ' + connection.creds);\n    }\n    const request: Observable<object> = this._http.delete(\n      '/api/query/tdrest/systems/' + connection.system.nickname + '/sessions/' + sessionId,\n      { headers },\n    );\n\n    return request.pipe(\n      catchError((error: HttpErrorResponse) => {\n        throw error.error;\n      }),\n      map((resultSet: any) => {\n        return resultSet;\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_QUERY_PROVIDER_FACTORY(\n  parent: VantageQueryService,\n  tdHttpService: TdHttpService,\n): VantageQueryService {\n  return parent || new VantageQueryService(tdHttpService);\n}\n\nexport const VANTAGE_QUERY_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageQueryService,\n  deps: [[new Optional(), new SkipSelf(), VantageQueryService], TdHttpService],\n  useFactory: VANTAGE_QUERY_PROVIDER_FACTORY,\n};\n","import { Injectable, Optional, SkipSelf, Provider } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { tap, mapTo } from 'rxjs/operators';\nimport { VantageQueryService, ISQLEConnection } from './query.service';\n\nconst CONNECTION_SESSION_KEY: string = 'vantage.editor.connection';\n\nexport function current(): ISQLEConnection {\n  try {\n    return JSON.parse(sessionStorage.getItem(CONNECTION_SESSION_KEY));\n  } catch {\n    return undefined;\n  }\n}\n\n@Injectable()\nexport class VantageConnectionService {\n  constructor(private _queryService: VantageQueryService) {}\n\n  public get current(): ISQLEConnection {\n    return current();\n  }\n\n  public disconnect(): void {\n    sessionStorage.removeItem(CONNECTION_SESSION_KEY);\n  }\n\n  public connect(connection: ISQLEConnection): Observable<ISQLEConnection> {\n    // clear connection before starting a new one\n    this.disconnect();\n    // test connection with SELECT 1\n    return this._queryService.querySystem(connection, { query: 'SELECT 1;' }).pipe(\n      tap(() => this.store(connection)), // if successful, save\n      mapTo(connection),\n    );\n  }\n\n  private store({ system, creds }: ISQLEConnection): void {\n    sessionStorage.setItem(CONNECTION_SESSION_KEY, JSON.stringify({ system, creds }));\n  }\n}\n\nexport function VANTAGE_CONNECTION_PROVIDER_FACTORY(\n  parent: VantageConnectionService,\n  queryService: VantageQueryService,\n): VantageConnectionService {\n  return parent || new VantageConnectionService(queryService);\n}\n\nexport const VANTAGE_CONNECTION_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageConnectionService,\n  deps: [[new Optional(), new SkipSelf(), VantageConnectionService], VantageQueryService],\n  useFactory: VANTAGE_CONNECTION_PROVIDER_FACTORY,\n};\n","import { Injectable, Provider, Optional, SkipSelf } from '@angular/core';\nimport { HttpErrorResponse } from '@angular/common/http';\nimport { TranslateService } from '@ngx-translate/core';\nimport { catchError, expand, map, mapTo, skipWhile, switchMap, take, tap } from 'rxjs/operators';\nimport { BehaviorSubject, Observable, of, throwError, timer } from 'rxjs';\nimport { VantageConnectionService } from './connection.service';\nimport { VantageQueryService, IQueryPayload, IQueryResultSet } from './query.service';\n\ninterface ISpooledQueryError extends HttpErrorResponse {\n  id: string;\n  detailMessage: string;\n}\n\nconst MAX_INTERVAL: number = 10000;\nconst BASE_INTERVAL: number = 2000;\n\nenum SpooledQueryState {\n  QUEUED = 'QUEUED',\n  PENDING = 'PENDING',\n  SUBMITTED = 'SUBMITTED',\n  RESPONDING = 'RESPONDING',\n  SPOOLING = 'SPOOLING',\n  RESULT_SET_READY = 'RESULT_SET_READY',\n}\n\n@Injectable()\nexport class VantageSpooledQueryService {\n  queryStatus: BehaviorSubject<SpooledQueryState> = new BehaviorSubject<SpooledQueryState>(undefined);\n  queryStatus$: Observable<SpooledQueryState> = this.queryStatus.asObservable();\n  queryStack: string[] = [];\n  constructor(\n    private connectionService: VantageConnectionService,\n    private queryService: VantageQueryService,\n    private translate: TranslateService,\n  ) {}\n\n  cancelLastQuery(): void {\n    const thisQuery: string = this.queryStack.pop();\n\n    return this.deleteSpooledQuery(thisQuery);\n  }\n\n  getRunningInfo(): Observable<SpooledQueryState> {\n    return this.queryStatus$;\n  }\n\n  querySystem(payload: IQueryPayload): Observable<IQueryResultSet> {\n    return this.queryService.querySystem(this.connectionService.current, { ...payload, spooledResultSet: true }).pipe(\n      tap((res: any) => this.queryStack.push(res.id)),\n      switchMap((res: any) => this.exponentialBackOffInterval(MAX_INTERVAL, res.id)),\n      switchMap((id: number) =>\n        this.queryService.getQuery(this.connectionService.current, id.toString()).pipe(\n          map((query: any) => query.queryState),\n          tap((val: any) => this.queryStatus.next(val)),\n          map((val: any) => [id, val]),\n        ),\n      ),\n      skipWhile(([id, status]: [string, SpooledQueryState]) => status !== SpooledQueryState.RESULT_SET_READY),\n      take(1),\n      switchMap(([id]: [string, SpooledQueryState]) =>\n        this.queryService.getQueryResult(this.connectionService.current, id).pipe(\n          map((val: IQueryResultSet) => [id, val]),\n          tap(() => this.queryStack.pop()),\n          catchError((res: HttpErrorResponse) => {\n            return throwError({\n              ...res,\n              ...{ id },\n              detailMessage: `Error ${res.error.error}: ${res.error.message}`,\n            } as ISpooledQueryError);\n          }),\n        ),\n      ),\n      map(([id, results]: [string, IQueryResultSet]) => results),\n    );\n  }\n\n  exponentialBackOffInterval(maxInterval: number, returnVal: any): Observable<number> {\n    return of(0).pipe(\n      expand((iteration: number) => timer(this.calcInterval(iteration, maxInterval)).pipe(mapTo(iteration + 1))),\n      mapTo(returnVal),\n    );\n  }\n\n  calcInterval(iteration: number, maxInterval: number): number {\n    const expo: number = 1.4;\n    const interval: number = Math.pow(expo, iteration) * BASE_INTERVAL;\n\n    return Math.min(interval, maxInterval);\n  }\n\n  deleteSpooledQuery(queryId: string): void {\n    this.queryService.deleteQuery(this.connectionService.current, queryId).subscribe(undefined, (err: Error) => {\n      throw new Error(this.translate.instant('SPOOLED_QUERY_COULD_NOT_BE_DELETED', { error: JSON.stringify(err) }));\n    });\n  }\n}\n\nexport function VANTAGE_SPOOLED_QUERY_PROVIDER_FACTORY(\n  parent: VantageSpooledQueryService,\n  connectionService: VantageConnectionService,\n  queryService: VantageQueryService,\n  translate: TranslateService,\n): VantageSpooledQueryService {\n  return parent || new VantageSpooledQueryService(connectionService, queryService, translate);\n}\n\nexport const VANTAGE_SPOOLED_QUERY_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageSpooledQueryService,\n  deps: [\n    [new Optional(), new SkipSelf(), VantageSpooledQueryService],\n    VantageConnectionService,\n    VantageQueryService,\n    TranslateService,\n  ],\n  useFactory: VANTAGE_SPOOLED_QUERY_PROVIDER_FACTORY,\n};\n","import { Injectable, SkipSelf, Optional, Provider } from '@angular/core';\n\nimport { Observable } from 'rxjs';\nimport { map, switchMap } from 'rxjs/operators';\n\nimport { VantageQueryService, IQueryResultSet, ISQLEConnection } from './query.service';\n\nexport const sysDatabases: string[] = [\n  'DBC',\n  'dbcmngr',\n  'SQLJ',\n  'SystemFe',\n  'SysAdmin',\n  'SYSBAR',\n  'SYSJDBC',\n  'SYSLIB',\n  'SYSUDTLIB',\n  'TDMaps',\n  'TD_SERVER_DB',\n  'TD_SYSFNLIB',\n  'TD_SYSXML',\n  'Sys_Calendar',\n];\n\nexport interface IDictionarySystem {\n  hostname?: string;\n  password?: string;\n  port?: number;\n  system_id?: string;\n  last_run?: string;\n  interval_minutes?: number;\n  enabled?: boolean;\n  last_attempt?: string;\n  in_collection?: boolean;\n  username?: string;\n}\n\nexport interface IDictionaryDatabase {\n  parent_name?: string;\n  size_bytes?: number;\n  system_id?: string;\n  name?: string;\n  id?: string;\n  type?: string;\n}\n\nexport interface IDictionaryDatabaseObject {\n  system_id?: string;\n  database_id?: string;\n  id?: string;\n  name?: string;\n  size_bytes?: number;\n  type?: string;\n  create_text?: string;\n}\n\nexport interface IDictionaryTableColumn {\n  system_id?: string;\n  database_id?: string;\n  table_id?: string;\n  id?: string;\n  name?: string;\n}\n\n/**\n * FunctionType\n * A - Aggregate\n * B - Aggregate and statistical\n * C - Contract function\n * D - External stored procedure\n * F - Scalar\n * H - User defined method\n * I - Internal type method\n * L - Table operator\n * R - Table Function\n * S - Statistical\n */\n\n/**\n * TableKind for dbc.tablesvx;\n * A - Aggregate function\n * B - Combined aggregate and ordered analytical function\n * C - Table operator parser contract function\n * D - JAR\n * E - External Stored Procedure\n * F - Standard Function\n * G - Trigger\n * H - Instance or contructor method\n * I - Join Index\n * J - Journal\n * K - Foreign Server Object\n * L - User defined table operator\n * M - Macro\n * N - Hash index\n * O - Table with no primary index and no partitioning\n * P - Stored Procedure\n * Q - Queue table\n * R - Table function\n * S - Ordered Analytical function\n * T - table with a primary index or primary AMP index, partitioning or both. Or a partioned table with NoPI;\n * U - User defined type\n * V - View\n * X - Authorization\n * Y - GLOP set\n * Z - UIF - User Installed File\n * 1 - A DATASET schema object created by CREATE SCHEMA\n * 2 - Functon alias object\n */\n\n/**\n * dbc.externalSPs\n * dbc.sessionInfovx\n */\n\n@Injectable()\nexport class VantageDictionaryService {\n  constructor(private _queryService: VantageQueryService) {}\n\n  getViewHelp(connection: ISQLEConnection, database: string, view: string): Observable<any> {\n    const queryStr: string = `\n      LOCK ROW FOR ACCESS\n      SELECT CAST(COUNT(*) AS BIGINT) as cnt\n      FROM ${database}.${view};\n      SHOW VIEW ${database}.${view};\n    `;\n\n    return this._queryService.getViewInfo(connection, database, view).pipe(\n      map((resultSet: any) => {\n        return resultSet.columns.map((column: any) => {\n          return {\n            comment: column.remarks,\n            type: 'column',\n            columnType: column.type,\n            name: column.name,\n            database: resultSet.database,\n            table: resultSet.name,\n          };\n        });\n      }),\n      switchMap((viewInfo: any) => {\n        return this._queryService\n          .querySystem(connection, {\n            query: queryStr,\n          })\n          .pipe(\n            map((resultSet: IQueryResultSet) => {\n              let ddlStatement: string = '';\n              resultSet.results[1].data.forEach((row: any) => {\n                ddlStatement += row['Request Text'];\n              });\n              let count: string;\n              resultSet.results[0].data.forEach((row: any) => {\n                count = row.cnt;\n              });\n\n              const columns: any[] = viewInfo.map((row: any) => {\n                return {\n                  columnName: row.name,\n                  type: row.columnType,\n                };\n              });\n\n              return {\n                database,\n                view,\n                columns,\n                count,\n                ddlStatement,\n              };\n            }),\n          );\n      }),\n    );\n  }\n\n  getTableHelp(connection: ISQLEConnection, database: string, table: string): Observable<any> {\n    const queryStr: string = `\n      LOCK ROW FOR ACCESS\n      SELECT CAST(COUNT(*) AS BIGINT) as cnt\n      FROM ${database}.${table};\n      SHOW TABLE ${database}.${table};\n    `;\n    return this._queryService.getTableInfo(connection, database, table).pipe(\n      map((resultSet: any) => {\n        return resultSet.columns.map((column: any) => {\n          return {\n            comment: column.remarks,\n            type: 'column',\n            columnType: column.type,\n            name: column.name,\n            database: resultSet.database,\n            table: resultSet.name,\n          };\n        });\n      }),\n      switchMap((info: any) => {\n        return this._queryService\n          .querySystem(connection, {\n            query: queryStr,\n          })\n          .pipe(\n            map((resultSet: IQueryResultSet) => {\n              let ddlStatement: string = '';\n              resultSet.results[1].data.forEach((row: any) => {\n                ddlStatement += row['Request Text'];\n              });\n              let count: string;\n              resultSet.results[0].data.forEach((row: any) => {\n                count = row.cnt;\n              });\n              const columns: any[] = info.map((row: any) => {\n                return {\n                  columnName: row.name,\n                  type: row.columnType,\n                };\n              });\n              return {\n                database,\n                table,\n                columns,\n                count,\n                ddlStatement,\n              };\n            }),\n          );\n      }),\n    );\n  }\n\n  getDatabaseFunction(connection: ISQLEConnection, funcName: string): Observable<any> {\n    const queryStr: string = `\n      HELP 'SQL ${funcName}';\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          const stringArray: string[] = resultSet.results[0].data.map((row: any) => {\n            return row['On-Line Help'];\n          });\n          return stringArray.join(' ');\n        }),\n      );\n  }\n\n  getDatabaseFunctions(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      HELP 'SQL';\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          const stringArray: string[] = resultSet.results[0].data.map((row: any) => {\n            return row['On-Line Help'];\n          });\n          let sqlHelp: string = stringArray.join(' ');\n          const index: number = sqlHelp.indexOf('FUNCTIONS') + 12;\n          sqlHelp = sqlHelp.substr(index, sqlHelp.length);\n          return sqlHelp\n            .split(' ')\n            .filter((func: string) => {\n              return func;\n            })\n            .map((func: string) => {\n              return {\n                name: func,\n              };\n            });\n        }),\n      );\n  }\n\n  getAnalyticalFunctions(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      HELP FOREIGN SCHEMA \"public\"@coprocessor;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            return {\n              name: row.objectname,\n            };\n          });\n        }),\n      );\n  }\n\n  getAnalyticalFunction(connection: ISQLEConnection, analyticalFunction: string): Observable<any> {\n    const queryStr: string = `\n      HELP FOREIGN FUNCTION \"public\".\"${analyticalFunction}\"@coprocessor;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          let functionName: string = '';\n          let shortDescription: string = '';\n          let longDescription: string = '';\n          let usageSyntax: string = '';\n          let inputColumns: string = '';\n          let outputColumns: string = '';\n          const functionOwner: string = '';\n          const creationTime: string = '';\n          const functionVersion: string = '';\n          const interfacesImplemented: string = '';\n          const stringArray: string[] = resultSet.results[0].data.map((row: any) => {\n            return row['Function Help'];\n          });\n          for (let index: number = 0; index < stringArray.length; index++) {\n            const value: string = stringArray[index];\n            if (value.indexOf('Function Name:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                functionName += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Short Description:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                shortDescription += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Long Description:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                longDescription += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Usage Syntax:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                usageSyntax += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Input Columns:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                inputColumns += stringArray[index] + '\\n';\n              }\n            } else if (value.indexOf('Output Columns:') > -1) {\n              for (index++; index < stringArray.indexOf(''); index++) {\n                outputColumns += stringArray[index] + '\\n';\n              }\n            } else {\n              // Function Owner:\n              // Creation Time:\n              // Function Version:\n              // Interfaces Implemented:\n              if (stringArray.indexOf('') > -1) {\n                index = stringArray.indexOf('');\n                stringArray[index] = undefined;\n              }\n            }\n          }\n          return {\n            functionName,\n            shortDescription,\n            longDescription,\n            usageSyntax,\n            inputColumns,\n            outputColumns,\n          };\n        }),\n      );\n  }\n\n  resultSetPredicate(resultSet: IQueryResultSet): any {\n    return resultSet.results[0].data.map((row: any) => {\n      return {\n        name: row.TableName,\n        requestText: row.RequestText,\n        comment: row.CommentString,\n        kind: row.TableKind,\n      };\n    });\n  }\n\n  getStoredProcedures(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT DataBaseName, TableName, TableKind, RequestText, CommentString FROM dbc.tablesvx\n      WHERE TableKind = 'P'\n      ORDER BY TableName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.resultSetPredicate));\n  }\n\n  getExternalStoredProcedures(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT DataBaseName, TableName, TableKind, RequestText, CommentString FROM dbc.tablesvx\n      WHERE TableKind = 'E'\n      ORDER BY TableName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.resultSetPredicate));\n  }\n\n  getMacros(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT DataBaseName, TableName, TableKind, RequestText, CommentString FROM dbc.tablesvx\n      WHERE TableKind = 'M'\n      ORDER BY TableName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.resultSetPredicate));\n  }\n\n  functionsvxPredicate(resultSet: IQueryResultSet): any {\n    return resultSet.results[0].data.map((row: any) => {\n      return {\n        database: row.DatabaseName,\n        name: row.SpecificName,\n        paramNumber: row.NumParameters,\n        paramDataTypes: row.ParameterDataTypes,\n        requestText: row.RequestText,\n        commentString: row.CommentString,\n        kind: row.TableKind,\n      };\n    });\n  }\n\n  getTableOperators(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT func.DatabaseName, func.FunctionName, func.SpecificName, func.NumParameters,\n      func.ParameterDataTypes, tbl.RequestText, tbl.CommentString, tbl.TableKind\n      FROM dbc.functionsvx as func\n      INNER JOIN dbc.tablesvx as tbl\n      ON tbl.TableName = func.SpecificName\n      AND tbl.DataBaseName = func.DatabaseName\n      WHERE FunctionType = 'L'\n      ORDER BY func.FunctionName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.functionsvxPredicate));\n  }\n\n  getTableFunctions(connection: ISQLEConnection): Observable<any> {\n    const queryStr: string = `\n      SELECT func.DatabaseName, func.FunctionName, func.SpecificName, func.NumParameters,\n      func.ParameterDataTypes, tbl.RequestText, tbl.CommentString, tbl.TableKind\n      FROM dbc.functionsvx as func\n      INNER JOIN dbc.tablesvx as tbl\n      ON tbl.TableName = func.SpecificName\n      AND tbl.DataBaseName = func.DatabaseName\n      WHERE FunctionType = 'R'\n      ORDER BY func.FunctionName ASC;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(map(this.functionsvxPredicate));\n  }\n\n  getForeignServers(connection: ISQLEConnection): Observable<any[]> {\n    const queryStr: string = `\n      SELECT TableName, TableKind FROM DBC.TABLESVX\n      WHERE DATABASENAME = 'TD_SERVER_DB' AND\n      TABLEKIND = 'K' AND\n      TableName <> 'coprocesor';\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            return {\n              name: row.TableName,\n              kind: row.TableKind,\n            };\n          });\n        }),\n      );\n  }\n\n  getForeignSchemas(connection: ISQLEConnection, foreignServer: string): Observable<any[]> {\n    const queryStr: string = `\n      HELP FOREIGN SERVER ${foreignServer};\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: { Schema: string }) => {\n            return {\n              name: row.Schema,\n              kind: 'NONE',\n            };\n          });\n        }),\n      );\n  }\n\n  getForeignTables(connection: ISQLEConnection, foreignServer: string, schema: string): Observable<any[]> {\n    const queryStr: string = `\n      HELP FOREIGN DATABASE \"${schema}\"@${foreignServer};\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: { Table: string }) => {\n            return {\n              name: row.Table,\n              kind: 'NONE',\n            };\n          });\n        }),\n      );\n  }\n\n  getForeignColumns(\n    connection: ISQLEConnection,\n    foreignServer: string,\n    schema: string,\n    table: string,\n  ): Observable<any[]> {\n    const queryStr: string = `\n      HELP FOREIGN TABLE \"${schema}\".\"${table}\"@${foreignServer};\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: { Column: string; Type: string }) => {\n            return {\n              name: row.Column,\n              type: row.Type,\n            };\n          });\n        }),\n      );\n  }\n\n  getDatabases(connection: ISQLEConnection): Observable<any[]> {\n    const queryStr: string =\n      'SELECT databasename, PermSpace, SpoolSpace, TempSpace, CommentString, DBKind FROM dbc.databasesVX ORDER BY databasename;';\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            return {\n              name: row.DatabaseName || row.schemaname,\n              type: row.DBKind === 'U' ? 'user' : 'database',\n              permSpace: row.PermSpace,\n              spoolSpace: row.SpoolSpace,\n              tempSpace: row.TempSpace,\n              comment: row.CommentString,\n            };\n          });\n        }),\n      );\n  }\n\n  getDatabaseObjects(connection: ISQLEConnection, databaseId: string): Observable<any[]> {\n    const queryStr: string = `SELECT DataBaseName, TableName, TableKind, CommentString FROM dbc.tablesvx\n       WHERE TableKind in ('T', 'O', 'V') AND DataBaseName = '${databaseId}' ORDER BY TableName ASC;`;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            const type: string = row.TableKind || row.tablekind;\n            return {\n              kind: row.TableKind || row.tablekind,\n              type: type === 'V' ? 'view' : 'table',\n              name: row.TableName || row.tablename,\n              database: row.DataBaseName || row.databasename,\n              comment: row.CommentString,\n            };\n          });\n        }),\n      );\n  }\n\n  getTableColumns(type: string, connection: ISQLEConnection, databaseId: string, tableId: string): Observable<any> {\n    if (type === 'table') {\n      return this._queryService.getTableInfo(connection, databaseId, tableId).pipe(\n        map((resultSet: any) => {\n          return resultSet.columns.map((column: any) => {\n            return {\n              comment: column.remarks,\n              type: 'column',\n              columnType: column.type,\n              name: column.name,\n              database: resultSet.database,\n              table: resultSet.name,\n            };\n          });\n        }),\n      );\n    } else if (type === 'view') {\n      return this._queryService.getViewInfo(connection, databaseId, tableId).pipe(\n        map((resultSet: any) => {\n          return resultSet.columns.map((column: any) => {\n            return {\n              comment: column.remarks,\n              type: 'column',\n              columnType: column.type,\n              name: column.name,\n              database: resultSet.database,\n              table: resultSet.name,\n            };\n          });\n        }),\n      );\n    }\n  }\n\n  search(\n    connection: ISQLEConnection,\n    searchStr: string,\n    options: {\n      databases: boolean;\n      objects: boolean;\n      columns: boolean;\n    } = {\n      databases: true,\n      objects: true,\n      columns: true,\n    },\n  ): Observable<any[]> {\n    const queries: string[] = [];\n    if (options.databases) {\n      const dbQuery: string = `\n        SELECT\n            DatabaseName as objectName,\n            'database' as objectType,\n            DBKind as kind,\n            CommentString\n        FROM dbc.databasesvx\n        WHERE DatabaseName LIKE '%${searchStr}%'\n        AND DataBaseName NOT IN ('${sysDatabases.join(\"', '\")}')\n      `;\n      queries.push(dbQuery);\n    }\n    if (options.objects) {\n      const objectQuery: string = `\n        SELECT\n            DataBaseName || '~|~' || TableName as objectName,\n            'object' as objectType,\n            TableKind as kind,\n            CommentString\n        FROM dbc.tablesvx\n        WHERE TableKind in ('T', 'O', 'V')\n        AND TableName LIKE '%${searchStr}%'\n        AND DataBaseName NOT IN ('${sysDatabases.join(\"', '\")}')\n      `;\n      queries.push(objectQuery);\n    }\n    if (options.objects) {\n      const columnQuery: string = `\n        SELECT\n            DataBaseName || '~|~' || TableName || '~|~' || ColumnName as objectName,\n            'column' as objectType,\n            ColumnType as kind,\n            CommentString\n        FROM dbc.columnsVX\n        WHERE columnname LIKE '%${searchStr}%'\n        AND DataBaseName NOT IN ('${sysDatabases.join(\"', '\")}')\n      `;\n      queries.push(columnQuery);\n    }\n    const unionJoin: string = queries.join('UNION');\n    const queryStr: string = `\n      WITH quick_search AS (\n          ${unionJoin}\n      )\n      SELECT * FROM quick_search\n      ORDER BY 1\n      SAMPLE 100;\n    `;\n    return this._queryService\n      .querySystem(connection, {\n        query: queryStr,\n      })\n      .pipe(\n        map((resultSet: IQueryResultSet) => {\n          return resultSet.results[0].data.map((row: any) => {\n            let kind: string = row.kind;\n            // map to proper type/kind\n            if (row.objectType === 'column') {\n              kind = 'column';\n            } else if (row.objectType === 'database') {\n              kind = kind === 'D' ? 'database' : 'user';\n            } else {\n              kind = kind === 'V' ? 'view' : 'table';\n            }\n            const newParent: string[] = [];\n            // split name and parents..\n            const nameSplit: string[] = row.objectName.split('~|~');\n            for (let index: number = 0; index < nameSplit.length - 1; index++) {\n              newParent.push('\"' + nameSplit[index] + '\"');\n            }\n            return {\n              parent: newParent.join('.'),\n              name: nameSplit[nameSplit.length - 1],\n              kind,\n              type: row.objectType,\n              comment: row.CommentString,\n            };\n          });\n        }),\n      );\n  }\n}\n\nexport function VANTAGE_DICTIONARY_PROVIDER_FACTORY(\n  parent: VantageDictionaryService,\n  queryService: VantageQueryService,\n): VantageDictionaryService {\n  return parent || new VantageDictionaryService(queryService);\n}\n\nexport const VANTAGE_DICTIONARY_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageDictionaryService,\n  deps: [[new Optional(), new SkipSelf(), VantageDictionaryService], VantageQueryService],\n  useFactory: VANTAGE_DICTIONARY_PROVIDER_FACTORY,\n};\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VANTAGE_CONNECTION_PROVIDER } from './connection.service';\nimport { VANTAGE_DICTIONARY_PROVIDER } from './dictionary.service';\nimport { VANTAGE_QUERY_PROVIDER } from './query.service';\nimport { VANTAGE_SPOOLED_QUERY_PROVIDER } from './spooled-query.service';\n\n@NgModule({\n  imports: [CommonModule],\n  providers: [\n    VANTAGE_CONNECTION_PROVIDER,\n    VANTAGE_DICTIONARY_PROVIDER,\n    VANTAGE_QUERY_PROVIDER,\n    VANTAGE_SPOOLED_QUERY_PROVIDER,\n  ],\n})\nexport class VantageSQLEModule {}\n"],"names":[],"mappings":"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"}