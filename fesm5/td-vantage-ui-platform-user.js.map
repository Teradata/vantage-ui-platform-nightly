{"version":3,"file":"td-vantage-ui-platform-user.js","sources":["ng://@td-vantage/ui-platform/user/ldap/ldap.service.ts","ng://@td-vantage/ui-platform/user/user/user.service.ts","ng://@td-vantage/ui-platform/user/group/group.service.ts","ng://@td-vantage/ui-platform/user/user.module.ts"],"sourcesContent":["import { Provider, Optional, SkipSelf } from '@angular/core';\nimport { HttpHeaders } from '@angular/common/http';\n\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\nimport {\n  TdHttp,\n  TdGET,\n  TdPUT,\n  TdPOST,\n  TdPATCH,\n  TdDELETE,\n  TdParam,\n  TdBody,\n  TdResponse,\n} from '@covalent/http';\n\nexport enum LDAPEncription {\n  None = 'NONE',\n}\n\nexport interface ILDAPConfig {\n  allowed_groups?: string[];\n  base_dn?: string;\n  config_id?: number;\n  connectionUrl?: string;\n  email_field?: string;\n  encryption?: LDAPEncription;\n  group_id_field?: string;\n  groups_base_dn?: string;\n  id_field?: string;\n  member_field?: string;\n  member_of_field?: string;\n  name_field?: string;\n  port?: number;\n  search_pass?: string;\n  search_user?: string;\n  server?: string;\n  url?: string;\n}\n\n@TdHttp({\n  baseUrl: '/api/user/ldap/config',\n  baseHeaders: new HttpHeaders({ 'Accept': 'application/json' }),\n})\nexport class VantageLDAPService {\n  \n  @TdGET({\n    path: '/',\n  })\n  query(@TdResponse() response?: Observable<ILDAPConfig[]>): Observable<ILDAPConfig[]> {\n    return response;\n  }\n\n  @TdPOST({\n    path: '/',\n  })\n  create(@TdBody() body: ILDAPConfig,\n         @TdResponse() response?: Observable<ILDAPConfig>): Observable<ILDAPConfig> {\n    return response;\n  }\n\n  @TdPATCH({\n    path: '/:id',\n  })\n  update(@TdParam('id') id: string | number,\n          @TdBody() body: ILDAPConfig,\n          @TdResponse() response?: Observable<ILDAPConfig>): Observable<ILDAPConfig> {\n    return response;\n  }\n\n  @TdDELETE({\n    path: '/:id',\n  })\n  delete(@TdParam('id') id: string | number,\n          @TdResponse() response?: Observable<void>): Observable<void> {\n    return response;\n  }\n\n  @TdPOST({\n    path: '/verify',\n    options: {\n      observe: 'response',\n    },\n  })\n  test(@TdBody() body: ILDAPConfig,\n       @TdResponse() response?: Observable<boolean>): Observable<boolean> {\n    return response.pipe(\n      map((res: any) => {\n        return res.status === 200 ? true : false;\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_LDAP_PROVIDER_FACTORY(parent: VantageLDAPService): VantageLDAPService {\n  return parent || new VantageLDAPService();\n}\n\nexport const VANTAGE_LDAP_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageLDAPService,\n  deps: [[new Optional(), new SkipSelf(), VantageLDAPService]],\n  useFactory: VANTAGE_LDAP_PROVIDER_FACTORY,\n};\n","import { Provider, SkipSelf, Optional } from '@angular/core';\nimport { HttpHeaders, HttpResponse, HttpParams } from '@angular/common/http';\nimport {\n  TdHttp,\n  TdGET,\n  TdResponse,\n  TdParam,\n  TdQueryParams,\n} from '@covalent/http';\nimport { Observable, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nexport interface IUser {\n  username?: string;\n  password?: string;\n  email?: string;\n  local?: boolean;\n  admin?: boolean;\n  groups?: string[];\n  display_name?: string;\n  access_token?: string;\n  expires_at?: number;\n}\n\n@TdHttp({\n  baseUrl: '/api/user',\n  baseHeaders: new HttpHeaders({\n    Accept: 'application/json',\n  }),\n})\nexport class VantageUserService {\n\n  /**\n   * get all users\n   */\n  @TdGET({\n    path: '/users',\n    options: {\n      observe: 'response',\n    },\n  })\n  query(\n    @TdQueryParams() queryParams?: HttpParams,\n    @TdResponse() response?: Observable<HttpResponse<any>>,\n  ): Observable<{total: number, data: IUser[]}> {\n    return response.pipe(\n      catchError((error: Response) => {\n        return of(error);\n      }),\n      map((res: HttpResponse<any>) => {\n        return {\n          total: +res.headers.get('X-Total'),\n          data: <IUser[]>res.body,\n        };\n      }),\n    );\n  }\n\n  /**\n   * gets a single users information\n   */\n  @TdGET({\n    path: '/users/:username',\n    options: {\n      observe: 'response',\n    },\n  })\n  get(\n    @TdParam('username') id: string,\n    @TdResponse() response?: Observable<HttpResponse<any>>,\n  ): Observable<IUser> {\n    return response.pipe(\n      catchError((error: Response) => {\n        return of(error);\n      }),\n      map((res: HttpResponse<IUser>) => {\n        return <IUser>res.body;\n      }),\n    );\n  }\n\n}\n\nexport function VANTAGE_USER_PROVIDER_FACTORY(parent: VantageUserService): VantageUserService {\n  return parent || new VantageUserService();\n}\n\nexport const VANTAGE_USER_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageUserService,\n  deps: [[new Optional(), new SkipSelf(), VantageUserService]],\n  useFactory: VANTAGE_USER_PROVIDER_FACTORY,\n};\n","import { Provider, SkipSelf, Optional } from '@angular/core';\nimport { HttpHeaders, HttpResponse, HttpParams } from '@angular/common/http';\nimport {\n  TdHttp,\n  TdGET,\n  TdResponse,\n  TdQueryParams,\n} from '@covalent/http';\nimport { Observable, of } from 'rxjs';\nimport { map, catchError } from 'rxjs/operators';\n\nexport interface IGroup {\n  name?: string;\n  description?: string;\n  id?: string;\n  display_name?: string;\n  users?: string[];\n}\n\n@TdHttp({\n  baseUrl: '/api/user',\n  baseHeaders: new HttpHeaders({\n    Accept: 'application/json',\n  }),\n})\nexport class VantageGroupService {\n\n  /**\n   * get groups in paginated form via query string\n   */\n  @TdGET({\n    path: '/groups',\n    options: {\n      observe: 'response',\n    },\n  })\n  query(\n    @TdQueryParams() queryParams?: HttpParams,\n    @TdResponse() response?: Observable<HttpResponse<any>>,\n  ): Observable<{total: number, data: IGroup[]}> {\n    return response.pipe(\n      catchError((error: Response) => {\n        return of(error);\n      }),\n      map((res: HttpResponse<any>) => {\n        return {\n          total: +res.headers.get('X-Total'),\n          data: <IGroup[]>res.body,\n        };\n      }),\n    );\n  }\n}\n\nexport function VANTAGE_GROUP_PROVIDER_FACTORY(parent: VantageGroupService): VantageGroupService {\n  return parent || new VantageGroupService();\n}\n\nexport const VANTAGE_GROUP_PROVIDER: Provider = {\n  // If there is already a service available, use that. Otherwise, provide a new one.\n  provide: VantageGroupService,\n  deps: [[new Optional(), new SkipSelf(), VantageGroupService]],\n  useFactory: VANTAGE_GROUP_PROVIDER_FACTORY,\n};\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { VANTAGE_LDAP_PROVIDER } from './ldap/ldap.service';\nimport { VANTAGE_USER_PROVIDER } from './user/user.service';\nimport { VANTAGE_GROUP_PROVIDER } from './group/group.service';\n\n@NgModule({\n  imports: [\n    CommonModule,\n  ],\n  providers: [\n    VANTAGE_LDAP_PROVIDER,\n    VANTAGE_USER_PROVIDER,\n    VANTAGE_GROUP_PROVIDER,\n  ],\n})\nexport class VantageUserModule {\n\n}\n"],"names":["tslib_1.__decorate","tslib_1.__param"],"mappings":";;;;;;;;;;;;;;IAmBE,MAAO,MAAM;;;;KA2Ed;;;;;IA3CC,kCAAK;;;;IAAL,UAAoB,QAAoC;QACtD,OAAO,QAAQ,CAAC;KACjB;;;;;;IAKD,mCAAM;;;;;IAAN,UAAiB,IAAiB,EACb,QAAkC;QACrD,OAAO,QAAQ,CAAC;KACjB;;;;;;;IAKD,mCAAM;;;;;;IAAN,UAAsB,EAAmB,EACvB,IAAiB,EACb,QAAkC;QACtD,OAAO,QAAQ,CAAC;KACjB;;;;;;IAKD,mCAAM;;;;;IAAN,UAAsB,EAAmB,EACnB,QAA2B;QAC/C,OAAO,QAAQ,CAAC;KACjB;;;;;;IAQD,iCAAI;;;;;IAAJ,UAAe,IAAiB,EACb,QAA8B;QAC/C,OAAO,QAAQ,CAAC,IAAI,CAClB,GAAG;;;;QAAC,UAAC,GAAQ;YACX,OAAO,GAAG,CAAC,MAAM,KAAK,GAAG,GAAG,IAAI,GAAG,KAAK,CAAC;SAC1C,EAAC,CACH,CAAC;KACH;IA1CDA;QAHC,KAAK,CAAC;YACL,IAAI,EAAE,GAAG;SACV,CAAC;QACKC,WAAA,UAAU,EAAE,CAAA;;yCAAY,UAAU;wCAAkB,UAAU;mDAEpE;IAKDD;QAHC,MAAM,CAAC;YACN,IAAI,EAAE,GAAG;SACV,CAAC;QACMC,WAAA,MAAM,EAAE,CAAA;QACRA,WAAA,UAAU,EAAE,CAAA;;iDAAY,UAAU;wCAAgB,UAAU;oDAEnE;IAKDD;QAHC,OAAO,CAAC;YACP,IAAI,EAAE,MAAM;SACb,CAAC;QACMC,WAAA,OAAO,CAAC,IAAI,CAAC,CAAA;QACZA,WAAA,MAAM,EAAE,CAAA;QACRA,WAAA,UAAU,EAAE,CAAA;;yDAAY,UAAU;wCAAgB,UAAU;oDAEpE;IAKDD;QAHC,QAAQ,CAAC;YACR,IAAI,EAAE,MAAM;SACb,CAAC;QACMC,WAAA,OAAO,CAAC,IAAI,CAAC,CAAA;QACZA,WAAA,UAAU,EAAE,CAAA;;iDAAY,UAAU;wCAAS,UAAU;oDAE7D;IAQDD;QANC,MAAM,CAAC;YACN,IAAI,EAAE,SAAS;YACf,OAAO,EAAE;gBACP,OAAO,EAAE,UAAU;aACpB;SACF,CAAC;QACIC,WAAA,MAAM,EAAE,CAAA;QACRA,WAAA,UAAU,EAAE,CAAA;;iDAAY,UAAU;wCAAY,UAAU;kDAM7D;IA/CU,kBAAkB;QAJ9B,MAAM,CAAC;YACN,OAAO,EAAE,uBAAuB;YAChC,WAAW,EAAE,IAAI,WAAW,CAAC,EAAE,QAAQ,EAAE,kBAAkB,EAAE,CAAC;SAC/D,CAAC;OACW,kBAAkB,CAgD9B;IAAD,yBAAC;CAAA,IAAA;;;;;AAED,SAAgB,6BAA6B,CAAC,MAA0B;IACtE,OAAO,MAAM,IAAI,IAAI,kBAAkB,EAAE,CAAC;CAC3C;;AAED,IAAa,qBAAqB,GAAa;;IAE7C,OAAO,EAAE,kBAAkB;IAC3B,IAAI,EAAE,CAAC,CAAC,IAAI,QAAQ,EAAE,EAAE,IAAI,QAAQ,EAAE,EAAE,kBAAkB,CAAC,CAAC;IAC5D,UAAU,EAAE,6BAA6B;CAC1C;;;;;;;;KCxBA;;;;;;;;;;IAxCC,kCAAK;;;;;;IAAL,UACmB,WAAwB,EAC3B,QAAwC;QAEtD,OAAO,QAAQ,CAAC,IAAI,CAClB,UAAU;;;;QAAC,UAAC,KAAe;YACzB,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC;SAClB,EAAC,EACF,GAAG;;;;QAAC,UAAC,GAAsB;YACzB,OAAO;gBACL,KAAK,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC;gBAClC,IAAI,qBAAW,GAAG,CAAC,IAAI,EAAA;aACxB,CAAC;SACH,EAAC,CACH,CAAC;KACH;;;;;;;;;;IAWD,gCAAG;;;;;;IAAH,UACuB,EAAU,EACjB,QAAwC;QAEtD,OAAO,QAAQ,CAAC,IAAI,CAClB,UAAU;;;;QAAC,UAAC,KAAe;YACzB,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC;SAClB,EAAC,EACF,GAAG;;;;QAAC,UAAC,GAAwB;YAC3B,0BAAc,GAAG,CAAC,IAAI,GAAC;SACxB,EAAC,CACH,CAAC;KACH;IAtCDD;QANC,KAAK,CAAC;YACL,IAAI,EAAE,QAAQ;YACd,OAAO,EAAE;gBACP,OAAO,EAAE,UAAU;aACpB;SACF,CAAC;QAECC,WAAA,aAAa,EAAE,CAAA;QACfA,WAAA,UAAU,EAAE,CAAA;;yCADkB,UAAU;YAChB,UAAU;wCAClC,UAAU;mDAYZ;IAWDD;QANC,KAAK,CAAC;YACL,IAAI,EAAE,kBAAkB;YACxB,OAAO,EAAE;gBACP,OAAO,EAAE,UAAU;aACpB;SACF,CAAC;QAECC,WAAA,OAAO,CAAC,UAAU,CAAC,CAAA;QACnBA,WAAA,UAAU,EAAE,CAAA;;iDAAY,UAAU;wCAClC,UAAU;iDASZ;IAjDU,kBAAkB;QAN9B,MAAM,CAAC;YACN,OAAO,EAAE,WAAW;YACpB,WAAW,EAAE,IAAI,WAAW,CAAC;gBAC3B,MAAM,EAAE,kBAAkB;aAC3B,CAAC;SACH,CAAC;OACW,kBAAkB,CAmD9B;IAAD,yBAAC;CAAA,IAAA;;;;;AAED,SAAgB,6BAA6B,CAAC,MAA0B;IACtE,OAAO,MAAM,IAAI,IAAI,kBAAkB,EAAE,CAAC;CAC3C;;AAED,IAAa,qBAAqB,GAAa;;IAE7C,OAAO,EAAE,kBAAkB;IAC3B,IAAI,EAAE,CAAC,CAAC,IAAI,QAAQ,EAAE,EAAE,IAAI,QAAQ,EAAE,EAAE,kBAAkB,CAAC,CAAC;IAC5D,UAAU,EAAE,6BAA6B;CAC1C;;;;;;;;KCxCA;;;;;;;;;;IAhBC,mCAAK;;;;;;IAAL,UACmB,WAAwB,EAC3B,QAAwC;QAEtD,OAAO,QAAQ,CAAC,IAAI,CAClB,UAAU;;;;QAAC,UAAC,KAAe;YACzB,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC;SAClB,EAAC,EACF,GAAG;;;;QAAC,UAAC,GAAsB;YACzB,OAAO;gBACL,KAAK,EAAE,CAAC,GAAG,CAAC,OAAO,CAAC,GAAG,CAAC,SAAS,CAAC;gBAClC,IAAI,qBAAY,GAAG,CAAC,IAAI,EAAA;aACzB,CAAC;SACH,EAAC,CACH,CAAC;KACH;IAfDD;QANC,KAAK,CAAC;YACL,IAAI,EAAE,SAAS;YACf,OAAO,EAAE;gBACP,OAAO,EAAE,UAAU;aACpB;SACF,CAAC;QAECC,WAAA,aAAa,EAAE,CAAA;QACfA,WAAA,UAAU,EAAE,CAAA;;yCADkB,UAAU;YAChB,UAAU;wCAClC,UAAU;oDAYZ;IA1BU,mBAAmB;QAN/B,MAAM,CAAC;YACN,OAAO,EAAE,WAAW;YACpB,WAAW,EAAE,IAAI,WAAW,CAAC;gBAC3B,MAAM,EAAE,kBAAkB;aAC3B,CAAC;SACH,CAAC;OACW,mBAAmB,CA2B/B;IAAD,0BAAC;CAAA,IAAA;;;;;AAED,SAAgB,8BAA8B,CAAC,MAA2B;IACxE,OAAO,MAAM,IAAI,IAAI,mBAAmB,EAAE,CAAC;CAC5C;;AAED,IAAa,sBAAsB,GAAa;;IAE9C,OAAO,EAAE,mBAAmB;IAC5B,IAAI,EAAE,CAAC,CAAC,IAAI,QAAQ,EAAE,EAAE,IAAI,QAAQ,EAAE,EAAE,mBAAmB,CAAC,CAAC;IAC7D,UAAU,EAAE,8BAA8B;CAC3C;;;;;;AC/DD;IAOA;KAYC;;gBAZA,QAAQ,SAAC;oBACR,OAAO,EAAE;wBACP,YAAY;qBACb;oBACD,SAAS,EAAE;wBACT,qBAAqB;wBACrB,qBAAqB;wBACrB,sBAAsB;qBACvB;iBACF;;IAGD,wBAAC;CAZD;;;;"}